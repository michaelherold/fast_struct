# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prism` gem.
# Please instead update this file by running `bin/tapioca gem prism`.

# =begin
# This file is generated by the templates/template.rb script and should not be
# modified manually. See templates/rbi/prism.rbi.erb
# if you are looking to modify the template
# =end

# source://prism//lib/prism.rb#8
module Prism
  class << self
    def dump(*_arg0); end
    def dump_file(*_arg0); end
    def lex(*_arg0); end

    # source://prism//lib/prism.rb#46
    def lex_compat(source, **options); end

    def lex_file(*_arg0); end

    # source://prism//lib/prism.rb#56
    def lex_ripper(source); end

    # source://prism//lib/prism.rb#64
    def load(source, serialized); end

    def parse(*_arg0); end
    def parse_comments(*_arg0); end

    # source://prism//lib/prism.rb#72
    def parse_failure?(source, **options); end

    def parse_file(*_arg0); end
    def parse_file_comments(*_arg0); end

    # source://prism//lib/prism.rb#80
    def parse_file_failure?(filepath, **options); end

    def parse_file_success?(*_arg0); end
    def parse_lex(*_arg0); end
    def parse_lex_file(*_arg0); end
    def parse_success?(*_arg0); end
  end
end

# source://prism//lib/prism/node.rb#97
class Prism::AliasGlobalVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#99
  def initialize(source, new_name, old_name, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#109
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#114
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#124
  def comment_targets; end

  # source://prism//lib/prism/node.rb#119
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#129
  sig { params(params: T.untyped).returns(Prism::AliasGlobalVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#114
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#143
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#166
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#161
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#154
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#148
  sig { returns(Prism::Node) }
  def new_name; end

  # source://prism//lib/prism/node.rb#151
  sig { returns(Prism::Node) }
  def old_name; end

  # source://prism//lib/prism/node.rb#190
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#200
    def type; end
  end
end

# source://prism//lib/prism/node.rb#209
class Prism::AliasMethodNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#211
  def initialize(source, new_name, old_name, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#221
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#226
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#236
  def comment_targets; end

  # source://prism//lib/prism/node.rb#231
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#241
  sig { params(params: T.untyped).returns(Prism::AliasMethodNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#226
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#255
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#278
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#273
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#266
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#260
  sig { returns(Prism::Node) }
  def new_name; end

  # source://prism//lib/prism/node.rb#263
  sig { returns(Prism::Node) }
  def old_name; end

  # source://prism//lib/prism/node.rb#302
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#312
    def type; end
  end
end

# source://prism//lib/prism/node.rb#321
class Prism::AlternationPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#323
  def initialize(source, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#333
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#338
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#348
  def comment_targets; end

  # source://prism//lib/prism/node.rb#343
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#353
  sig { params(params: T.untyped).returns(Prism::AlternationPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#338
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#367
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#390
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#372
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#385
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#378
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#375
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#414
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#424
    def type; end
  end
end

# source://prism//lib/prism/node.rb#433
class Prism::AndNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#435
  def initialize(source, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#445
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#450
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#460
  def comment_targets; end

  # source://prism//lib/prism/node.rb#455
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#465
  sig { params(params: T.untyped).returns(Prism::AndNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#450
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#479
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#517
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#490
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#512
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#505
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#499
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#541
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#551
    def type; end
  end
end

# source://prism//lib/prism/node.rb#560
class Prism::ArgumentsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#562
  def initialize(source, flags, arguments, location); end

  # source://prism//lib/prism/node.rb#571
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#613
  sig { returns(T::Array[Prism::Node]) }
  def arguments; end

  # source://prism//lib/prism/node.rb#576
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#586
  def comment_targets; end

  # source://prism//lib/prism/node.rb#581
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#617
  sig { returns(T::Boolean) }
  def contains_keyword_splat?; end

  # source://prism//lib/prism/node.rb#591
  sig { params(params: T.untyped).returns(Prism::ArgumentsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#576
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#604
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#622
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#644
  def type; end

  private

  # source://prism//lib/prism/node.rb#609
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#654
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19241
# Flags for arguments nodes.
module Prism::ArgumentsNodeFlags; end

# source://prism//lib/prism/node.rb#19243
Prism::ArgumentsNodeFlags::CONTAINS_KEYWORD_SPLAT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#663
class Prism::ArrayNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#665
  def initialize(source, flags, elements, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#676
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#681
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#758
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#735
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#691
  def comment_targets; end

  # source://prism//lib/prism/node.rb#686
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#748
  sig { returns(T::Boolean) }
  def contains_splat?; end

  # source://prism//lib/prism/node.rb#696
  sig { params(params: T.untyped).returns(Prism::ArrayNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#681
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#711
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#720
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#763
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#753
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#723
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#787
  def type; end

  private

  # source://prism//lib/prism/node.rb#716
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#797
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19247
# Flags for array nodes.
module Prism::ArrayNodeFlags; end

# source://prism//lib/prism/node.rb#19249
Prism::ArrayNodeFlags::CONTAINS_SPLAT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#818
class Prism::ArrayPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#820
  def initialize(source, constant, requireds, rest, posts, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#833
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#838
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#922
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#904
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#853
  def comment_targets; end

  # source://prism//lib/prism/node.rb#843
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#880
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#858
  sig { params(params: T.untyped).returns(Prism::ArrayPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#838
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#875
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#927
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#917
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#892
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#889
  sig { returns(T::Array[Prism::Node]) }
  def posts; end

  # source://prism//lib/prism/node.rb#883
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#886
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#962
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#972
    def type; end
  end
end

# source://prism//lib/prism/node.rb#981
class Prism::AssocNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#983
  def initialize(source, key, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#993
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#998
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1008
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1003
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1013
  sig { params(params: T.untyped).returns(Prism::AssocNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#998
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1027
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1074
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1041
  sig { returns(Prism::Node) }
  def key; end

  # source://prism//lib/prism/node.rb#1069
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#1056
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1098
  def type; end

  # source://prism//lib/prism/node.rb#1050
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#1108
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1117
class Prism::AssocSplatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1119
  def initialize(source, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#1128
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1133
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1145
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1138
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1150
  sig { params(params: T.untyped).returns(Prism::AssocSplatNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1133
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1163
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1189
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1184
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1177
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1215
  def type; end

  # source://prism//lib/prism/node.rb#1171
  sig { returns(T.nilable(Prism::Node)) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#1225
    def type; end
  end
end

Prism::BACKEND = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/node.rb#1234
class Prism::BackReferenceReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1236
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#1244
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1249
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1259
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1254
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1264
  sig { params(params: T.untyped).returns(Prism::BackReferenceReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1249
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1276
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1289
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1285
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#1309
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1319
    def type; end
  end
end

# source://prism//lib/prism/visitor.rb#13
class Prism::BasicVisitor
  # source://prism//lib/prism/visitor.rb#16
  sig { params(node: T.nilable(Prism::Node)).void }
  def visit(node); end

  # source://prism//lib/prism/visitor.rb#21
  sig { params(nodes: T::Array[T.nilable(Prism::Node)]).void }
  def visit_all(nodes); end

  # source://prism//lib/prism/visitor.rb#26
  sig { params(node: Prism::Node).void }
  def visit_child_nodes(node); end
end

# source://prism//lib/prism/node.rb#1330
class Prism::BeginNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1332
  def initialize(source, begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#1345
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1433
  sig { returns(T.nilable(String)) }
  def begin_keyword; end

  # source://prism//lib/prism/node.rb#1396
  sig { returns(T.nilable(Prism::Location)) }
  def begin_keyword_loc; end

  # source://prism//lib/prism/node.rb#1354
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1369
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1359
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1374
  sig { params(params: T.untyped).returns(Prism::BeginNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1354
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1391
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1414
  sig { returns(T.nilable(Prism::ElseNode)) }
  def else_clause; end

  # source://prism//lib/prism/node.rb#1438
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#1420
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#1417
  sig { returns(T.nilable(Prism::EnsureNode)) }
  def ensure_clause; end

  # source://prism//lib/prism/node.rb#1443
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1411
  sig { returns(T.nilable(Prism::RescueNode)) }
  def rescue_clause; end

  # source://prism//lib/prism/node.rb#1349
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#1408
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#1488
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1498
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1507
class Prism::BlockArgumentNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1509
  def initialize(source, expression, operator_loc, location); end

  # source://prism//lib/prism/node.rb#1518
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1523
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1535
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1528
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1540
  sig { params(params: T.untyped).returns(Prism::BlockArgumentNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1523
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1553
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1558
  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  # source://prism//lib/prism/node.rb#1573
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1568
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1561
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1599
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1609
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1618
class Prism::BlockLocalVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1620
  def initialize(source, flags, name, location); end

  # source://prism//lib/prism/node.rb#1629
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1634
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1644
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1639
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1649
  sig { params(params: T.untyped).returns(Prism::BlockLocalVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1634
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1662
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1680
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1671
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#1675
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#1702
  def type; end

  private

  # source://prism//lib/prism/node.rb#1667
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#1712
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1721
class Prism::BlockNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1723
  def initialize(source, locals, parameters, body, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#1735
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1785
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#1740
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1806
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#1794
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#1753
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1745
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1758
  sig { params(params: T.untyped).returns(Prism::BlockNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1740
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1774
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1811
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1779
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#1801
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#1788
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#1782
  sig { returns(T.nilable(Prism::Node)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#1845
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#1855
    def type; end
  end
end

# source://prism//lib/prism/node.rb#1865
class Prism::BlockParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#1867
  def initialize(source, flags, name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#1878
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#1883
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#1893
  def comment_targets; end

  # source://prism//lib/prism/node.rb#1888
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#1898
  sig { params(params: T.untyped).returns(Prism::BlockParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#1883
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#1913
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#1954
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#1922
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#1925
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#1949
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#1937
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#1944
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#1982
  def type; end

  private

  # source://prism//lib/prism/node.rb#1918
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#1992
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2005
class Prism::BlockParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2007
  def initialize(source, parameters, locals, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#2018
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2023
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2097
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#2079
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#2036
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2028
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2041
  sig { params(params: T.untyped).returns(Prism::BlockParametersNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2023
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2056
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2102
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2064
  sig { returns(T::Array[Prism::Node]) }
  def locals; end

  # source://prism//lib/prism/node.rb#2092
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#2067
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#2061
  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#2130
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#2140
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2149
class Prism::BreakNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2151
  def initialize(source, arguments, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#2160
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2200
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#2165
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2177
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2170
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2182
  sig { params(params: T.untyped).returns(Prism::BreakNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2165
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2195
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2215
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2210
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#2203
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#2241
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#2251
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2260
class Prism::CallAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2262
  def initialize(source, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#2277
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2381
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2391
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2331
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2282
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2295
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2287
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2300
  sig { params(params: T.untyped).returns(Prism::CallAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2282
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2319
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2386
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#2406
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2396
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2343
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2401
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#2361
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2355
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2328
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2371
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2440
  def type; end

  # source://prism//lib/prism/node.rb#2367
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2376
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2358
  sig { returns(Symbol) }
  def write_name; end

  private

  # source://prism//lib/prism/node.rb#2324
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2450
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2474
class Prism::CallNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2476
  def initialize(source, flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block, location); end

  # source://prism//lib/prism/node.rb#2492
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2596
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#2625
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2611
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#2635
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2557
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2497
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2650
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#2599
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#2511
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2502
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2516
  sig { params(params: T.untyped).returns(Prism::CallNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2497
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2536
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2630
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#2655
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2640
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2572
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2569
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#2645
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#2584
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#2554
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2615
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2699
  def type; end

  # source://prism//lib/prism/node.rb#2620
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#2541
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2709
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19253
# Flags for call nodes.
module Prism::CallNodeFlags; end

# source://prism//lib/prism/node.rb#19261
Prism::CallNodeFlags::ATTRIBUTE_WRITE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19264
Prism::CallNodeFlags::IGNORE_VISIBILITY = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19255
Prism::CallNodeFlags::SAFE_NAVIGATION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19258
Prism::CallNodeFlags::VARIABLE_CALL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#2718
class Prism::CallOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2720
  def initialize(source, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#2736
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#2844
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#2854
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2791
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2741
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2754
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2746
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2759
  sig { params(params: T.untyped).returns(Prism::CallOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2741
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2779
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#2849
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#2864
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#2859
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#2803
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#2821
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#2824
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#2815
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2788
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#2834
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#2899
  def type; end

  # source://prism//lib/prism/node.rb#2830
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#2839
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#2818
  sig { returns(Symbol) }
  def write_name; end

  private

  # source://prism//lib/prism/node.rb#2784
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#2909
    def type; end
  end
end

# source://prism//lib/prism/node.rb#2918
class Prism::CallOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#2920
  def initialize(source, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#2935
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3039
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#3049
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#2989
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#2940
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#2953
  def comment_targets; end

  # source://prism//lib/prism/node.rb#2945
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#2958
  sig { params(params: T.untyped).returns(Prism::CallOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#2940
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#2977
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3044
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#3064
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3054
  sig { returns(T.nilable(String)) }
  def message; end

  # source://prism//lib/prism/node.rb#3001
  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#3059
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3019
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3013
  sig { returns(Symbol) }
  def read_name; end

  # source://prism//lib/prism/node.rb#2986
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#3029
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#3098
  def type; end

  # source://prism//lib/prism/node.rb#3025
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#3034
  sig { returns(T::Boolean) }
  def variable_call?; end

  # source://prism//lib/prism/node.rb#3016
  sig { returns(Symbol) }
  def write_name; end

  private

  # source://prism//lib/prism/node.rb#2982
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#3108
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3125
class Prism::CallTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3127
  def initialize(source, flags, receiver, call_operator_loc, name, message_loc, location); end

  # source://prism//lib/prism/node.rb#3139
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3213
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#3223
  sig { returns(String) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#3187
  sig { returns(Prism::Location) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#3144
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3154
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3149
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3159
  sig { params(params: T.untyped).returns(Prism::CallTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3144
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3175
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3218
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#3233
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3228
  sig { returns(String) }
  def message; end

  # source://prism//lib/prism/node.rb#3196
  sig { returns(Prism::Location) }
  def message_loc; end

  # source://prism//lib/prism/node.rb#3193
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3184
  sig { returns(Prism::Node) }
  def receiver; end

  # source://prism//lib/prism/node.rb#3203
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#3259
  def type; end

  # source://prism//lib/prism/node.rb#3208
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#3180
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#3269
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3278
class Prism::CapturePatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3280
  def initialize(source, value, target, operator_loc, location); end

  # source://prism//lib/prism/node.rb#3290
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3295
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3305
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3300
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3310
  sig { params(params: T.untyped).returns(Prism::CapturePatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3295
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3324
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3347
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3342
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3335
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3332
  sig { returns(Prism::Node) }
  def target; end

  # source://prism//lib/prism/node.rb#3371
  def type; end

  # source://prism//lib/prism/node.rb#3329
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3381
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3392
class Prism::CaseMatchNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3394
  def initialize(source, predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#3406
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3473
  sig { returns(String) }
  def case_keyword; end

  # source://prism//lib/prism/node.rb#3460
  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  # source://prism//lib/prism/node.rb#3411
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3425
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3416
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3454
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#3457
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#3430
  sig { params(params: T.untyped).returns(Prism::CaseMatchNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3411
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3446
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3478
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3466
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#3483
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3451
  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  # source://prism//lib/prism/node.rb#3517
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3527
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3538
class Prism::CaseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3540
  def initialize(source, predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#3552
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3619
  sig { returns(String) }
  def case_keyword; end

  # source://prism//lib/prism/node.rb#3606
  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  # source://prism//lib/prism/node.rb#3557
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3571
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3562
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3600
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#3603
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#3576
  sig { params(params: T.untyped).returns(Prism::CaseNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3557
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3592
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3624
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3612
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#3629
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3597
  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  # source://prism//lib/prism/node.rb#3663
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3673
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3682
class Prism::ClassNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3684
  def initialize(source, locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location); end

  # source://prism//lib/prism/node.rb#3699
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3774
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#3704
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3787
  sig { returns(String) }
  def class_keyword; end

  # source://prism//lib/prism/node.rb#3750
  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  # source://prism//lib/prism/node.rb#3718
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3709
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3756
  sig { returns(Prism::Node) }
  def constant_path; end

  # source://prism//lib/prism/node.rb#3723
  sig { params(params: T.untyped).returns(Prism::ClassNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3704
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3742
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#3797
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#3777
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#3792
  sig { returns(T.nilable(String)) }
  def inheritance_operator; end

  # source://prism//lib/prism/node.rb#3759
  sig { returns(T.nilable(Prism::Location)) }
  def inheritance_operator_loc; end

  # source://prism//lib/prism/node.rb#3802
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3747
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#3783
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3771
  sig { returns(T.nilable(Prism::Node)) }
  def superclass; end

  # source://prism//lib/prism/node.rb#3840
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#3850
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3859
class Prism::ClassVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3861
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#3872
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3877
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#3887
  def comment_targets; end

  # source://prism//lib/prism/node.rb#3882
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#3892
  sig { params(params: T.untyped).returns(Prism::ClassVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3877
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#3907
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#125
  def desugar; end

  # source://prism//lib/prism/node.rb#3936
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#3912
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#3915
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#3931
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#3921
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#3960
  def type; end

  # source://prism//lib/prism/node.rb#3927
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#3970
    def type; end
  end
end

# source://prism//lib/prism/node.rb#3979
class Prism::ClassVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#3981
  def initialize(source, name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#3993
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#3998
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4008
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4003
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4013
  sig { params(params: T.untyped).returns(Prism::ClassVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#3998
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4029
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#137
  def desugar; end

  # source://prism//lib/prism/node.rb#4056
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4034
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4037
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4052
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#4043
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4081
  def type; end

  # source://prism//lib/prism/node.rb#4049
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4091
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4100
class Prism::ClassVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4102
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4113
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4118
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4128
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4123
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4133
  sig { params(params: T.untyped).returns(Prism::ClassVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4118
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4148
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#131
  def desugar; end

  # source://prism//lib/prism/node.rb#4177
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4153
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4156
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4172
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4162
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4201
  def type; end

  # source://prism//lib/prism/node.rb#4168
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4211
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4220
class Prism::ClassVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4222
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#4230
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4235
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4245
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4240
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4250
  sig { params(params: T.untyped).returns(Prism::ClassVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4235
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4262
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4275
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4271
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4295
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4305
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4314
class Prism::ClassVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4316
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#4324
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4329
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4339
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4334
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4344
  sig { params(params: T.untyped).returns(Prism::ClassVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4329
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4356
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4365
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4361
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4385
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#4395
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4404
class Prism::ClassVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4406
  def initialize(source, name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#4417
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4422
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4432
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4427
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4437
  sig { params(params: T.untyped).returns(Prism::ClassVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4422
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4452
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4487
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4457
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4460
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4482
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#4469
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4511
  def type; end

  # source://prism//lib/prism/node.rb#4466
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4521
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#258
class Prism::Comment
  # source://prism//lib/prism/parse_result.rb#263
  def initialize(location); end

  # source://prism//lib/prism/parse_result.rb#268
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#260
  sig { returns(Prism::Location) }
  def location; end

  sig { returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/compiler.rb#26
class Prism::Compiler
  # source://prism//lib/prism/compiler.rb#28
  def visit(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/compiler.rb#33
  def visit_all(nodes); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_and_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_arguments_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_array_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_assoc_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_begin_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_break_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_call_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_case_match_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_case_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_child_nodes(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_def_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_defined_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_else_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_ensure_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_false_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_float_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_for_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_hash_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_if_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_implicit_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_in_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_index_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_integer_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_lambda_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_required_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_match_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_missing_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_module_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_next_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_nil_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_or_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_parameters_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_program_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_range_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rational_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_redo_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rescue_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_retry_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_return_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_self_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_source_file_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_source_line_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_splat_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_statements_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_super_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_symbol_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_true_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_undef_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_unless_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_until_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_when_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_while_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_x_string_node(node); end

  # source://prism//lib/prism/compiler.rb#38
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#4530
class Prism::ConstantAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4532
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4543
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4548
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4558
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4553
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4563
  sig { params(params: T.untyped).returns(Prism::ConstantAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4548
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4578
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#143
  def desugar; end

  # source://prism//lib/prism/node.rb#4607
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4583
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4586
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4602
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4592
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4631
  def type; end

  # source://prism//lib/prism/node.rb#4598
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4641
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4650
class Prism::ConstantOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4652
  def initialize(source, name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#4664
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4669
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4679
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4674
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4684
  sig { params(params: T.untyped).returns(Prism::ConstantOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4669
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4700
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#155
  def desugar; end

  # source://prism//lib/prism/node.rb#4727
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4705
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4708
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4723
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#4714
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4752
  def type; end

  # source://prism//lib/prism/node.rb#4720
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4762
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4771
class Prism::ConstantOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4773
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4784
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4789
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4799
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4794
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4804
  sig { params(params: T.untyped).returns(Prism::ConstantOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4789
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4819
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#149
  def desugar; end

  # source://prism//lib/prism/node.rb#4848
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4824
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#4827
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#4843
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4833
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4872
  def type; end

  # source://prism//lib/prism/node.rb#4839
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4882
    def type; end
  end
end

# source://prism//lib/prism/node.rb#4891
class Prism::ConstantPathAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#4893
  def initialize(source, target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#4903
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#4908
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#4918
  def comment_targets; end

  # source://prism//lib/prism/node.rb#4913
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#4923
  sig { params(params: T.untyped).returns(Prism::ConstantPathAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#4908
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#4937
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#4960
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#4955
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#4945
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#4942
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#4984
  def type; end

  # source://prism//lib/prism/node.rb#4951
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#4994
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5003
class Prism::ConstantPathNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5005
  def initialize(source, parent, child, delimiter_loc, location); end

  # source://prism//lib/prism/node.rb#5015
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5060
  sig { returns(Prism::Node) }
  def child; end

  # source://prism//lib/prism/node.rb#5020
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5033
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5025
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5038
  sig { params(params: T.untyped).returns(Prism::ConstantPathNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5020
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5052
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5070
  sig { returns(String) }
  def delimiter; end

  # source://prism//lib/prism/node.rb#5063
  sig { returns(Prism::Location) }
  def delimiter_loc; end

  # source://prism//lib/prism/node_ext.rb#129
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#112
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5075
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5057
  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  # source://prism//lib/prism/node.rb#5103
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5113
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#108
class Prism::ConstantPathNode::DynamicPartsInConstantPathError < ::StandardError; end

# source://prism//lib/prism/node.rb#5122
class Prism::ConstantPathOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5124
  def initialize(source, target, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#5135
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5140
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5150
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5145
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5155
  sig { params(params: T.untyped).returns(Prism::ConstantPathOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5140
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5170
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5191
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5187
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#5178
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5175
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#5216
  def type; end

  # source://prism//lib/prism/node.rb#5184
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5226
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5235
class Prism::ConstantPathOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5237
  def initialize(source, target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#5247
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5252
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5262
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5257
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5267
  sig { params(params: T.untyped).returns(Prism::ConstantPathOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5252
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5281
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5304
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5299
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5289
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5286
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#5328
  def type; end

  # source://prism//lib/prism/node.rb#5295
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5338
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5347
class Prism::ConstantPathTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5349
  def initialize(source, parent, child, delimiter_loc, location); end

  # source://prism//lib/prism/node.rb#5359
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5404
  sig { returns(Prism::Node) }
  def child; end

  # source://prism//lib/prism/node.rb#5364
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5377
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5369
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5382
  sig { params(params: T.untyped).returns(Prism::ConstantPathTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5364
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5396
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5414
  sig { returns(String) }
  def delimiter; end

  # source://prism//lib/prism/node.rb#5407
  sig { returns(Prism::Location) }
  def delimiter_loc; end

  # source://prism//lib/prism/node_ext.rb#152
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#137
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5419
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5401
  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  # source://prism//lib/prism/node.rb#5447
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5457
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5472
class Prism::ConstantPathWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5474
  def initialize(source, target, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#5484
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5489
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5499
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5494
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5504
  sig { params(params: T.untyped).returns(Prism::ConstantPathWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5489
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5518
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5541
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5536
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5526
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5523
  sig { returns(Prism::ConstantPathNode) }
  def target; end

  # source://prism//lib/prism/node.rb#5565
  def type; end

  # source://prism//lib/prism/node.rb#5532
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5575
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5584
class Prism::ConstantReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5586
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#5594
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5599
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5609
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5604
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5614
  sig { params(params: T.untyped).returns(Prism::ConstantReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5599
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5626
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node_ext.rb#96
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#91
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5639
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5635
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5659
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5669
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5678
class Prism::ConstantTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5680
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#5688
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5693
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5703
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5698
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5708
  sig { params(params: T.untyped).returns(Prism::ConstantTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5693
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5720
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node_ext.rb#165
  def full_name; end

  # source://prism//lib/prism/node_ext.rb#160
  def full_name_parts; end

  # source://prism//lib/prism/node.rb#5729
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5725
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5749
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#5759
    def type; end
  end
end

# source://prism//lib/prism/node.rb#5768
class Prism::ConstantWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5770
  def initialize(source, name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#5781
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5786
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5796
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5791
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5801
  sig { params(params: T.untyped).returns(Prism::ConstantWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5786
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5816
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#5845
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5821
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5824
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#5840
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#5833
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5869
  def type; end

  # source://prism//lib/prism/node.rb#5830
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#5879
    def type; end
  end
end

class Prism::DATAComment < Prism::Comment; end

# source://prism//lib/prism/dsl.rb#40
module Prism::DSL
  private

  # source://prism//lib/prism/dsl.rb#49
  def AliasGlobalVariableNode(new_name, old_name, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#54
  def AliasMethodNode(new_name, old_name, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#59
  def AlternationPatternNode(left, right, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#64
  def AndNode(left, right, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#69
  def ArgumentsNode(flags, arguments, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#74
  def ArrayNode(flags, elements, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#79
  def ArrayPatternNode(constant, requireds, rest, posts, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#84
  def AssocNode(key, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#89
  def AssocSplatNode(value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#94
  def BackReferenceReadNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#99
  def BeginNode(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#104
  def BlockArgumentNode(expression, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#109
  def BlockLocalVariableNode(flags, name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#114
  def BlockNode(locals, parameters, body, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#119
  def BlockParameterNode(flags, name, name_loc, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#124
  def BlockParametersNode(parameters, locals, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#129
  def BreakNode(arguments, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#134
  def CallAndWriteNode(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#139
  def CallNode(flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#144
  def CallOperatorWriteNode(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#149
  def CallOrWriteNode(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#154
  def CallTargetNode(flags, receiver, call_operator_loc, name, message_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#159
  def CapturePatternNode(value, target, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#164
  def CaseMatchNode(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#169
  def CaseNode(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#174
  def ClassNode(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#179
  def ClassVariableAndWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#184
  def ClassVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#189
  def ClassVariableOrWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#194
  def ClassVariableReadNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#199
  def ClassVariableTargetNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#204
  def ClassVariableWriteNode(name, name_loc, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#209
  def ConstantAndWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#214
  def ConstantOperatorWriteNode(name, name_loc, operator_loc, value, operator, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#219
  def ConstantOrWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#224
  def ConstantPathAndWriteNode(target, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#229
  def ConstantPathNode(parent, child, delimiter_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#234
  def ConstantPathOperatorWriteNode(target, operator_loc, value, operator, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#239
  def ConstantPathOrWriteNode(target, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#244
  def ConstantPathTargetNode(parent, child, delimiter_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#249
  def ConstantPathWriteNode(target, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#254
  def ConstantReadNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#259
  def ConstantTargetNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#264
  def ConstantWriteNode(name, name_loc, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#269
  def DefNode(name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#274
  def DefinedNode(lparen_loc, value, rparen_loc, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#279
  def ElseNode(else_keyword_loc, statements, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#284
  def EmbeddedStatementsNode(opening_loc, statements, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#289
  def EmbeddedVariableNode(operator_loc, variable, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#294
  def EnsureNode(ensure_keyword_loc, statements, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#299
  def FalseNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#304
  def FindPatternNode(constant, left, requireds, right, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#309
  def FlipFlopNode(flags, left, right, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#314
  def FloatNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#319
  def ForNode(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#324
  def ForwardingArgumentsNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#329
  def ForwardingParameterNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#334
  def ForwardingSuperNode(block, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#339
  def GlobalVariableAndWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#344
  def GlobalVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#349
  def GlobalVariableOrWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#354
  def GlobalVariableReadNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#359
  def GlobalVariableTargetNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#364
  def GlobalVariableWriteNode(name, name_loc, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#369
  def HashNode(opening_loc, elements, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#374
  def HashPatternNode(constant, elements, rest, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#379
  def IfNode(if_keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#384
  def ImaginaryNode(numeric, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#389
  def ImplicitNode(value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#394
  def ImplicitRestNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#399
  def InNode(pattern, statements, in_loc, then_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#404
  def IndexAndWriteNode(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#409
  def IndexOperatorWriteNode(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#414
  def IndexOrWriteNode(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#419
  def IndexTargetNode(flags, receiver, opening_loc, arguments, closing_loc, block, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#424
  def InstanceVariableAndWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#429
  def InstanceVariableOperatorWriteNode(name, name_loc, operator_loc, value, operator, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#434
  def InstanceVariableOrWriteNode(name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#439
  def InstanceVariableReadNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#444
  def InstanceVariableTargetNode(name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#449
  def InstanceVariableWriteNode(name, name_loc, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#454
  def IntegerNode(flags, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#459
  def InterpolatedMatchLastLineNode(flags, opening_loc, parts, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#464
  def InterpolatedRegularExpressionNode(flags, opening_loc, parts, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#469
  def InterpolatedStringNode(opening_loc, parts, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#474
  def InterpolatedSymbolNode(opening_loc, parts, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#479
  def InterpolatedXStringNode(opening_loc, parts, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#484
  def KeywordHashNode(flags, elements, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#489
  def KeywordRestParameterNode(flags, name, name_loc, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#494
  def LambdaNode(locals, operator_loc, opening_loc, closing_loc, parameters, body, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#499
  def LocalVariableAndWriteNode(name_loc, operator_loc, value, name, depth, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#504
  def LocalVariableOperatorWriteNode(name_loc, operator_loc, value, name, operator, depth, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#509
  def LocalVariableOrWriteNode(name_loc, operator_loc, value, name, depth, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#514
  def LocalVariableReadNode(name, depth, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#519
  def LocalVariableTargetNode(name, depth, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#524
  def LocalVariableWriteNode(name, depth, name_loc, value, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#44
  def Location(source = T.unsafe(nil), start_offset = T.unsafe(nil), length = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#529
  def MatchLastLineNode(flags, opening_loc, content_loc, closing_loc, unescaped, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#534
  def MatchPredicateNode(value, pattern, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#539
  def MatchRequiredNode(value, pattern, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#544
  def MatchWriteNode(call, targets, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#549
  def MissingNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#554
  def ModuleNode(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#559
  def MultiTargetNode(lefts, rest, rights, lparen_loc, rparen_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#564
  def MultiWriteNode(lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#569
  def NextNode(arguments, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#574
  def NilNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#579
  def NoKeywordsParameterNode(operator_loc, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#584
  def NumberedParametersNode(maximum, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#589
  def NumberedReferenceReadNode(number, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#594
  def OptionalKeywordParameterNode(flags, name, name_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#599
  def OptionalParameterNode(flags, name, name_loc, operator_loc, value, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#604
  def OrNode(left, right, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#609
  def ParametersNode(requireds, optionals, rest, posts, keywords, keyword_rest, block, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#614
  def ParenthesesNode(body, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#619
  def PinnedExpressionNode(expression, operator_loc, lparen_loc, rparen_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#624
  def PinnedVariableNode(variable, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#629
  def PostExecutionNode(statements, keyword_loc, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#634
  def PreExecutionNode(statements, keyword_loc, opening_loc, closing_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#639
  def ProgramNode(locals, statements, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#644
  def RangeNode(flags, left, right, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#649
  def RationalNode(numeric, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#654
  def RedoNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#659
  def RegularExpressionNode(flags, opening_loc, content_loc, closing_loc, unescaped, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#664
  def RequiredKeywordParameterNode(flags, name, name_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#669
  def RequiredParameterNode(flags, name, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#674
  def RescueModifierNode(expression, keyword_loc, rescue_expression, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#679
  def RescueNode(keyword_loc, exceptions, operator_loc, reference, statements, consequent, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#684
  def RestParameterNode(flags, name, name_loc, operator_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#689
  def RetryNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#694
  def ReturnNode(keyword_loc, arguments, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#699
  def SelfNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#704
  def SingletonClassNode(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#709
  def SourceEncodingNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#714
  def SourceFileNode(filepath, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#719
  def SourceLineNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#724
  def SplatNode(operator_loc, expression, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#729
  def StatementsNode(body, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#734
  def StringNode(flags, opening_loc, content_loc, closing_loc, unescaped, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#739
  def SuperNode(keyword_loc, lparen_loc, arguments, rparen_loc, block, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#744
  def SymbolNode(flags, opening_loc, value_loc, closing_loc, unescaped, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#749
  def TrueNode(source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#754
  def UndefNode(names, keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#759
  def UnlessNode(keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#764
  def UntilNode(flags, keyword_loc, closing_loc, predicate, statements, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#769
  def WhenNode(keyword_loc, conditions, statements, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#774
  def WhileNode(flags, keyword_loc, closing_loc, predicate, statements, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#779
  def XStringNode(flags, opening_loc, content_loc, closing_loc, unescaped, source = T.unsafe(nil), location = T.unsafe(nil)); end

  # source://prism//lib/prism/dsl.rb#784
  def YieldNode(keyword_loc, lparen_loc, arguments, rparen_loc, source = T.unsafe(nil), location = T.unsafe(nil)); end
end

# source://prism//lib/prism/debug.rb#6
module Prism::Debug
  class << self
    # source://prism//lib/prism/debug.rb#54
    def cruby_locals(source); end

    def format_errors(_arg0, _arg1); end
    def inspect_node(_arg0); end
    def memsize(_arg0); end
    def named_captures(_arg0); end

    # source://prism//lib/prism/debug.rb#202
    def newlines(source); end

    # source://prism//lib/prism/debug.rb#98
    def prism_locals(source); end

    def profile_file(_arg0); end
  end
end

# source://prism//lib/prism/debug.rb#90
Prism::Debug::AnonymousLocal = T.let(T.unsafe(nil), Object)

# source://prism//lib/prism/debug.rb#9
class Prism::Debug::ISeq
  # source://prism//lib/prism/debug.rb#12
  def initialize(parts); end

  # source://prism//lib/prism/debug.rb#28
  def each_child; end

  # source://prism//lib/prism/debug.rb#24
  def instructions; end

  # source://prism//lib/prism/debug.rb#20
  def local_table; end

  # source://prism//lib/prism/debug.rb#10
  def parts; end

  # source://prism//lib/prism/debug.rb#16
  def type; end
end

# source://prism//lib/prism/node.rb#5889
class Prism::DefNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#5891
  def initialize(source, name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#5910
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#5977
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#5915
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#5929
  def comment_targets; end

  # source://prism//lib/prism/node.rb#5920
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#5934
  sig { params(params: T.untyped).returns(Prism::DefNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#5915
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#5957
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6050
  sig { returns(String) }
  def def_keyword; end

  # source://prism//lib/prism/node.rb#5983
  sig { returns(Prism::Location) }
  def def_keyword_loc; end

  # source://prism//lib/prism/node.rb#6075
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#6037
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#6070
  sig { returns(T.nilable(String)) }
  def equal; end

  # source://prism//lib/prism/node.rb#6025
  sig { returns(T.nilable(Prism::Location)) }
  def equal_loc; end

  # source://prism//lib/prism/node.rb#6080
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#5980
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#6060
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#6001
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#5962
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#5965
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#6055
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#5989
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#5974
  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#5971
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#6065
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#6013
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#6126
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6136
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6145
class Prism::DefinedNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6147
  def initialize(source, lparen_loc, value, rparen_loc, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#6158
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6163
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6173
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6168
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6178
  sig { params(params: T.untyped).returns(Prism::DefinedNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6163
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6193
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6247
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6242
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#6225
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#6232
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#6198
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#6237
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#6213
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#6271
  def type; end

  # source://prism//lib/prism/node.rb#6210
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#6281
    def type; end
  end
end

# source://prism//lib/prism/desugar_compiler.rb#4
class Prism::DesugarAndWriteNode
  # source://prism//lib/prism/desugar_compiler.rb#7
  def initialize(node, source, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#5
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#16
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#5
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#5
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#5
  def source; end

  # source://prism//lib/prism/desugar_compiler.rb#5
  def write_class; end
end

# source://prism//lib/prism/desugar_compiler.rb#216
class Prism::DesugarCompiler < ::Prism::MutationCompiler
  # source://prism//lib/prism/desugar_compiler.rb#222
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#240
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#231
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#249
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#267
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#258
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#276
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#294
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#285
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#303
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#321
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#312
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#330
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#348
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/desugar_compiler.rb#339
  def visit_local_variable_or_write_node(node); end
end

# source://prism//lib/prism/desugar_compiler.rb#63
class Prism::DesugarOperatorWriteNode
  # source://prism//lib/prism/desugar_compiler.rb#66
  def initialize(node, source, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#64
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#75
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#64
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#64
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#64
  def source; end

  # source://prism//lib/prism/desugar_compiler.rb#64
  def write_class; end
end

# source://prism//lib/prism/desugar_compiler.rb#27
class Prism::DesugarOrWriteDefinedNode
  # source://prism//lib/prism/desugar_compiler.rb#30
  def initialize(node, source, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#28
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#39
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#28
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#28
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#28
  def source; end

  # source://prism//lib/prism/desugar_compiler.rb#28
  def write_class; end
end

# source://prism//lib/prism/desugar_compiler.rb#99
class Prism::DesugarOrWriteNode
  # source://prism//lib/prism/desugar_compiler.rb#102
  def initialize(node, source, read_class, write_class, *arguments); end

  # source://prism//lib/prism/desugar_compiler.rb#100
  def arguments; end

  # source://prism//lib/prism/desugar_compiler.rb#111
  def compile; end

  # source://prism//lib/prism/desugar_compiler.rb#100
  def node; end

  # source://prism//lib/prism/desugar_compiler.rb#100
  def read_class; end

  # source://prism//lib/prism/desugar_compiler.rb#100
  def source; end

  # source://prism//lib/prism/desugar_compiler.rb#100
  def write_class; end
end

# source://prism//lib/prism/dispatcher.rb#40
class Prism::Dispatcher < ::Prism::Visitor
  # source://prism//lib/prism/dispatcher.rb#45
  def initialize; end

  # source://prism//lib/prism/visitor.rb#16
  def dispatch(node); end

  # source://prism//lib/prism/dispatcher.rb#64
  def dispatch_once(node); end

  # source://prism//lib/prism/dispatcher.rb#42
  def listeners; end

  # source://prism//lib/prism/dispatcher.rb#52
  def register(listener, *events); end

  # source://prism//lib/prism/dispatcher.rb#70
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#78
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dispatcher.rb#86
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#94
  def visit_and_node(node); end

  # source://prism//lib/prism/dispatcher.rb#102
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#110
  def visit_array_node(node); end

  # source://prism//lib/prism/dispatcher.rb#118
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#126
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dispatcher.rb#134
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#142
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#150
  def visit_begin_node(node); end

  # source://prism//lib/prism/dispatcher.rb#158
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dispatcher.rb#166
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#174
  def visit_block_node(node); end

  # source://prism//lib/prism/dispatcher.rb#182
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#190
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#198
  def visit_break_node(node); end

  # source://prism//lib/prism/dispatcher.rb#206
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#214
  def visit_call_node(node); end

  # source://prism//lib/prism/dispatcher.rb#222
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#230
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#238
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#246
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#254
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dispatcher.rb#262
  def visit_case_node(node); end

  # source://prism//lib/prism/dispatcher.rb#270
  def visit_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#278
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#286
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#294
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#302
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#310
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#318
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#326
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#334
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#342
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#350
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#358
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dispatcher.rb#366
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#374
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#382
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#390
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#398
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#406
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#414
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#422
  def visit_def_node(node); end

  # source://prism//lib/prism/dispatcher.rb#430
  def visit_defined_node(node); end

  # source://prism//lib/prism/dispatcher.rb#438
  def visit_else_node(node); end

  # source://prism//lib/prism/dispatcher.rb#446
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#454
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#462
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dispatcher.rb#470
  def visit_false_node(node); end

  # source://prism//lib/prism/dispatcher.rb#478
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#486
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dispatcher.rb#494
  def visit_float_node(node); end

  # source://prism//lib/prism/dispatcher.rb#502
  def visit_for_node(node); end

  # source://prism//lib/prism/dispatcher.rb#510
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#518
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#526
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#534
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#542
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#550
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#558
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#566
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#574
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#582
  def visit_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#590
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#598
  def visit_if_node(node); end

  # source://prism//lib/prism/dispatcher.rb#606
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dispatcher.rb#614
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dispatcher.rb#622
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dispatcher.rb#630
  def visit_in_node(node); end

  # source://prism//lib/prism/dispatcher.rb#638
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#646
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#654
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#662
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#670
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#678
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#686
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#694
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#702
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#710
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#718
  def visit_integer_node(node); end

  # source://prism//lib/prism/dispatcher.rb#726
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#734
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#742
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#750
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#758
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#766
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#774
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#782
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dispatcher.rb#790
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#798
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#806
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#814
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#822
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#830
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#838
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#846
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dispatcher.rb#854
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dispatcher.rb#862
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#870
  def visit_missing_node(node); end

  # source://prism//lib/prism/dispatcher.rb#878
  def visit_module_node(node); end

  # source://prism//lib/prism/dispatcher.rb#886
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#894
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#902
  def visit_next_node(node); end

  # source://prism//lib/prism/dispatcher.rb#910
  def visit_nil_node(node); end

  # source://prism//lib/prism/dispatcher.rb#918
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#926
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#934
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#942
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#950
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#958
  def visit_or_node(node); end

  # source://prism//lib/prism/dispatcher.rb#966
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#974
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dispatcher.rb#982
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#990
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#998
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1006
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1014
  def visit_program_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1022
  def visit_range_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1030
  def visit_rational_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1038
  def visit_redo_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1046
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1054
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1062
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1070
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1078
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1086
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1094
  def visit_retry_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1102
  def visit_return_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1110
  def visit_self_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1118
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1126
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1134
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1142
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1150
  def visit_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1158
  def visit_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1166
  def visit_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1174
  def visit_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1182
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1190
  def visit_true_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1198
  def visit_undef_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1206
  def visit_unless_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1214
  def visit_until_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1222
  def visit_when_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1230
  def visit_while_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1238
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1246
  def visit_yield_node(node); end
end

# source://prism//lib/prism/dispatcher.rb#1252
class Prism::Dispatcher::DispatchOnce < ::Prism::Visitor
  # source://prism//lib/prism/dispatcher.rb#1255
  def initialize(listeners); end

  # source://prism//lib/prism/dispatcher.rb#1253
  def listeners; end

  # source://prism//lib/prism/dispatcher.rb#1260
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1266
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1272
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1278
  def visit_and_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1284
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1290
  def visit_array_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1296
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1302
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1308
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1314
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1320
  def visit_begin_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1326
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1332
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1338
  def visit_block_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1344
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1350
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1356
  def visit_break_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1362
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1368
  def visit_call_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1374
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1380
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1386
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1392
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1398
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1404
  def visit_case_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1410
  def visit_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1416
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1422
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1428
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1434
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1440
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1446
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1452
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1458
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1464
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1470
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1476
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1482
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1488
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1494
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1500
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1506
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1512
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1518
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1524
  def visit_def_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1530
  def visit_defined_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1536
  def visit_else_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1542
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1548
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1554
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1560
  def visit_false_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1566
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1572
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1578
  def visit_float_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1584
  def visit_for_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1590
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1596
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1602
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1608
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1614
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1620
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1626
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1632
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1638
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1644
  def visit_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1650
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1656
  def visit_if_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1662
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1668
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1674
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1680
  def visit_in_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1686
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1692
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1698
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1704
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1710
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1716
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1722
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1728
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1734
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1740
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1746
  def visit_integer_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1752
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1758
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1764
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1770
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1776
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1782
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1788
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1794
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1800
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1806
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1812
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1818
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1824
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1830
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1836
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1842
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1848
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1854
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1860
  def visit_missing_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1866
  def visit_module_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1872
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1878
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1884
  def visit_next_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1890
  def visit_nil_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1896
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1902
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1908
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1914
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1920
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1926
  def visit_or_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1932
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1938
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1944
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1950
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1956
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1962
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1968
  def visit_program_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1974
  def visit_range_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1980
  def visit_rational_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1986
  def visit_redo_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1992
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dispatcher.rb#1998
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2004
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2010
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2016
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2022
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2028
  def visit_retry_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2034
  def visit_return_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2040
  def visit_self_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2046
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2052
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2058
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2064
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2070
  def visit_splat_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2076
  def visit_statements_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2082
  def visit_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2088
  def visit_super_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2094
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2100
  def visit_true_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2106
  def visit_undef_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2112
  def visit_unless_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2118
  def visit_until_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2124
  def visit_when_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2130
  def visit_while_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2136
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dispatcher.rb#2142
  def visit_yield_node(node); end
end

# source://prism//lib/prism/dot_visitor.rb#13
class Prism::DotVisitor < ::Prism::Visitor
  # source://prism//lib/prism/dot_visitor.rb#105
  def initialize; end

  # source://prism//lib/prism/dot_visitor.rb#102
  def digraph; end

  # source://prism//lib/prism/dot_visitor.rb#110
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#115
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#140
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#165
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#190
  def visit_and_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#215
  def visit_arguments_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#245
  def visit_array_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#285
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#347
  def visit_assoc_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#374
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#397
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#414
  def visit_begin_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#462
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#485
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#505
  def visit_block_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#540
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#568
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#611
  def visit_break_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#634
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#680
  def visit_call_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#738
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#787
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#833
  def visit_call_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#863
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#888
  def visit_case_match_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#933
  def visit_case_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#978
  def visit_class_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1025
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1052
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1082
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1109
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1126
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1143
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1172
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1199
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1229
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1256
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1281
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1308
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1336
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1361
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1388
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1413
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1430
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1447
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1474
  def visit_def_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1543
  def visit_defined_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1574
  def visit_else_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1602
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1628
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1649
  def visit_ensure_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1675
  def visit_false_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1689
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1740
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1772
  def visit_float_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1786
  def visit_for_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1828
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1842
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1856
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1876
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1903
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1933
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1960
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1977
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#1994
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2021
  def visit_hash_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2054
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2103
  def visit_if_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2148
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2166
  def visit_implicit_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2184
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2198
  def visit_in_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2230
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2283
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2339
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2392
  def visit_index_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2431
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2458
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2488
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2515
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2532
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2549
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2576
  def visit_integer_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2593
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2629
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2665
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2702
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2739
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2772
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2802
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2830
  def visit_lambda_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2868
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2898
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2931
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2961
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#2981
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3001
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3031
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3060
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3085
  def visit_match_required_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3110
  def visit_match_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3141
  def visit_missing_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3155
  def visit_module_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3191
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3247
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3310
  def visit_next_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3333
  def visit_nil_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3347
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3367
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3384
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3401
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3428
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3458
  def visit_or_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3483
  def visit_parameters_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3567
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3593
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3620
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3641
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3670
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3699
  def visit_program_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3720
  def visit_range_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3752
  def visit_rational_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3770
  def visit_redo_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3784
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3813
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3836
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3856
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3881
  def visit_rescue_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3934
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3962
  def visit_retry_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3976
  def visit_return_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#3999
  def visit_self_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4013
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4049
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4063
  def visit_source_file_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4080
  def visit_source_line_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4094
  def visit_splat_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4117
  def visit_statements_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4144
  def visit_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4177
  def visit_super_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4216
  def visit_symbol_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4251
  def visit_true_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4265
  def visit_undef_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4295
  def visit_unless_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4338
  def visit_until_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4373
  def visit_when_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4409
  def visit_while_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4444
  def visit_x_string_node(node); end

  # source://prism//lib/prism/dot_visitor.rb#4473
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/dot_visitor.rb#4519
  def arguments_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4527
  def array_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4535
  def call_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4546
  def encoding_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4555
  def integer_base_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4566
  def keyword_hash_node_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4513
  def location_inspect(location); end

  # source://prism//lib/prism/dot_visitor.rb#4574
  def loop_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4508
  def node_id(node); end

  # source://prism//lib/prism/dot_visitor.rb#4582
  def parameter_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4590
  def range_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4598
  def regular_expression_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4616
  def string_flags_inspect(node); end

  # source://prism//lib/prism/dot_visitor.rb#4626
  def symbol_flags_inspect(node); end
end

# source://prism//lib/prism/dot_visitor.rb#58
class Prism::DotVisitor::Digraph
  # source://prism//lib/prism/dot_visitor.rb#61
  def initialize; end

  # source://prism//lib/prism/dot_visitor.rb#75
  def edge(value); end

  # source://prism//lib/prism/dot_visitor.rb#59
  def edges; end

  # source://prism//lib/prism/dot_visitor.rb#67
  def node(value); end

  # source://prism//lib/prism/dot_visitor.rb#59
  def nodes; end

  # source://prism//lib/prism/dot_visitor.rb#79
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#71
  def waypoint(value); end

  # source://prism//lib/prism/dot_visitor.rb#59
  def waypoints; end
end

# source://prism//lib/prism/dot_visitor.rb#14
class Prism::DotVisitor::Field
  # source://prism//lib/prism/dot_visitor.rb#17
  def initialize(name, value, port); end

  # source://prism//lib/prism/dot_visitor.rb#15
  def name; end

  # source://prism//lib/prism/dot_visitor.rb#15
  def port; end

  # source://prism//lib/prism/dot_visitor.rb#23
  def to_dot; end

  # source://prism//lib/prism/dot_visitor.rb#15
  def value; end
end

# source://prism//lib/prism/dot_visitor.rb#32
class Prism::DotVisitor::Table
  # source://prism//lib/prism/dot_visitor.rb#35
  def initialize(name); end

  # source://prism//lib/prism/dot_visitor.rb#40
  def field(name, value = T.unsafe(nil), port: T.unsafe(nil)); end

  # source://prism//lib/prism/dot_visitor.rb#33
  def fields; end

  # source://prism//lib/prism/dot_visitor.rb#33
  def name; end

  # source://prism//lib/prism/dot_visitor.rb#44
  def to_dot; end
end

# source://prism//lib/prism/node.rb#6290
class Prism::ElseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6292
  def initialize(source, else_keyword_loc, statements, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#6302
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6307
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6319
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6312
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6324
  sig { params(params: T.untyped).returns(Prism::ElseNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6307
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6338
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6365
  sig { returns(String) }
  def else_keyword; end

  # source://prism//lib/prism/node.rb#6343
  sig { returns(Prism::Location) }
  def else_keyword_loc; end

  # source://prism//lib/prism/node.rb#6370
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#6352
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#6375
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6349
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6402
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6412
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#290
class Prism::EmbDocComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#297
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#292
  def trailing?; end
end

# source://prism//lib/prism/node.rb#6421
class Prism::EmbeddedStatementsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6423
  def initialize(source, opening_loc, statements, closing_loc, location); end

  # source://prism//lib/prism/node.rb#6433
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6438
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6495
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#6483
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#6450
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6443
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6455
  sig { params(params: T.untyped).returns(Prism::EmbeddedStatementsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6438
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6469
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6500
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6490
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#6474
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#6480
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6527
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6537
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6546
class Prism::EmbeddedVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6548
  def initialize(source, operator_loc, variable, location); end

  # source://prism//lib/prism/node.rb#6557
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6562
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6572
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6567
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6577
  sig { params(params: T.untyped).returns(Prism::EmbeddedVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6562
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6590
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6610
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6605
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#6595
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#6632
  def type; end

  # source://prism//lib/prism/node.rb#6601
  sig { returns(Prism::Node) }
  def variable; end

  class << self
    # source://prism//lib/prism/node.rb#6642
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19268
# Flags for nodes that have unescaped content.
module Prism::EncodingFlags; end

# source://prism//lib/prism/node.rb#19273
Prism::EncodingFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19270
Prism::EncodingFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#6655
class Prism::EnsureNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6657
  def initialize(source, ensure_keyword_loc, statements, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#6667
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6672
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6684
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6677
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6689
  sig { params(params: T.untyped).returns(Prism::EnsureNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6672
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6703
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6729
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#6717
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#6724
  sig { returns(String) }
  def ensure_keyword; end

  # source://prism//lib/prism/node.rb#6708
  sig { returns(Prism::Location) }
  def ensure_keyword_loc; end

  # source://prism//lib/prism/node.rb#6734
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6714
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#6761
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6771
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6780
class Prism::FalseNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6782
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#6789
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6794
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6804
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6799
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6809
  sig { params(params: T.untyped).returns(Prism::FalseNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6794
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6820
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6826
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6845
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#6855
    def type; end
  end
end

# source://prism//lib/prism/node.rb#6870
class Prism::FindPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#6872
  def initialize(source, constant, left, requireds, right, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#6885
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#6890
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#6974
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#6956
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#6905
  def comment_targets; end

  # source://prism//lib/prism/node.rb#6895
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#6932
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#6910
  sig { params(params: T.untyped).returns(Prism::FindPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#6890
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#6927
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#6979
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#6935
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#6969
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#6944
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#6938
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#6941
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#7011
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7021
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7030
class Prism::FlipFlopNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7032
  def initialize(source, flags, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#7043
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7048
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7061
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7053
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7066
  sig { params(params: T.untyped).returns(Prism::FlipFlopNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7048
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7081
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7103
  sig { returns(T::Boolean) }
  def exclude_end?; end

  # source://prism//lib/prism/node.rb#7113
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7090
  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  # source://prism//lib/prism/node.rb#7108
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7096
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7093
  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  # source://prism//lib/prism/node.rb#7147
  def type; end

  private

  # source://prism//lib/prism/node.rb#7086
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#7157
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7166
class Prism::FloatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7168
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#7175
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7180
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7190
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7185
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7195
  sig { params(params: T.untyped).returns(Prism::FloatNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7180
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7206
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7212
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7231
  def type; end

  # source://prism//lib/prism/node_ext.rb#62
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7241
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7250
class Prism::ForNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7252
  def initialize(source, index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#7266
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7271
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7316
  sig { returns(Prism::Node) }
  def collection; end

  # source://prism//lib/prism/node.rb#7285
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7276
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7290
  sig { params(params: T.untyped).returns(Prism::ForNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7271
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7308
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7363
  sig { returns(T.nilable(String)) }
  def do_keyword; end

  # source://prism//lib/prism/node.rb#7334
  sig { returns(T.nilable(Prism::Location)) }
  def do_keyword_loc; end

  # source://prism//lib/prism/node.rb#7368
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#7346
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#7353
  sig { returns(String) }
  def for_keyword; end

  # source://prism//lib/prism/node.rb#7322
  sig { returns(Prism::Location) }
  def for_keyword_loc; end

  # source://prism//lib/prism/node.rb#7358
  sig { returns(String) }
  def in_keyword; end

  # source://prism//lib/prism/node.rb#7328
  sig { returns(Prism::Location) }
  def in_keyword_loc; end

  # source://prism//lib/prism/node.rb#7313
  sig { returns(Prism::Node) }
  def index; end

  # source://prism//lib/prism/node.rb#7373
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7319
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#7406
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7416
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7427
class Prism::ForwardingArgumentsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7429
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#7436
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7441
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7451
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7446
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7456
  sig { params(params: T.untyped).returns(Prism::ForwardingArgumentsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7441
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7467
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7473
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7492
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7502
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7512
class Prism::ForwardingParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7514
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#7521
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7526
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7536
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7531
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7541
  sig { params(params: T.untyped).returns(Prism::ForwardingParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7526
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7552
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7558
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7577
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7587
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7596
class Prism::ForwardingSuperNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7598
  def initialize(source, block, location); end

  # source://prism//lib/prism/node.rb#7606
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7645
  sig { returns(T.nilable(Prism::BlockNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#7611
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7623
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7616
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7628
  sig { params(params: T.untyped).returns(Prism::ForwardingSuperNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7611
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7640
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#7649
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7674
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#7684
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7693
class Prism::GlobalVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7695
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#7706
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7711
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7721
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7716
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7726
  sig { params(params: T.untyped).returns(Prism::GlobalVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7711
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7741
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#161
  def desugar; end

  # source://prism//lib/prism/node.rb#7770
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7746
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7749
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#7765
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7755
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7794
  def type; end

  # source://prism//lib/prism/node.rb#7761
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7804
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7813
class Prism::GlobalVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7815
  def initialize(source, name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#7827
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7832
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7842
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7837
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7847
  sig { params(params: T.untyped).returns(Prism::GlobalVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7832
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7863
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#173
  def desugar; end

  # source://prism//lib/prism/node.rb#7890
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7868
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7871
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#7886
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#7877
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#7915
  def type; end

  # source://prism//lib/prism/node.rb#7883
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#7925
    def type; end
  end
end

# source://prism//lib/prism/node.rb#7934
class Prism::GlobalVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#7936
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#7947
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#7952
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#7962
  def comment_targets; end

  # source://prism//lib/prism/node.rb#7957
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#7967
  sig { params(params: T.untyped).returns(Prism::GlobalVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#7952
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#7982
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#167
  def desugar; end

  # source://prism//lib/prism/node.rb#8011
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#7987
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#7990
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#8006
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#7996
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8035
  def type; end

  # source://prism//lib/prism/node.rb#8002
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8045
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8054
class Prism::GlobalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8056
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#8064
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8069
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8079
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8074
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8084
  sig { params(params: T.untyped).returns(Prism::GlobalVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8069
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8096
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8109
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8105
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8129
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8139
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8148
class Prism::GlobalVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8150
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#8158
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8163
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8173
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8168
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8178
  sig { params(params: T.untyped).returns(Prism::GlobalVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8163
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8190
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8199
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8195
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8219
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8229
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8238
class Prism::GlobalVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8240
  def initialize(source, name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#8251
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8256
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8266
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8261
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8271
  sig { params(params: T.untyped).returns(Prism::GlobalVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8256
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8286
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8315
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8291
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#8294
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#8310
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#8303
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#8339
  def type; end

  # source://prism//lib/prism/node.rb#8300
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8349
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8358
class Prism::HashNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8360
  def initialize(source, opening_loc, elements, closing_loc, location); end

  # source://prism//lib/prism/node.rb#8370
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8375
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8442
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#8430
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8385
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8380
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8390
  sig { params(params: T.untyped).returns(Prism::HashNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8375
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8404
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8424
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#8447
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8437
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#8412
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8469
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8479
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8491
class Prism::HashPatternNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8493
  def initialize(source, constant, elements, rest, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#8505
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8510
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8589
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#8571
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#8524
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8515
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8550
  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  # source://prism//lib/prism/node.rb#8529
  sig { params(params: T.untyped).returns(Prism::HashPatternNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8510
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8545
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8553
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#8594
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8584
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#8559
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#8556
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#8628
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8638
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#35
module Prism::HeredocQuery
  # source://prism//lib/prism/node_ext.rb#37
  def heredoc?; end
end

# source://prism//lib/prism/node.rb#8650
class Prism::IfNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8652
  def initialize(source, if_keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#8665
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8674
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8688
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8679
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8745
  sig { returns(T.nilable(Prism::Node)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#8693
  sig { params(params: T.untyped).returns(Prism::IfNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8674
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8710
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8771
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#8748
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#8761
  sig { returns(T.nilable(String)) }
  def if_keyword; end

  # source://prism//lib/prism/node.rb#8715
  sig { returns(T.nilable(Prism::Location)) }
  def if_keyword_loc; end

  # source://prism//lib/prism/node.rb#8776
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8727
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#8669
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#8742
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#8766
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#8730
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#8812
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#8822
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8831
class Prism::ImaginaryNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8833
  def initialize(source, numeric, location); end

  # source://prism//lib/prism/node.rb#8841
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8846
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8856
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8851
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8861
  sig { params(params: T.untyped).returns(Prism::ImaginaryNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8846
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8873
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8882
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#8878
  sig { returns(Prism::Node) }
  def numeric; end

  # source://prism//lib/prism/node.rb#8903
  def type; end

  # source://prism//lib/prism/node_ext.rb#69
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#8913
    def type; end
  end
end

# source://prism//lib/prism/node.rb#8928
class Prism::ImplicitNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#8930
  def initialize(source, value, location); end

  # source://prism//lib/prism/node.rb#8938
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#8943
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#8953
  def comment_targets; end

  # source://prism//lib/prism/node.rb#8948
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#8958
  sig { params(params: T.untyped).returns(Prism::ImplicitNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#8943
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#8970
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#8979
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9000
  def type; end

  # source://prism//lib/prism/node.rb#8975
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#9010
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9028
class Prism::ImplicitRestNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9030
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#9037
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9042
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9052
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9047
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9057
  sig { params(params: T.untyped).returns(Prism::ImplicitRestNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9042
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9068
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9074
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9093
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9103
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9112
class Prism::InNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9114
  def initialize(source, pattern, statements, in_loc, then_loc, location); end

  # source://prism//lib/prism/node.rb#9125
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9130
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9143
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9135
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9148
  sig { params(params: T.untyped).returns(Prism::InNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9130
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9163
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9193
  sig { returns(String) }
  def in; end

  # source://prism//lib/prism/node.rb#9174
  sig { returns(Prism::Location) }
  def in_loc; end

  # source://prism//lib/prism/node.rb#9203
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9168
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#9171
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#9198
  sig { returns(T.nilable(String)) }
  def then; end

  # source://prism//lib/prism/node.rb#9180
  sig { returns(T.nilable(Prism::Location)) }
  def then_loc; end

  # source://prism//lib/prism/node.rb#9232
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#9242
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9251
class Prism::IndexAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9253
  def initialize(source, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#9269
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9344
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9376
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9353
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#9386
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#9326
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#9274
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9396
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9347
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9289
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9279
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9294
  sig { params(params: T.untyped).returns(Prism::IndexAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9274
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9314
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9381
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9406
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9391
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9338
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9401
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9356
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9323
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9366
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9451
  def type; end

  # source://prism//lib/prism/node.rb#9362
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#9371
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#9319
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9461
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9470
class Prism::IndexOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9472
  def initialize(source, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#9489
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9565
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9600
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9574
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#9610
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#9547
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#9494
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9620
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9568
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9509
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9499
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9514
  sig { params(params: T.untyped).returns(Prism::IndexOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9494
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9535
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9605
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9625
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9615
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9559
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9577
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#9580
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9544
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9590
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9671
  def type; end

  # source://prism//lib/prism/node.rb#9586
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#9595
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#9540
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9681
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9690
class Prism::IndexOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9692
  def initialize(source, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#9708
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9783
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#9815
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#9792
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#9825
  sig { returns(T.nilable(String)) }
  def call_operator; end

  # source://prism//lib/prism/node.rb#9765
  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  # source://prism//lib/prism/node.rb#9713
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#9835
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9786
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9728
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9718
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9733
  sig { params(params: T.untyped).returns(Prism::IndexOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9713
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9753
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#9820
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#9845
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#9830
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9777
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9840
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#9795
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#9762
  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  # source://prism//lib/prism/node.rb#9805
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#9890
  def type; end

  # source://prism//lib/prism/node.rb#9801
  sig { returns(Prism::Node) }
  def value; end

  # source://prism//lib/prism/node.rb#9810
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#9758
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#9900
    def type; end
  end
end

# source://prism//lib/prism/node.rb#9917
class Prism::IndexTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#9919
  def initialize(source, flags, receiver, opening_loc, arguments, closing_loc, block, location); end

  # source://prism//lib/prism/node.rb#9932
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#9991
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#10014
  sig { returns(T::Boolean) }
  def attribute_write?; end

  # source://prism//lib/prism/node.rb#10000
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#9937
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10029
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#9994
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#9951
  def comment_targets; end

  # source://prism//lib/prism/node.rb#9942
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#9956
  sig { params(params: T.untyped).returns(Prism::IndexTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#9937
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#9973
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10019
  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  # source://prism//lib/prism/node.rb#10034
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10024
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#9985
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#9982
  sig { returns(Prism::Node) }
  def receiver; end

  # source://prism//lib/prism/node.rb#10004
  sig { returns(T::Boolean) }
  def safe_navigation?; end

  # source://prism//lib/prism/node.rb#10071
  def type; end

  # source://prism//lib/prism/node.rb#10009
  sig { returns(T::Boolean) }
  def variable_call?; end

  private

  # source://prism//lib/prism/node.rb#9978
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#10081
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#275
class Prism::InlineComment < ::Prism::Comment
  # source://prism//lib/prism/parse_result.rb#283
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#278
  sig { override.returns(T::Boolean) }
  def trailing?; end
end

# source://prism//lib/prism/node.rb#10090
class Prism::InstanceVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10092
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#10103
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10108
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10118
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10113
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10123
  sig { params(params: T.untyped).returns(Prism::InstanceVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10108
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10138
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#179
  def desugar; end

  # source://prism//lib/prism/node.rb#10167
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10143
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10146
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10162
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10152
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10191
  def type; end

  # source://prism//lib/prism/node.rb#10158
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10201
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10210
class Prism::InstanceVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10212
  def initialize(source, name, name_loc, operator_loc, value, operator, location); end

  # source://prism//lib/prism/node.rb#10224
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10229
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10239
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10234
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10244
  sig { params(params: T.untyped).returns(Prism::InstanceVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10229
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10260
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#191
  def desugar; end

  # source://prism//lib/prism/node.rb#10287
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10265
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10268
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10283
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#10274
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10312
  def type; end

  # source://prism//lib/prism/node.rb#10280
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10322
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10331
class Prism::InstanceVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10333
  def initialize(source, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#10344
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10349
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10359
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10354
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10364
  sig { params(params: T.untyped).returns(Prism::InstanceVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10349
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10379
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/desugar_compiler.rb#185
  def desugar; end

  # source://prism//lib/prism/node.rb#10408
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10384
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10387
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10403
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10393
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10432
  def type; end

  # source://prism//lib/prism/node.rb#10399
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10442
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10451
class Prism::InstanceVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10453
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#10461
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10466
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10476
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10471
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10481
  sig { params(params: T.untyped).returns(Prism::InstanceVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10466
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10493
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10506
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10502
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10526
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10536
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10545
class Prism::InstanceVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10547
  def initialize(source, name, location); end

  # source://prism//lib/prism/node.rb#10555
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10560
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10570
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10565
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10575
  sig { params(params: T.untyped).returns(Prism::InstanceVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10560
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10587
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10596
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10592
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10616
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#10626
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10635
class Prism::InstanceVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10637
  def initialize(source, name, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#10648
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10653
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10663
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10658
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10668
  sig { params(params: T.untyped).returns(Prism::InstanceVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10653
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10683
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10712
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10688
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#10691
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#10707
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#10700
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#10736
  def type; end

  # source://prism//lib/prism/node.rb#10697
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#10746
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19277
# Flags for integer nodes that correspond to the base of the integer.
module Prism::IntegerBaseFlags; end

# source://prism//lib/prism/node.rb#19279
Prism::IntegerBaseFlags::BINARY = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19282
Prism::IntegerBaseFlags::DECIMAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19288
Prism::IntegerBaseFlags::HEXADECIMAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19285
Prism::IntegerBaseFlags::OCTAL = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#10755
class Prism::IntegerNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#10757
  def initialize(source, flags, location); end

  # source://prism//lib/prism/node.rb#10765
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10807
  sig { returns(T::Boolean) }
  def binary?; end

  # source://prism//lib/prism/node.rb#10770
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#10780
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10775
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10785
  sig { params(params: T.untyped).returns(Prism::IntegerNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10812
  sig { returns(T::Boolean) }
  def decimal?; end

  # source://prism//lib/prism/node.rb#10770
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10797
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10822
  sig { returns(T::Boolean) }
  def hexadecimal?; end

  # source://prism//lib/prism/node.rb#10827
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10817
  sig { returns(T::Boolean) }
  def octal?; end

  # source://prism//lib/prism/node.rb#10848
  def type; end

  # source://prism//lib/prism/node_ext.rb#76
  def value; end

  private

  # source://prism//lib/prism/node.rb#10802
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#10858
    def type; end
  end
end

# source://prism//lib/prism/node.rb#10867
class Prism::InterpolatedMatchLastLineNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#10869
  def initialize(source, flags, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#10880
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#10970
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#10890
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11005
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#10938
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#10900
  def comment_targets; end

  # source://prism//lib/prism/node.rb#10895
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#10905
  sig { params(params: T.untyped).returns(Prism::InterpolatedMatchLastLineNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#10890
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#10920
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#10965
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#10950
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#10990
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#10995
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#10985
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#10945
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#11010
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#10955
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#10960
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#11000
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#10929
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#10935
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#10884
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#11034
  def type; end

  # source://prism//lib/prism/node.rb#10980
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#10975
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#10925
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#11044
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11053
class Prism::InterpolatedRegularExpressionNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#11055
  def initialize(source, flags, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#11066
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11156
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#11076
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11191
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#11124
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11086
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11081
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11091
  sig { params(params: T.untyped).returns(Prism::InterpolatedRegularExpressionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11076
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11106
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11151
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#11136
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#11176
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#11181
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#11171
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#11131
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#11196
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11141
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#11146
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#11186
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#11115
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11121
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#11070
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#11220
  def type; end

  # source://prism//lib/prism/node.rb#11166
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#11161
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#11111
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#11230
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11239
class Prism::InterpolatedStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#11241
  def initialize(source, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#11251
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11261
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11328
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#11310
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11271
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11266
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11276
  sig { params(params: T.untyped).returns(Prism::InterpolatedStringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11261
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11290
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11333
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11323
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#11295
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11307
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#11255
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#11355
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11365
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11374
class Prism::InterpolatedSymbolNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11376
  def initialize(source, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#11386
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11396
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11463
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#11445
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11406
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11401
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11411
  sig { params(params: T.untyped).returns(Prism::InterpolatedSymbolNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11396
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11425
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11468
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11458
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#11430
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11442
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#11390
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#11490
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11500
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11509
class Prism::InterpolatedXStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#11511
  def initialize(source, opening_loc, parts, closing_loc, location); end

  # source://prism//lib/prism/node.rb#11521
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11531
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11586
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#11574
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11541
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11536
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11546
  sig { params(params: T.untyped).returns(Prism::InterpolatedXStringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11531
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11560
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11591
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11581
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#11565
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11571
  sig { returns(T::Array[Prism::Node]) }
  def parts; end

  # source://prism//lib/prism/node.rb#11525
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#11613
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#11623
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11632
class Prism::KeywordHashNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11634
  def initialize(source, flags, elements, location); end

  # source://prism//lib/prism/node.rb#11643
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11648
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11658
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11653
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11663
  sig { params(params: T.untyped).returns(Prism::KeywordHashNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11648
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11676
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11685
  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  # source://prism//lib/prism/node.rb#11694
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11689
  sig { returns(T::Boolean) }
  def symbol_keys?; end

  # source://prism//lib/prism/node.rb#11716
  def type; end

  private

  # source://prism//lib/prism/node.rb#11681
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#11726
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19292
# Flags for keyword hash nodes.
module Prism::KeywordHashNodeFlags; end

# source://prism//lib/prism/node.rb#19294
Prism::KeywordHashNodeFlags::SYMBOL_KEYS = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#11736
class Prism::KeywordRestParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11738
  def initialize(source, flags, name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#11749
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11754
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11764
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11759
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11769
  sig { params(params: T.untyped).returns(Prism::KeywordRestParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11754
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11784
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11825
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11793
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#11796
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#11820
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11808
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11815
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#11853
  def type; end

  private

  # source://prism//lib/prism/node.rb#11789
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#11863
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11872
class Prism::LambdaNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#11874
  def initialize(source, locals, operator_loc, opening_loc, closing_loc, parameters, body, location); end

  # source://prism//lib/prism/node.rb#11887
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#11956
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#11892
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#11970
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#11947
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#11905
  def comment_targets; end

  # source://prism//lib/prism/node.rb#11897
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#11910
  sig { params(params: T.untyped).returns(Prism::LambdaNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#11892
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#11927
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#11975
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#11932
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#11965
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#11941
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#11960
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#11935
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#11953
  sig { returns(T.nilable(Prism::Node)) }
  def parameters; end

  # source://prism//lib/prism/node.rb#12010
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12020
    def type; end
  end
end

# source://prism//lib/prism/lex_compat.rb#12
class Prism::LexCompat
  # source://prism//lib/prism/lex_compat.rb#600
  def initialize(source, **options); end

  # source://prism//lib/prism/lex_compat.rb#598
  def options; end

  # source://prism//lib/prism/lex_compat.rb#605
  def result; end

  # source://prism//lib/prism/lex_compat.rb#598
  def source; end
end

# source://prism//lib/prism/lex_compat.rb#211
class Prism::LexCompat::EndContentToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#212
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#272
module Prism::LexCompat::Heredoc
  class << self
    # source://prism//lib/prism/lex_compat.rb#584
    def build(opening); end
  end
end

# source://prism//lib/prism/lex_compat.rb#296
class Prism::LexCompat::Heredoc::DashHeredoc
  # source://prism//lib/prism/lex_compat.rb#299
  def initialize(split); end

  # source://prism//lib/prism/lex_compat.rb#304
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#297
  def split; end

  # source://prism//lib/prism/lex_compat.rb#308
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#297
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#355
class Prism::LexCompat::Heredoc::DedentingHeredoc
  # source://prism//lib/prism/lex_compat.rb#360
  def initialize; end

  # source://prism//lib/prism/lex_compat.rb#371
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#358
  def dedent; end

  # source://prism//lib/prism/lex_compat.rb#358
  def dedent_next; end

  # source://prism//lib/prism/lex_compat.rb#358
  def embexpr_balance; end

  # source://prism//lib/prism/lex_compat.rb#408
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#358
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#356
Prism::LexCompat::Heredoc::DedentingHeredoc::TAB_WIDTH = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/lex_compat.rb#277
class Prism::LexCompat::Heredoc::PlainHeredoc
  # source://prism//lib/prism/lex_compat.rb#280
  def initialize; end

  # source://prism//lib/prism/lex_compat.rb#284
  def <<(token); end

  # source://prism//lib/prism/lex_compat.rb#288
  def to_a; end

  # source://prism//lib/prism/lex_compat.rb#278
  def tokens; end
end

# source://prism//lib/prism/lex_compat.rb#229
class Prism::LexCompat::IdentToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#230
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#219
class Prism::LexCompat::IgnoreStateToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#220
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#240
class Prism::LexCompat::IgnoredNewlineToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#241
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#260
class Prism::LexCompat::ParamToken < ::Prism::LexCompat::Token
  # source://prism//lib/prism/lex_compat.rb#261
  def ==(other); end
end

# source://prism//lib/prism/lex_compat.rb#16
Prism::LexCompat::RIPPER = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/lex_compat.rb#187
class Prism::LexCompat::Token < ::SimpleDelegator
  # source://prism//lib/prism/lex_compat.rb#194
  def event; end

  # source://prism//lib/prism/lex_compat.rb#189
  def location; end

  # source://prism//lib/prism/lex_compat.rb#204
  def state; end

  # source://prism//lib/prism/lex_compat.rb#199
  def value; end
end

# source://prism//lib/prism/lex_compat.rb#853
class Prism::LexRipper
  # source://prism//lib/prism/lex_compat.rb#856
  def initialize(source); end

  # source://prism//lib/prism/lex_compat.rb#860
  def result; end

  # source://prism//lib/prism/lex_compat.rb#854
  def source; end

  private

  # source://prism//lib/prism/lex_compat.rb#894
  def lex(source); end
end

# source://prism//lib/prism/node.rb#12029
class Prism::LocalVariableAndWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12031
  def initialize(source, name_loc, operator_loc, value, name, depth, location); end

  # source://prism//lib/prism/node.rb#12043
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12048
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12058
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12053
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12063
  sig { params(params: T.untyped).returns(Prism::LocalVariableAndWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12048
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12079
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12102
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/desugar_compiler.rb#197
  def desugar; end

  # source://prism//lib/prism/node.rb#12111
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12099
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12084
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12106
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12090
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12136
  def type; end

  # source://prism//lib/prism/node.rb#12096
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12146
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12155
class Prism::LocalVariableOperatorWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12157
  def initialize(source, name_loc, operator_loc, value, name, operator, depth, location); end

  # source://prism//lib/prism/node.rb#12170
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12175
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12185
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12180
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12190
  sig { params(params: T.untyped).returns(Prism::LocalVariableOperatorWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12175
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12207
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12233
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/desugar_compiler.rb#209
  def desugar; end

  # source://prism//lib/prism/node.rb#12237
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12227
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12212
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12230
  sig { returns(Symbol) }
  def operator; end

  # source://prism//lib/prism/node.rb#12218
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12263
  def type; end

  # source://prism//lib/prism/node.rb#12224
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12273
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12282
class Prism::LocalVariableOrWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12284
  def initialize(source, name_loc, operator_loc, value, name, depth, location); end

  # source://prism//lib/prism/node.rb#12296
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12301
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12311
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12306
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12316
  sig { params(params: T.untyped).returns(Prism::LocalVariableOrWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12301
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12332
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12355
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/desugar_compiler.rb#203
  def desugar; end

  # source://prism//lib/prism/node.rb#12364
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12352
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12337
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12359
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12343
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12389
  def type; end

  # source://prism//lib/prism/node.rb#12349
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12399
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12408
class Prism::LocalVariableReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12410
  def initialize(source, name, depth, location); end

  # source://prism//lib/prism/node.rb#12419
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12424
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12434
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12429
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12439
  sig { params(params: T.untyped).returns(Prism::LocalVariableReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12424
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12452
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12478
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#12482
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12469
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12503
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12513
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12522
class Prism::LocalVariableTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12524
  def initialize(source, name, depth, location); end

  # source://prism//lib/prism/node.rb#12533
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12538
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12548
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12543
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12553
  sig { params(params: T.untyped).returns(Prism::LocalVariableTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12538
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12566
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12574
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#12578
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12571
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12599
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#12609
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12618
class Prism::LocalVariableWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12620
  def initialize(source, name, depth, name_loc, value, operator_loc, location); end

  # source://prism//lib/prism/node.rb#12632
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12637
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12647
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12642
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12652
  sig { params(params: T.untyped).returns(Prism::LocalVariableWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12637
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12668
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12676
  sig { returns(Integer) }
  def depth; end

  # source://prism//lib/prism/node.rb#12700
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12673
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#12679
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#12695
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12688
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12725
  def type; end

  # source://prism//lib/prism/node.rb#12685
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#12735
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#98
class Prism::Location
  # source://prism//lib/prism/parse_result.rb#116
  sig { params(source: Prism::Source, start_offset: Integer, length: Integer).void }
  def initialize(source, start_offset, length); end

  # source://prism//lib/prism/parse_result.rb#232
  def ==(other); end

  # source://prism//lib/prism/parse_result.rb#112
  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  # source://prism//lib/prism/parse_result.rb#124
  sig { params(options: T.untyped).returns(Prism::Location) }
  def copy(**options); end

  # source://prism//lib/prism/parse_result.rb#222
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#211
  def end_character_column; end

  # source://prism//lib/prism/parse_result.rb#160
  def end_character_offset; end

  # source://prism//lib/prism/parse_result.rb#217
  def end_code_units_column(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#165
  def end_code_units_offset(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#205
  sig { returns(Integer) }
  def end_column; end

  # source://prism//lib/prism/parse_result.rb#181
  sig { returns(Integer) }
  def end_line; end

  # source://prism//lib/prism/parse_result.rb#154
  sig { returns(Integer) }
  def end_offset; end

  # source://prism//lib/prism/parse_result.rb#133
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#241
  def join(other); end

  # source://prism//lib/prism/parse_result.rb#109
  def length; end

  # source://prism//lib/prism/parse_result.rb#227
  def pretty_print(q); end

  # source://prism//lib/prism/parse_result.rb#138
  sig { returns(String) }
  def slice; end

  # source://prism//lib/prism/parse_result.rb#193
  def start_character_column; end

  # source://prism//lib/prism/parse_result.rb#144
  def start_character_offset; end

  # source://prism//lib/prism/parse_result.rb#199
  def start_code_units_column(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#149
  def start_code_units_offset(encoding = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#187
  sig { returns(Integer) }
  def start_column; end

  # source://prism//lib/prism/parse_result.rb#170
  sig { returns(Integer) }
  def start_line; end

  # source://prism//lib/prism/parse_result.rb#175
  def start_line_slice; end

  # source://prism//lib/prism/parse_result.rb#106
  sig { returns(Integer) }
  def start_offset; end

  protected

  # source://prism//lib/prism/parse_result.rb#101
  def source; end

  class << self
    # source://prism//lib/prism/parse_result.rb#251
    def null; end
  end
end

# source://prism//lib/prism/node.rb#19298
# Flags for while and until loop nodes.
module Prism::LoopFlags; end

# source://prism//lib/prism/node.rb#19300
Prism::LoopFlags::BEGIN_MODIFIER = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/parse_result.rb#303
class Prism::MagicComment
  # source://prism//lib/prism/parse_result.rb#311
  def initialize(key_loc, value_loc); end

  # source://prism//lib/prism/parse_result.rb#327
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#332
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#317
  def key; end

  # source://prism//lib/prism/parse_result.rb#305
  def key_loc; end

  # source://prism//lib/prism/parse_result.rb#322
  def value; end

  # source://prism//lib/prism/parse_result.rb#308
  def value_loc; end
end

# source://prism//lib/prism/node.rb#12744
class Prism::MatchLastLineNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#12746
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#12758
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12850
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#12763
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12890
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#12815
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#12773
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12768
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12885
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#12809
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#12778
  sig { params(params: T.untyped).returns(Prism::MatchLastLineNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12763
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12794
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#12845
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#12830
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#12870
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#12875
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#12865
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#12825
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#12895
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#12835
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#12840
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#12880
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#12803
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#12920
  def type; end

  # source://prism//lib/prism/node.rb#12821
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#12860
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#12855
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#12799
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#12930
    def type; end
  end
end

# source://prism//lib/prism/node.rb#12939
class Prism::MatchPredicateNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#12941
  def initialize(source, value, pattern, operator_loc, location); end

  # source://prism//lib/prism/node.rb#12951
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#12956
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#12966
  def comment_targets; end

  # source://prism//lib/prism/node.rb#12961
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#12971
  sig { params(params: T.untyped).returns(Prism::MatchPredicateNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#12956
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#12985
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13008
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13003
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#12996
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#12993
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#13032
  def type; end

  # source://prism//lib/prism/node.rb#12990
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#13042
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13051
class Prism::MatchRequiredNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13053
  def initialize(source, value, pattern, operator_loc, location); end

  # source://prism//lib/prism/node.rb#13063
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13068
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13078
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13073
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13083
  sig { params(params: T.untyped).returns(Prism::MatchRequiredNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13068
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13097
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13120
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13115
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13108
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13105
  sig { returns(Prism::Node) }
  def pattern; end

  # source://prism//lib/prism/node.rb#13144
  def type; end

  # source://prism//lib/prism/node.rb#13102
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#13154
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13163
class Prism::MatchWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13165
  def initialize(source, call, targets, location); end

  # source://prism//lib/prism/node.rb#13174
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13212
  sig { returns(Prism::CallNode) }
  def call; end

  # source://prism//lib/prism/node.rb#13179
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13189
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13184
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13194
  sig { params(params: T.untyped).returns(Prism::MatchWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13179
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13207
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13219
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13215
  sig { returns(T::Array[Prism::Node]) }
  def targets; end

  # source://prism//lib/prism/node.rb#13241
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13251
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13257
class Prism::MissingNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13259
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#13266
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13271
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13281
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13276
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13286
  sig { params(params: T.untyped).returns(Prism::MissingNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13271
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13297
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13303
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13322
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13332
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13341
class Prism::ModuleNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13343
  def initialize(source, locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location); end

  # source://prism//lib/prism/node.rb#13356
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13413
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#13361
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13374
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13366
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13410
  sig { returns(Prism::Node) }
  def constant_path; end

  # source://prism//lib/prism/node.rb#13379
  sig { params(params: T.untyped).returns(Prism::ModuleNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13361
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13396
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13431
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#13416
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#13436
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13401
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#13426
  sig { returns(String) }
  def module_keyword; end

  # source://prism//lib/prism/node.rb#13404
  sig { returns(Prism::Location) }
  def module_keyword_loc; end

  # source://prism//lib/prism/node.rb#13422
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#13467
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13477
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13486
class Prism::MultiTargetNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13488
  def initialize(source, lefts, rest, rights, lparen_loc, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#13500
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13505
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13519
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13510
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13524
  sig { params(params: T.untyped).returns(Prism::MultiTargetNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13505
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13540
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13589
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13545
  sig { returns(T::Array[Prism::Node]) }
  def lefts; end

  # source://prism//lib/prism/node.rb#13579
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#13554
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#13548
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#13551
  sig { returns(T::Array[Prism::Node]) }
  def rights; end

  # source://prism//lib/prism/node.rb#13584
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#13566
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#13618
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13628
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13637
class Prism::MultiWriteNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13639
  def initialize(source, lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#13653
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13658
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13673
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13663
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13678
  sig { params(params: T.untyped).returns(Prism::MultiWriteNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13658
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13696
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13759
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13701
  sig { returns(T::Array[Prism::Node]) }
  def lefts; end

  # source://prism//lib/prism/node.rb#13744
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#13710
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#13754
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#13734
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#13704
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node.rb#13707
  sig { returns(T::Array[Prism::Node]) }
  def rights; end

  # source://prism//lib/prism/node.rb#13749
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#13722
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#13791
  def type; end

  # source://prism//lib/prism/node.rb#13740
  sig { returns(Prism::Node) }
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#13801
    def type; end
  end
end

# source://prism//lib/prism/mutation_compiler.rb#12
class Prism::MutationCompiler < ::Prism::Compiler
  # source://prism//lib/prism/mutation_compiler.rb#14
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#19
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#24
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#29
  def visit_and_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#34
  def visit_arguments_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#39
  def visit_array_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#44
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#49
  def visit_assoc_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#54
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#59
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#64
  def visit_begin_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#69
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#74
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#79
  def visit_block_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#84
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#89
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#94
  def visit_break_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#99
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#104
  def visit_call_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#109
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#114
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#119
  def visit_call_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#124
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#129
  def visit_case_match_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#134
  def visit_case_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#139
  def visit_class_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#144
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#149
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#154
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#159
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#164
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#169
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#174
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#179
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#184
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#189
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#194
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#199
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#204
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#209
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#214
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#219
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#224
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#229
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#234
  def visit_def_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#239
  def visit_defined_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#244
  def visit_else_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#249
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#254
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#259
  def visit_ensure_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#264
  def visit_false_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#269
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#274
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#279
  def visit_float_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#284
  def visit_for_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#289
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#294
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#299
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#304
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#309
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#314
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#319
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#324
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#329
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#334
  def visit_hash_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#339
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#344
  def visit_if_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#349
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#354
  def visit_implicit_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#359
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#364
  def visit_in_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#369
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#374
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#379
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#384
  def visit_index_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#389
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#394
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#399
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#404
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#409
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#414
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#419
  def visit_integer_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#424
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#429
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#434
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#439
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#444
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#449
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#454
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#459
  def visit_lambda_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#464
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#469
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#474
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#479
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#484
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#489
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#494
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#499
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#504
  def visit_match_required_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#509
  def visit_match_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#514
  def visit_missing_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#519
  def visit_module_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#524
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#529
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#534
  def visit_next_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#539
  def visit_nil_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#544
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#549
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#554
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#559
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#564
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#569
  def visit_or_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#574
  def visit_parameters_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#579
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#584
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#589
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#594
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#599
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#604
  def visit_program_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#609
  def visit_range_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#614
  def visit_rational_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#619
  def visit_redo_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#624
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#629
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#634
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#639
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#644
  def visit_rescue_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#649
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#654
  def visit_retry_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#659
  def visit_return_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#664
  def visit_self_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#669
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#674
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#679
  def visit_source_file_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#684
  def visit_source_line_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#689
  def visit_splat_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#694
  def visit_statements_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#699
  def visit_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#704
  def visit_super_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#709
  def visit_symbol_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#714
  def visit_true_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#719
  def visit_undef_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#724
  def visit_unless_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#729
  def visit_until_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#734
  def visit_when_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#739
  def visit_while_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#744
  def visit_x_string_node(node); end

  # source://prism//lib/prism/mutation_compiler.rb#749
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#13810
class Prism::NextNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13812
  def initialize(source, arguments, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#13821
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13861
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#13826
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13838
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13831
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13843
  sig { params(params: T.untyped).returns(Prism::NextNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13826
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13856
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13876
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13871
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#13864
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#13902
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13912
    def type; end
  end
end

# source://prism//lib/prism/node.rb#13921
class Prism::NilNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#13923
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#13930
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#13935
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#13945
  def comment_targets; end

  # source://prism//lib/prism/node.rb#13940
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#13950
  sig { params(params: T.untyped).returns(Prism::NilNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#13935
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#13961
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#13967
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#13986
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#13996
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14006
class Prism::NoKeywordsParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14008
  def initialize(source, operator_loc, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#14017
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14022
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14032
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14027
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14037
  sig { params(params: T.untyped).returns(Prism::NoKeywordsParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14022
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14050
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14078
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14073
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#14061
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#14068
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14055
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14099
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14109
    def type; end
  end
end

# source://prism//lib/prism/node.rb#11
class Prism::Node
  # source://prism//lib/prism/node.rb#62
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#68
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#82
  def comment_targets; end

  # source://prism//lib/prism/node.rb#76
  sig { returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#68
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/node.rb#23
  def newline?; end

  # source://prism//lib/prism/node.rb#42
  def pretty_print(q); end

  # source://prism//lib/prism/node.rb#27
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#36
  sig { returns(String) }
  def slice; end

  # source://prism//lib/prism/node.rb#50
  sig { returns(String) }
  def to_dot; end

  # source://prism//lib/prism/node.rb#88
  sig { returns(Symbol) }
  def type; end

  private

  # source://prism//lib/prism/node.rb#13
  def source; end
end

# source://prism//lib/prism/node_inspector.rb#6
class Prism::NodeInspector
  # source://prism//lib/prism/node_inspector.rb#9
  def initialize(prefix = T.unsafe(nil)); end

  # source://prism//lib/prism/node_inspector.rb#15
  # Appends a line to the output with the current prefix.
  sig { params(line: String).void }
  def <<(line); end

  # source://prism//lib/prism/node_inspector.rb#59
  # Returns a new inspector that can be used to inspect a child node.
  sig { params(append: String).returns(Prism::NodeInspector) }
  def child_inspector(append); end

  # source://prism//lib/prism/node_inspector.rb#54
  # Generates a string that represents a child node.
  sig { params(node: Prism::Node, append: String).returns(String) }
  def child_node(node, append); end

  # source://prism//lib/prism/node_inspector.rb#21
  # This generates a string that is used as the header of the inspect output
  # for any given node.
  sig { params(node: Prism::Node).returns(String) }
  def header(node); end

  # source://prism//lib/prism/node_inspector.rb#31
  # Generates a string that represents a list of nodes. It handles properly
  # using the box drawing characters to make the output look nice.
  sig { params(prefix: String, nodes: T::Array[Prism::Node]).returns(String) }
  def list(prefix, nodes); end

  # source://prism//lib/prism/node_inspector.rb#45
  # Generates a string that represents a location field on a node.
  sig { params(value: Prism::Location).returns(String) }
  def location(value); end

  # source://prism//lib/prism/node_inspector.rb#7
  sig { returns(String) }
  def output; end

  # source://prism//lib/prism/node_inspector.rb#7
  sig { returns(String) }
  def prefix; end

  # source://prism//lib/prism/node_inspector.rb#64
  # Returns the output as a string.
  sig { returns(String) }
  def to_str; end
end

# source://prism//lib/prism/node.rb#14118
class Prism::NumberedParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14120
  def initialize(source, maximum, location); end

  # source://prism//lib/prism/node.rb#14128
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14133
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14143
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14138
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14148
  sig { params(params: T.untyped).returns(Prism::NumberedParametersNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14133
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14160
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14169
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14165
  sig { returns(Integer) }
  def maximum; end

  # source://prism//lib/prism/node.rb#14189
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14199
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14208
class Prism::NumberedReferenceReadNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14210
  def initialize(source, number, location); end

  # source://prism//lib/prism/node.rb#14218
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14223
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14233
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14228
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14238
  sig { params(params: T.untyped).returns(Prism::NumberedReferenceReadNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14223
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14250
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14265
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14261
  sig { returns(Integer) }
  def number; end

  # source://prism//lib/prism/node.rb#14285
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14295
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14305
class Prism::OptionalKeywordParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14307
  def initialize(source, flags, name, name_loc, value, location); end

  # source://prism//lib/prism/node.rb#14318
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14323
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14333
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14328
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14338
  sig { params(params: T.untyped).returns(Prism::OptionalKeywordParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14323
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14353
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14380
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14362
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#14365
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#14375
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#14405
  def type; end

  # source://prism//lib/prism/node.rb#14371
  sig { returns(Prism::Node) }
  def value; end

  private

  # source://prism//lib/prism/node.rb#14358
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#14415
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14425
class Prism::OptionalParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14427
  def initialize(source, flags, name, name_loc, operator_loc, value, location); end

  # source://prism//lib/prism/node.rb#14439
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14444
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14454
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14449
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14459
  sig { params(params: T.untyped).returns(Prism::OptionalParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14444
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14475
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14513
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14484
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#14487
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#14508
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14493
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14503
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#14539
  def type; end

  # source://prism//lib/prism/node.rb#14499
  sig { returns(Prism::Node) }
  def value; end

  private

  # source://prism//lib/prism/node.rb#14480
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#14549
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14558
class Prism::OrNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14560
  def initialize(source, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#14570
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14575
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14585
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14580
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14590
  sig { params(params: T.untyped).returns(Prism::OrNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14575
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14604
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14642
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14615
  sig { returns(Prism::Node) }
  def left; end

  # source://prism//lib/prism/node.rb#14637
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#14630
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#14624
  sig { returns(Prism::Node) }
  def right; end

  # source://prism//lib/prism/node.rb#14666
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14676
    def type; end
  end
end

# source://prism//lib/prism/pack.rb#5
module Prism::Pack
  class << self
    def parse(_arg0, _arg1, _arg2); end
  end
end

# source://prism//lib/prism/pack.rb#55
Prism::Pack::AGNOSTIC_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::BACK = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::BER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::BIG_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::COMMENT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#59
class Prism::Pack::Directive
  # source://prism//lib/prism/pack.rb#88
  def initialize(version, variant, source, type, signed, endian, size, length_type, length); end

  # source://prism//lib/prism/pack.rb#130
  def describe; end

  # source://prism//lib/prism/pack.rb#76
  def endian; end

  # source://prism//lib/prism/pack.rb#85
  def length; end

  # source://prism//lib/prism/pack.rb#82
  def length_type; end

  # source://prism//lib/prism/pack.rb#73
  def signed; end

  # source://prism//lib/prism/pack.rb#79
  def size; end

  # source://prism//lib/prism/pack.rb#67
  def source; end

  # source://prism//lib/prism/pack.rb#70
  def type; end

  # source://prism//lib/prism/pack.rb#64
  def variant; end

  # source://prism//lib/prism/pack.rb#61
  def version; end
end

# source://prism//lib/prism/pack.rb#101
Prism::Pack::Directive::ENDIAN_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#110
Prism::Pack::Directive::SIGNED_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#117
Prism::Pack::Directive::SIZE_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::ENDIAN_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::FLOAT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#195
class Prism::Pack::Format
  # source://prism//lib/prism/pack.rb#203
  def initialize(directives, encoding); end

  # source://prism//lib/prism/pack.rb#209
  def describe; end

  # source://prism//lib/prism/pack.rb#197
  def directives; end

  # source://prism//lib/prism/pack.rb#200
  def encoding; end
end

# source://prism//lib/prism/pack.rb#55
Prism::Pack::INTEGER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_FIXED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_MAX = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LENGTH_RELATIVE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::LITTLE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::MOVE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::NATIVE_ENDIAN = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::NULL = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIGNED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIGNED_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_16 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_32 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_64 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_8 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_INT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_LONG = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_LONG_LONG = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_NA = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_P = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SIZE_SHORT = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::SPACE = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_BASE64 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_FIXED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_HEX_HIGH = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_HEX_LOW = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_LSB = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_MIME = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_MSB = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_NULL_PADDED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_NULL_TERMINATED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_POINTER = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_SPACE_PADDED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::STRING_UU = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::UNSIGNED = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/pack.rb#55
Prism::Pack::UTF8 = T.let(T.unsafe(nil), Symbol)

# source://prism//lib/prism/node.rb#19304
# Flags for parameter nodes.
module Prism::ParameterFlags; end

# source://prism//lib/prism/node.rb#19306
Prism::ParameterFlags::REPEATED_PARAMETER = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#14686
class Prism::ParametersNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14688
  def initialize(source, requireds, optionals, rest, posts, keywords, keyword_rest, block, location); end

  # source://prism//lib/prism/node.rb#14702
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14771
  sig { returns(T.nilable(Prism::BlockParameterNode)) }
  def block; end

  # source://prism//lib/prism/node.rb#14707
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14725
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14712
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14730
  sig { params(params: T.untyped).returns(Prism::ParametersNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14707
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14748
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14775
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14768
  sig { returns(T.nilable(Prism::Node)) }
  def keyword_rest; end

  # source://prism//lib/prism/node.rb#14765
  sig { returns(T::Array[Prism::Node]) }
  def keywords; end

  # source://prism//lib/prism/node.rb#14756
  sig { returns(T::Array[Prism::Node]) }
  def optionals; end

  # source://prism//lib/prism/node.rb#14762
  sig { returns(T::Array[Prism::Node]) }
  def posts; end

  # source://prism//lib/prism/node.rb#14753
  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  # source://prism//lib/prism/node.rb#14759
  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  # source://prism//lib/prism/node_ext.rb#172
  def signature; end

  # source://prism//lib/prism/node.rb#14816
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14826
    def type; end
  end
end

# source://prism//lib/prism/node.rb#14835
class Prism::ParenthesesNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14837
  def initialize(source, body, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#14847
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14892
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#14856
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14913
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#14901
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#14868
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14861
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14873
  sig { params(params: T.untyped).returns(Prism::ParenthesesNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14856
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#14887
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#14918
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#14908
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#14895
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#14851
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#14945
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#14955
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#338
class Prism::ParseError
  # source://prism//lib/prism/parse_result.rb#349
  def initialize(message, location, level); end

  # source://prism//lib/prism/parse_result.rb#356
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#361
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#346
  def level; end

  # source://prism//lib/prism/parse_result.rb#343
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#340
  sig { returns(String) }
  def message; end
end

# source://prism//lib/prism/parse_result.rb#398
class Prism::ParseResult
  # source://prism//lib/prism/parse_result.rb#425
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  # source://prism//lib/prism/parse_result/comments.rb#173
  def attach_comments!; end

  # source://prism//lib/prism/parse_result.rb#405
  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  # source://prism//lib/prism/parse_result.rb#413
  def data_loc; end

  # source://prism//lib/prism/parse_result.rb#436
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#416
  sig { returns(T::Array[Prism::ParseError]) }
  def errors; end

  # source://prism//lib/prism/parse_result.rb#448
  def failure?; end

  # source://prism//lib/prism/parse_result.rb#408
  def magic_comments; end

  # source://prism//lib/prism/parse_result/newlines.rb#60
  def mark_newlines!; end

  # source://prism//lib/prism/parse_result.rb#422
  sig { returns(Prism::Source) }
  def source; end

  # source://prism//lib/prism/parse_result.rb#442
  def success?; end

  # source://prism//lib/prism/parse_result.rb#402
  sig { returns(Prism::ProgramNode) }
  def value; end

  # source://prism//lib/prism/parse_result.rb#419
  sig { returns(T::Array[Prism::ParseWarning]) }
  def warnings; end
end

# source://prism//lib/prism/parse_result/comments.rb#19
class Prism::ParseResult::Comments
  # source://prism//lib/prism/parse_result/comments.rb#78
  def initialize(parse_result); end

  # source://prism//lib/prism/parse_result/comments.rb#84
  def attach!; end

  # source://prism//lib/prism/parse_result/comments.rb#74
  def parse_result; end

  private

  # source://prism//lib/prism/parse_result/comments.rb#103
  def nearest_targets(node, comment); end
end

# source://prism//lib/prism/parse_result/comments.rb#49
class Prism::ParseResult::Comments::LocationTarget
  # source://prism//lib/prism/parse_result/comments.rb#52
  def initialize(location); end

  # source://prism//lib/prism/parse_result/comments.rb#68
  def <<(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#64
  def encloses?(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#60
  def end_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#50
  def location; end

  # source://prism//lib/prism/parse_result/comments.rb#56
  def start_offset; end
end

# source://prism//lib/prism/parse_result/comments.rb#22
class Prism::ParseResult::Comments::NodeTarget
  # source://prism//lib/prism/parse_result/comments.rb#25
  def initialize(node); end

  # source://prism//lib/prism/parse_result/comments.rb#42
  def <<(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#37
  def encloses?(comment); end

  # source://prism//lib/prism/parse_result/comments.rb#33
  def end_offset; end

  # source://prism//lib/prism/parse_result/comments.rb#23
  def node; end

  # source://prism//lib/prism/parse_result/comments.rb#29
  def start_offset; end
end

# source://prism//lib/prism/parse_result/newlines.rb#20
class Prism::ParseResult::Newlines < ::Prism::Visitor
  # source://prism//lib/prism/parse_result/newlines.rb#22
  def initialize(newline_marked); end

  # source://prism//lib/prism/parse_result/newlines.rb#27
  def visit_block_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#41
  def visit_if_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#27
  def visit_lambda_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#49
  def visit_statements_node(node); end

  # source://prism//lib/prism/parse_result/newlines.rb#41
  def visit_unless_node(node); end
end

# source://prism//lib/prism/parse_result.rb#367
class Prism::ParseWarning
  # source://prism//lib/prism/parse_result.rb#378
  def initialize(message, location, level); end

  # source://prism//lib/prism/parse_result.rb#385
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#390
  def inspect; end

  # source://prism//lib/prism/parse_result.rb#375
  def level; end

  # source://prism//lib/prism/parse_result.rb#372
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#369
  sig { returns(String) }
  def message; end
end

# source://prism//lib/prism/pattern.rb#37
class Prism::Pattern
  # source://prism//lib/prism/pattern.rb#63
  def initialize(query); end

  # source://prism//lib/prism/pattern.rb#70
  def compile; end

  # source://prism//lib/prism/pattern.rb#59
  def query; end

  # source://prism//lib/prism/pattern.rb#79
  def scan(root); end

  private

  # source://prism//lib/prism/pattern.rb#95
  def combine_and(left, right); end

  # source://prism//lib/prism/pattern.rb#101
  def combine_or(left, right); end

  # source://prism//lib/prism/pattern.rb#136
  def compile_alternation_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#111
  def compile_array_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#141
  def compile_constant_path_node(node); end

  # source://prism//lib/prism/pattern.rb#153
  def compile_constant_read_node(node); end

  # source://prism//lib/prism/pattern.rb#106
  def compile_error(node); end

  # source://prism//lib/prism/pattern.rb#171
  def compile_hash_pattern_node(node); end

  # source://prism//lib/prism/pattern.rb#196
  def compile_nil_node(node); end

  # source://prism//lib/prism/pattern.rb#225
  def compile_node(node); end

  # source://prism//lib/prism/pattern.rb#201
  def compile_regular_expression_node(node); end

  # source://prism//lib/prism/pattern.rb#209
  def compile_string_node(node); end

  # source://prism//lib/prism/pattern.rb#217
  def compile_symbol_node(node); end
end

# source://prism//lib/prism/pattern.rb#40
class Prism::Pattern::CompilationError < ::StandardError
  # source://prism//lib/prism/pattern.rb#43
  def initialize(repr); end
end

# source://prism//lib/prism/node.rb#14964
class Prism::PinnedExpressionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#14966
  def initialize(source, expression, operator_loc, lparen_loc, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#14977
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#14982
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#14992
  def comment_targets; end

  # source://prism//lib/prism/node.rb#14987
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#14997
  sig { params(params: T.untyped).returns(Prism::PinnedExpressionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#14982
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15012
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15017
  sig { returns(Prism::Node) }
  def expression; end

  # source://prism//lib/prism/node.rb#15054
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15044
  sig { returns(String) }
  def lparen; end

  # source://prism//lib/prism/node.rb#15026
  sig { returns(Prism::Location) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#15039
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#15020
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#15049
  sig { returns(String) }
  def rparen; end

  # source://prism//lib/prism/node.rb#15032
  sig { returns(Prism::Location) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#15078
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15088
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15097
class Prism::PinnedVariableNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15099
  def initialize(source, variable, operator_loc, location); end

  # source://prism//lib/prism/node.rb#15108
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15113
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15123
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15118
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15128
  sig { params(params: T.untyped).returns(Prism::PinnedVariableNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15113
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15141
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15161
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15156
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#15149
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#15183
  def type; end

  # source://prism//lib/prism/node.rb#15146
  sig { returns(Prism::Node) }
  def variable; end

  class << self
    # source://prism//lib/prism/node.rb#15193
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15202
class Prism::PostExecutionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15204
  def initialize(source, statements, keyword_loc, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#15215
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15220
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15289
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#15272
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15232
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15225
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15237
  sig { params(params: T.untyped).returns(Prism::PostExecutionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15220
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15252
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15294
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15279
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15260
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#15284
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#15266
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#15257
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#15322
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15332
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15341
class Prism::PreExecutionNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15343
  def initialize(source, statements, keyword_loc, opening_loc, closing_loc, location); end

  # source://prism//lib/prism/node.rb#15354
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15359
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15428
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#15411
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15371
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15364
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15376
  sig { params(params: T.untyped).returns(Prism::PreExecutionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15359
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15391
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15433
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15418
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#15399
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#15423
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#15405
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#15396
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#15461
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15471
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15477
class Prism::ProgramNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15479
  def initialize(source, locals, statements, location); end

  # source://prism//lib/prism/node.rb#15488
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15493
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15503
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15498
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15508
  sig { params(params: T.untyped).returns(Prism::ProgramNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15493
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15521
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15533
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15526
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#15529
  sig { returns(Prism::StatementsNode) }
  def statements; end

  # source://prism//lib/prism/node.rb#15555
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15565
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19310
# Flags for range and flip-flop nodes.
module Prism::RangeFlags; end

# source://prism//lib/prism/node.rb#19312
Prism::RangeFlags::EXCLUDE_END = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#15577
class Prism::RangeNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15579
  def initialize(source, flags, left, right, operator_loc, location); end

  # source://prism//lib/prism/node.rb#15590
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15595
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15608
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15600
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15613
  sig { params(params: T.untyped).returns(Prism::RangeNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15595
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15628
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15663
  sig { returns(T::Boolean) }
  def exclude_end?; end

  # source://prism//lib/prism/node.rb#15673
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15643
  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  # source://prism//lib/prism/node.rb#15668
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#15656
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#15653
  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  # source://prism//lib/prism/node.rb#15707
  def type; end

  private

  # source://prism//lib/prism/node.rb#15633
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#15717
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15726
class Prism::RationalNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15728
  def initialize(source, numeric, location); end

  # source://prism//lib/prism/node.rb#15736
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15741
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15751
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15746
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15756
  sig { params(params: T.untyped).returns(Prism::RationalNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15741
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15768
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15777
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15773
  sig { returns(Prism::Node) }
  def numeric; end

  # source://prism//lib/prism/node.rb#15798
  def type; end

  # source://prism//lib/prism/node_ext.rb#83
  def value; end

  class << self
    # source://prism//lib/prism/node.rb#15808
    def type; end
  end
end

# source://prism//lib/prism/node.rb#15817
class Prism::RedoNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#15819
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#15826
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#15831
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#15841
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15836
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#15846
  sig { params(params: T.untyped).returns(Prism::RedoNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15831
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15857
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#15863
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15882
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#15892
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19316
# Flags for regular expression and match last line nodes.
module Prism::RegularExpressionFlags; end

# source://prism//lib/prism/node.rb#19333
Prism::RegularExpressionFlags::ASCII_8BIT = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19330
Prism::RegularExpressionFlags::EUC_JP = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19321
Prism::RegularExpressionFlags::EXTENDED = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19345
Prism::RegularExpressionFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19348
Prism::RegularExpressionFlags::FORCED_US_ASCII_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19342
Prism::RegularExpressionFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19318
Prism::RegularExpressionFlags::IGNORE_CASE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19324
Prism::RegularExpressionFlags::MULTI_LINE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19327
Prism::RegularExpressionFlags::ONCE = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19339
Prism::RegularExpressionFlags::UTF_8 = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19336
Prism::RegularExpressionFlags::WINDOWS_31J = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#15901
class Prism::RegularExpressionNode < ::Prism::Node
  include ::Prism::RegularExpressionOptions

  # source://prism//lib/prism/node.rb#15903
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#15915
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16007
  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  # source://prism//lib/prism/node.rb#15920
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16047
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#15972
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#15930
  def comment_targets; end

  # source://prism//lib/prism/node.rb#15925
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16042
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#15966
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#15935
  sig { params(params: T.untyped).returns(Prism::RegularExpressionNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#15920
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#15951
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16002
  sig { returns(T::Boolean) }
  def euc_jp?; end

  # source://prism//lib/prism/node.rb#15987
  sig { returns(T::Boolean) }
  def extended?; end

  # source://prism//lib/prism/node.rb#16027
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#16032
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#16022
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#15982
  sig { returns(T::Boolean) }
  def ignore_case?; end

  # source://prism//lib/prism/node.rb#16052
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#15992
  sig { returns(T::Boolean) }
  def multi_line?; end

  # source://prism//lib/prism/node.rb#15997
  sig { returns(T::Boolean) }
  def once?; end

  # source://prism//lib/prism/node.rb#16037
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#15960
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#16077
  def type; end

  # source://prism//lib/prism/node.rb#15978
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#16017
  sig { returns(T::Boolean) }
  def utf_8?; end

  # source://prism//lib/prism/node.rb#16012
  sig { returns(T::Boolean) }
  def windows_31j?; end

  private

  # source://prism//lib/prism/node.rb#15956
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16087
    def type; end
  end
end

# source://prism//lib/prism/node_ext.rb#6
module Prism::RegularExpressionOptions
  # source://prism//lib/prism/node_ext.rb#9
  def options; end
end

# source://prism//lib/prism/node.rb#16097
class Prism::RequiredKeywordParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16099
  def initialize(source, flags, name, name_loc, location); end

  # source://prism//lib/prism/node.rb#16109
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16114
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16124
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16119
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16129
  sig { params(params: T.untyped).returns(Prism::RequiredKeywordParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16114
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16143
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16167
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16152
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#16155
  sig { returns(Prism::Location) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#16162
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#16190
  def type; end

  private

  # source://prism//lib/prism/node.rb#16148
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16200
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16210
class Prism::RequiredParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16212
  def initialize(source, flags, name, location); end

  # source://prism//lib/prism/node.rb#16221
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16226
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16236
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16231
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16241
  sig { params(params: T.untyped).returns(Prism::RequiredParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16226
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16254
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16272
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16263
  sig { returns(Symbol) }
  def name; end

  # source://prism//lib/prism/node.rb#16267
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#16294
  def type; end

  private

  # source://prism//lib/prism/node.rb#16259
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16304
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16313
class Prism::RescueModifierNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16315
  def initialize(source, expression, keyword_loc, rescue_expression, location); end

  # source://prism//lib/prism/node.rb#16325
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16334
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16344
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16339
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16349
  sig { params(params: T.untyped).returns(Prism::RescueModifierNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16334
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16363
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16368
  sig { returns(Prism::Node) }
  def expression; end

  # source://prism//lib/prism/node.rb#16386
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16381
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16371
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16377
  sig { returns(Prism::Node) }
  def rescue_expression; end

  # source://prism//lib/prism/node.rb#16329
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#16410
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16420
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16434
class Prism::RescueNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16436
  def initialize(source, keyword_loc, exceptions, operator_loc, reference, statements, consequent, location); end

  # source://prism//lib/prism/node.rb#16449
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16454
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16469
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16459
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16523
  sig { returns(T.nilable(Prism::RescueNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#16474
  sig { params(params: T.untyped).returns(Prism::RescueNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16454
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16491
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16502
  sig { returns(T::Array[Prism::Node]) }
  def exceptions; end

  # source://prism//lib/prism/node.rb#16537
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16527
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16496
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16532
  sig { returns(T.nilable(String)) }
  def operator; end

  # source://prism//lib/prism/node.rb#16505
  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#16517
  sig { returns(T.nilable(Prism::Node)) }
  def reference; end

  # source://prism//lib/prism/node.rb#16520
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#16577
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16587
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16597
class Prism::RestParameterNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16599
  def initialize(source, flags, name, name_loc, operator_loc, location); end

  # source://prism//lib/prism/node.rb#16610
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16615
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16625
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16620
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16630
  sig { params(params: T.untyped).returns(Prism::RestParameterNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16615
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16645
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16686
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16654
  sig { returns(T.nilable(Symbol)) }
  def name; end

  # source://prism//lib/prism/node.rb#16657
  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  # source://prism//lib/prism/node.rb#16681
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#16669
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#16676
  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  # source://prism//lib/prism/node.rb#16714
  def type; end

  private

  # source://prism//lib/prism/node.rb#16650
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#16724
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16733
class Prism::RetryNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16735
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#16742
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16747
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16757
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16752
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16762
  sig { params(params: T.untyped).returns(Prism::RetryNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16747
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16773
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16779
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16798
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16808
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16817
class Prism::ReturnNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16819
  def initialize(source, keyword_loc, arguments, location); end

  # source://prism//lib/prism/node.rb#16828
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16874
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#16833
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16845
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16838
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16850
  sig { params(params: T.untyped).returns(Prism::ReturnNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16833
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16863
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16883
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16878
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#16868
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#16909
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#16919
    def type; end
  end
end

# source://prism//lib/prism/node.rb#16928
class Prism::SelfNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#16930
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#16937
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#16942
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#16952
  def comment_targets; end

  # source://prism//lib/prism/node.rb#16947
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#16957
  sig { params(params: T.untyped).returns(Prism::SelfNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#16942
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#16968
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#16974
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#16993
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17003
    def type; end
  end
end

# source://prism//lib/prism/serialize.rb#23
module Prism::Serialize
  class << self
    # source://prism//lib/prism/serialize.rb#37
    def load(input, serialized); end

    # source://prism//lib/prism/serialize.rb#49
    def load_tokens(source, serialized); end
  end
end

# source://prism//lib/prism/serialize.rb#53
class Prism::Serialize::Loader
  # source://prism//lib/prism/serialize.rb#58
  def initialize(source, serialized); end

  # source://prism//lib/prism/serialize.rb#55
  def constant_pool; end

  # source://prism//lib/prism/serialize.rb#55
  def constant_pool_offset; end

  # source://prism//lib/prism/serialize.rb#54
  def encoding; end

  # source://prism//lib/prism/serialize.rb#54
  def input; end

  # source://prism//lib/prism/serialize.rb#54
  def io; end

  # source://prism//lib/prism/serialize.rb#96
  def load_comments; end

  # source://prism//lib/prism/serialize.rb#82
  def load_encoding; end

  # source://prism//lib/prism/serialize.rb#73
  def load_header; end

  # source://prism//lib/prism/serialize.rb#92
  def load_line_offsets; end

  # source://prism//lib/prism/serialize.rb#106
  def load_metadata; end

  # source://prism//lib/prism/serialize.rb#140
  def load_nodes; end

  # source://prism//lib/prism/serialize.rb#154
  def load_result; end

  # source://prism//lib/prism/serialize.rb#88
  def load_start_line; end

  # source://prism//lib/prism/serialize.rb#115
  def load_tokens; end

  # source://prism//lib/prism/serialize.rb#128
  def load_tokens_result; end

  # source://prism//lib/prism/serialize.rb#54
  def serialized; end

  # source://prism//lib/prism/serialize.rb#55
  def source; end

  # source://prism//lib/prism/serialize.rb#56
  def start_line; end

  private

  # source://prism//lib/prism/serialize.rb#217
  def load_constant(index); end

  # source://prism//lib/prism/serialize.rb#193
  def load_embedded_string; end

  # source://prism//lib/prism/serialize.rb#247
  def load_error_level; end

  # source://prism//lib/prism/serialize.rb#209
  def load_location; end

  # source://prism//lib/prism/serialize.rb#274
  def load_node; end

  # source://prism//lib/prism/serialize.rb#242
  def load_optional_constant; end

  # source://prism//lib/prism/serialize.rb#213
  def load_optional_location; end

  # source://prism//lib/prism/serialize.rb#186
  def load_optional_node; end

  # source://prism//lib/prism/serialize.rb#238
  def load_required_constant; end

  # source://prism//lib/prism/serialize.rb#182
  def load_serialized_length; end

  # source://prism//lib/prism/serialize.rb#197
  def load_string; end

  # source://prism//lib/prism/serialize.rb#177
  def load_varsint; end

  # source://prism//lib/prism/serialize.rb#163
  def load_varuint; end

  # source://prism//lib/prism/serialize.rb#260
  def load_warning_level; end
end

# source://prism//lib/prism/serialize.rb#26
Prism::Serialize::MAJOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#30
Prism::Serialize::MINOR_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#34
Prism::Serialize::PATCH_VERSION = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/serialize.rb#1482
Prism::Serialize::TOKEN_TYPES = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/node.rb#17012
class Prism::SingletonClassNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17014
  def initialize(source, locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#17027
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17090
  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  # source://prism//lib/prism/node.rb#17032
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17100
  sig { returns(String) }
  def class_keyword; end

  # source://prism//lib/prism/node.rb#17075
  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  # source://prism//lib/prism/node.rb#17045
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17037
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17050
  sig { params(params: T.untyped).returns(Prism::SingletonClassNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17032
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17067
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17110
  sig { returns(String) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#17093
  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#17087
  sig { returns(Prism::Node) }
  def expression; end

  # source://prism//lib/prism/node.rb#17115
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17072
  sig { returns(T::Array[Symbol]) }
  def locals; end

  # source://prism//lib/prism/node.rb#17105
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#17081
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#17146
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17156
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#7
class Prism::Source
  # source://prism//lib/prism/parse_result.rb#18
  def initialize(source, start_line = T.unsafe(nil), offsets = T.unsafe(nil)); end

  # source://prism//lib/prism/parse_result.rb#53
  def character_column(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#48
  def character_offset(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#70
  def code_units_column(byte_offset, encoding); end

  # source://prism//lib/prism/parse_result.rb#63
  def code_units_offset(byte_offset, encoding); end

  # source://prism//lib/prism/parse_result.rb#43
  def column(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#32
  def line(byte_offset); end

  sig { params(value: Integer).returns(Integer) }
  def line_offset(value); end

  # source://prism//lib/prism/parse_result.rb#38
  def line_start(byte_offset); end

  # source://prism//lib/prism/parse_result.rb#15
  sig { returns(T::Array[Integer]) }
  def offsets; end

  # source://prism//lib/prism/parse_result.rb#26
  def slice(byte_offset, length); end

  # source://prism//lib/prism/parse_result.rb#9
  sig { returns(String) }
  def source; end

  # source://prism//lib/prism/parse_result.rb#12
  def start_line; end

  private

  # source://prism//lib/prism/parse_result.rb#78
  def find_line(byte_offset); end
end

# source://prism//lib/prism/node.rb#17165
class Prism::SourceEncodingNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17167
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#17174
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17179
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17189
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17184
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17194
  sig { params(params: T.untyped).returns(Prism::SourceEncodingNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17179
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17205
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17211
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17230
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17240
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17249
class Prism::SourceFileNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17251
  def initialize(source, filepath, location); end

  # source://prism//lib/prism/node.rb#17259
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17264
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17274
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17269
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17279
  sig { params(params: T.untyped).returns(Prism::SourceFileNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17264
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17291
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17296
  sig { returns(String) }
  def filepath; end

  # source://prism//lib/prism/node.rb#17300
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17320
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17330
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17339
class Prism::SourceLineNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17341
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#17348
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17353
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17363
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17358
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17368
  sig { params(params: T.untyped).returns(Prism::SourceLineNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17353
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17379
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17385
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17404
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17414
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17423
class Prism::SplatNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17425
  def initialize(source, operator_loc, expression, location); end

  # source://prism//lib/prism/node.rb#17434
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17439
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17451
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17444
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17456
  sig { params(params: T.untyped).returns(Prism::SplatNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17439
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17469
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17480
  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  # source://prism//lib/prism/node.rb#17489
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17484
  sig { returns(String) }
  def operator; end

  # source://prism//lib/prism/node.rb#17474
  sig { returns(Prism::Location) }
  def operator_loc; end

  # source://prism//lib/prism/node.rb#17515
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17525
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17534
class Prism::StatementsNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17536
  def initialize(source, body, location); end

  # source://prism//lib/prism/node.rb#17544
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17581
  sig { returns(T::Array[Prism::Node]) }
  def body; end

  # source://prism//lib/prism/node.rb#17549
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17559
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17554
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17564
  sig { params(params: T.untyped).returns(Prism::StatementsNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17549
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17576
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17585
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17605
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17615
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19352
# Flags for string nodes.
module Prism::StringFlags; end

# source://prism//lib/prism/node.rb#19357
Prism::StringFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19354
Prism::StringFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19360
Prism::StringFlags::FROZEN = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17630
class Prism::StringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#17632
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#17644
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17649
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17748
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#17707
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#17659
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17654
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17743
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#17701
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#17664
  sig { params(params: T.untyped).returns(Prism::StringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17649
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17680
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17728
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#17723
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#17733
  sig { returns(T::Boolean) }
  def frozen?; end

  # source://prism//lib/prism/node.rb#17753
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17738
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#17689
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#17778
  def type; end

  # source://prism//lib/prism/node.rb#17719
  sig { returns(String) }
  def unescaped; end

  private

  # source://prism//lib/prism/node.rb#17685
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#17788
    def type; end
  end
end

# source://prism//lib/prism/node.rb#17800
class Prism::SuperNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17802
  def initialize(source, keyword_loc, lparen_loc, arguments, rparen_loc, block, location); end

  # source://prism//lib/prism/node.rb#17814
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17876
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#17891
  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  # source://prism//lib/prism/node.rb#17819
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#17832
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17824
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#17837
  sig { params(params: T.untyped).returns(Prism::SuperNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17819
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#17853
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#17910
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#17895
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#17858
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#17900
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#17864
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#17905
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#17879
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#17944
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#17954
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19364
# Flags for symbol nodes.
module Prism::SymbolFlags; end

# source://prism//lib/prism/node.rb#19369
Prism::SymbolFlags::FORCED_BINARY_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19372
Prism::SymbolFlags::FORCED_US_ASCII_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#19366
Prism::SymbolFlags::FORCED_UTF8_ENCODING = T.let(T.unsafe(nil), Integer)

# source://prism//lib/prism/node.rb#17966
class Prism::SymbolNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#17968
  def initialize(source, flags, opening_loc, value_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#17980
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#17985
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18090
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#18049
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#17995
  def comment_targets; end

  # source://prism//lib/prism/node.rb#17990
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18000
  sig { params(params: T.untyped).returns(Prism::SymbolNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#17985
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18016
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#18070
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#18075
  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  # source://prism//lib/prism/node.rb#18065
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#18095
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18080
  sig { returns(T.nilable(String)) }
  def opening; end

  # source://prism//lib/prism/node.rb#18025
  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#18120
  def type; end

  # source://prism//lib/prism/node.rb#18061
  sig { returns(String) }
  def unescaped; end

  # source://prism//lib/prism/node.rb#18085
  sig { returns(T.nilable(String)) }
  def value; end

  # source://prism//lib/prism/node.rb#18037
  sig { returns(T.nilable(Prism::Location)) }
  def value_loc; end

  private

  # source://prism//lib/prism/node.rb#18021
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#18130
    def type; end
  end
end

# source://prism//lib/prism/parse_result.rb#454
class Prism::Token
  # source://prism//lib/prism/parse_result.rb#466
  def initialize(source, type, value, location); end

  # source://prism//lib/prism/parse_result.rb#500
  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  # source://prism//lib/prism/parse_result.rb#474
  sig { params(keys: T.untyped).returns(T.untyped) }
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/parse_result.rb#479
  sig { returns(Prism::Location) }
  def location; end

  # source://prism//lib/prism/parse_result.rb#485
  sig { params(q: T.untyped).returns(T.untyped) }
  def pretty_print(q); end

  # source://prism//lib/prism/parse_result.rb#460
  sig { returns(T.untyped) }
  def type; end

  # source://prism//lib/prism/parse_result.rb#463
  sig { returns(String) }
  def value; end

  private

  # source://prism//lib/prism/parse_result.rb#456
  def source; end
end

# source://prism//lib/prism/translation.rb#6
module Prism::Translation; end

# source://prism//lib/prism/translation/parser.rb#11
class Prism::Translation::Parser < ::Parser::Base
  # source://prism//lib/prism/translation/parser.rb#33
  def default_encoding; end

  # source://prism//lib/prism/translation/parser.rb#41
  def parse(source_buffer); end

  # source://prism//lib/prism/translation/parser.rb#54
  def parse_with_comments(source_buffer); end

  # source://prism//lib/prism/translation/parser.rb#71
  def tokenize(source_buffer, recover = T.unsafe(nil)); end

  # source://prism//lib/prism/translation/parser.rb#97
  def try_declare_numparam(node); end

  # source://prism//lib/prism/translation/parser.rb#28
  def version; end

  # source://prism//lib/prism/translation/parser.rb#37
  def yyerror; end

  private

  # source://prism//lib/prism/translation/parser.rb#146
  def build_ast(program, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#151
  def build_comments(comments, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#129
  def build_offset_cache(source); end

  # source://prism//lib/prism/translation/parser.rb#163
  def build_range(location, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#158
  def build_tokens(tokens, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#172
  def convert_for_prism(version); end

  # source://prism//lib/prism/translation/parser.rb#111
  def unwrap(result, offset_cache); end

  # source://prism//lib/prism/translation/parser.rb#105
  def valid_error?(error); end
end

# source://prism//lib/prism/translation/parser/compiler.rb#8
class Prism::Translation::Parser::Compiler < ::Prism::Compiler
  # source://prism//lib/prism/translation/parser/compiler.rb#39
  def initialize(parser, offset_cache, forwarding: T.unsafe(nil), in_destructure: T.unsafe(nil), in_pattern: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/parser/compiler.rb#18
  def builder; end

  # source://prism//lib/prism/translation/parser/compiler.rb#29
  def forwarding; end

  # source://prism//lib/prism/translation/parser/compiler.rb#32
  def in_destructure; end

  # source://prism//lib/prism/translation/parser/compiler.rb#35
  def in_pattern; end

  # source://prism//lib/prism/translation/parser/compiler.rb#26
  def offset_cache; end

  # source://prism//lib/prism/translation/parser/compiler.rb#14
  def parser; end

  # source://prism//lib/prism/translation/parser/compiler.rb#22
  def source_buffer; end

  # source://prism//lib/prism/translation/parser/compiler.rb#58
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#52
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#64
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#70
  def visit_and_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#101
  def visit_arguments_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#76
  def visit_array_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#82
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#107
  def visit_assoc_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#141
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#151
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#157
  def visit_begin_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#195
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#201
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#206
  def visit_block_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#212
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#217
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#226
  def visit_break_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#300
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#238
  def visit_call_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#300
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#300
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#327
  def visit_call_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#339
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#358
  def visit_case_match_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#345
  def visit_case_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#371
  def visit_class_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#403
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#403
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#403
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#384
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#421
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#393
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#442
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#442
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#442
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#496
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#466
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#496
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#496
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#514
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#486
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#427
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#460
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#436
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#523
  def visit_def_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#570
  def visit_defined_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#582
  def visit_else_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#588
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#598
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#604
  def visit_ensure_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#610
  def visit_false_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#616
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1302
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#628
  def visit_float_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#634
  def visit_for_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#652
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#658
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#667
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#698
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#698
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#698
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#679
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#716
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#688
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#722
  def visit_hash_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#732
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#750
  def visit_if_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#791
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#797
  def visit_implicit_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#803
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#809
  def visit_in_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#835
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#835
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#835
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#861
  def visit_index_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#891
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#891
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#891
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#872
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#909
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#881
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#915
  def visit_integer_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#921
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#921
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#936
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#951
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#961
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#976
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#985
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#993
  def visit_lambda_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1037
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1037
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1037
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1018
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1055
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1027
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1336
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1066
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1085
  def visit_match_required_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1095
  def visit_match_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1106
  def visit_missing_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1112
  def visit_module_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1123
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1137
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1158
  def visit_next_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1170
  def visit_nil_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1176
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1186
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1192
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1198
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1204
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1210
  def visit_or_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1216
  def visit_parameters_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1255
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1265
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1271
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1276
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1286
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1296
  def visit_program_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1302
  def visit_range_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1324
  def visit_rational_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1330
  def visit_redo_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1336
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1351
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1357
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1363
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1381
  def visit_rescue_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1390
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1396
  def visit_retry_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1405
  def visit_return_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1417
  def visit_self_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1423
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1435
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1441
  def visit_source_file_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1447
  def visit_source_line_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1459
  def visit_splat_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1472
  def visit_statements_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1478
  def visit_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1495
  def visit_super_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1518
  def visit_symbol_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1536
  def visit_true_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1542
  def visit_undef_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1551
  def visit_unless_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1581
  def visit_until_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1603
  def visit_when_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1617
  def visit_while_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1639
  def visit_x_string_node(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1657
  def visit_yield_node(node); end

  private

  # source://prism//lib/prism/translation/parser/compiler.rb#1671
  def copy_compiler(forwarding: T.unsafe(nil), in_destructure: T.unsafe(nil), in_pattern: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1678
  def find_forwarding(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1693
  def procarg0?(parameters); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1710
  def srange(location); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1722
  def srange_find(start_offset, end_offset, tokens); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1715
  def srange_offsets(start_offset, end_offset); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1731
  def token(location); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1736
  def visit_block(call, block); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1769
  def visit_heredoc(node); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1815
  def visit_numeric(node, value); end

  # source://prism//lib/prism/translation/parser/compiler.rb#1827
  def within_pattern; end
end

# source://prism//lib/prism/translation/parser/compiler.rb#10
class Prism::Translation::Parser::Compiler::CompilationError < ::StandardError; end

# source://prism//lib/prism/translation/parser/compiler.rb#1707
Prism::Translation::Parser::Compiler::Range = Parser::Source::Range

# source://prism//lib/prism/translation/parser.rb#15
class Prism::Translation::Parser::Diagnostic < ::Parser::Diagnostic
  # source://prism//lib/prism/translation/parser.rb#20
  def initialize(message, location); end

  # source://prism//lib/prism/translation/parser.rb#17
  def message; end
end

# source://prism//lib/prism/translation/parser/lexer.rb#8
class Prism::Translation::Parser::Lexer
  # source://prism//lib/prism/translation/parser/lexer.rb#193
  def initialize(source_buffer, lexed, offset_cache); end

  # source://prism//lib/prism/translation/parser/lexer.rb#186
  def lexed; end

  # source://prism//lib/prism/translation/parser/lexer.rb#189
  def offset_cache; end

  # source://prism//lib/prism/translation/parser/lexer.rb#183
  def source_buffer; end

  # source://prism//lib/prism/translation/parser/lexer.rb#203
  def to_a; end

  private

  # source://prism//lib/prism/translation/parser/lexer.rb#310
  def parse_complex(value); end

  # source://prism//lib/prism/translation/parser/lexer.rb#323
  def parse_rational(value); end
end

# source://prism//lib/prism/translation/parser/lexer.rb#199
Prism::Translation::Parser::Lexer::Range = Parser::Source::Range

# source://prism//lib/prism/translation/parser/lexer.rb#10
Prism::Translation::Parser::Lexer::TYPES = T.let(T.unsafe(nil), Hash)

# source://prism//lib/prism/translation/parser.rb#26
Prism::Translation::Parser::Racc_debug_parser = T.let(T.unsafe(nil), FalseClass)

# source://prism//lib/prism/translation/ripper.rb#21
class Prism::Translation::Ripper < ::Prism::Compiler
  # source://prism//lib/prism/translation/ripper.rb#75
  def initialize(source); end

  # source://prism//lib/prism/translation/ripper.rb#72
  def column; end

  # source://prism//lib/prism/translation/ripper.rb#87
  def error?; end

  # source://prism//lib/prism/translation/ripper.rb#69
  def lineno; end

  # source://prism//lib/prism/translation/ripper.rb#92
  def parse; end

  # source://prism//lib/prism/translation/ripper.rb#66
  def source; end

  # source://prism//lib/prism/translation/ripper.rb#247
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#226
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#264
  def visit_and_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#113
  def visit_array_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#258
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#315
  def visit_begin_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#191
  def visit_block_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#200
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#218
  def visit_break_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#123
  def visit_call_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#371
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#280
  def visit_false_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#286
  def visit_float_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#252
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#291
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#296
  def visit_integer_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#366
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#381
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#168
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#178
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#173
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#183
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#161
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#269
  def visit_or_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#206
  def visit_parameters_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#301
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#327
  def visit_program_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#334
  def visit_range_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#347
  def visit_rational_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#212
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#322
  def visit_rescue_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#386
  def visit_statements_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#352
  def visit_string_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#376
  def visit_symbol_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#274
  def visit_true_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#359
  def visit_x_string_node(node); end

  private

  # source://prism//lib/prism/translation/ripper.rb#680
  def _dispatch0; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def _dispatch1(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def _dispatch2(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def _dispatch3(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#684
  def _dispatch4(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#685
  def _dispatch5(_, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#686
  def _dispatch7(_, _, _, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#663
  def bounds(location); end

  # source://prism//lib/prism/translation/ripper.rb#670
  def bounds_values(lineno, column); end

  # source://prism//lib/prism/translation/ripper.rb#646
  def no_block_value; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_BEGIN(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_CHAR(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_END(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on___end__(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_alias(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_alias_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_aref(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_aref_field(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_arg_ambiguous(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_arg_paren(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_args_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_args_add_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_args_add_star(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_args_forward; end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_args_new; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_array(_); end

  # source://prism//lib/prism/translation/ripper.rb#684
  def on_aryptn(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_assign(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_assign_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_assoc_new(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_assoc_splat(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_assoclist_from_args(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_backref(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_backtick(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_bare_assoc_hash(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_begin(_); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_binary(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_block_var(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_blockarg(_); end

  # source://prism//lib/prism/translation/ripper.rb#684
  def on_bodystmt(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_brace_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_break(_); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_call(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_case(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_class(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_class_name_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_comma(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_command(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#684
  def on_command_call(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_comment(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_const(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_const_path_field(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_const_path_ref(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_const_ref(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_cvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_def(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_defined(_); end

  # source://prism//lib/prism/translation/ripper.rb#685
  def on_defs(_, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_do_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_dot2(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_dot3(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_dyna_symbol(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_else(_); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_elsif(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_embdoc(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_embdoc_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_embdoc_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_embexpr_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_embexpr_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_embvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_ensure(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_excessed_comma; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_fcall(_); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_field(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_float(_); end

  # source://prism//lib/prism/translation/ripper.rb#684
  def on_fndptn(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_for(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_gvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_hash(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_heredoc_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_heredoc_dedent(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_heredoc_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_hshptn(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_ident(_); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_if(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_if_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_ifop(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_ignored_nl(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_ignored_sp(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_imaginary(_); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_in(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_int(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_ivar(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_kw(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_kwrest_param(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_label(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_label_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_lambda(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_lbrace(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_lbracket(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_lparen(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_magic_comment(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_massign(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_method_add_arg(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_method_add_block(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_mlhs_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_mlhs_add_post(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_mlhs_add_star(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_mlhs_new; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_mlhs_paren(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_module(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_mrhs_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_mrhs_add_star(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_mrhs_new; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_mrhs_new_from_args(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_next(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_nl(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_nokw_param(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_op(_); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_opassign(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_operator_ambiguous(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_param_error(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#686
  def on_params(_, _, _, _, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_paren(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_parse_error(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_period(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_program(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_qsymbols_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_qsymbols_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_qsymbols_new; end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_qwords_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_qwords_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_qwords_new; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_rational(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_rbrace(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_rbracket(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_redo; end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_regexp_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_regexp_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_regexp_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_regexp_literal(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_regexp_new; end

  # source://prism//lib/prism/translation/ripper.rb#684
  def on_rescue(_, _, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_rescue_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_rest_param(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_retry; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_return(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_return0; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_rparen(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_sclass(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_semicolon(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_sp(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_stmts_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_stmts_new; end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_string_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_string_concat(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_string_content; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_string_dvar(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_string_embexpr(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_string_literal(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_super(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_symbeg(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_symbol(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_symbol_literal(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_symbols_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_symbols_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_symbols_new; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_tlambda(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_tlambeg(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_top_const_field(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_top_const_ref(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_tstring_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_tstring_content(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_tstring_end(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_unary(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_undef(_); end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_unless(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_unless_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_until(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_until_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_var_alias(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_var_field(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_var_ref(_); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_vcall(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_void_stmt; end

  # source://prism//lib/prism/translation/ripper.rb#683
  def on_when(_, _, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_while(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_while_mod(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_word_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_word_new; end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_words_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_words_beg(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_words_new; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_words_sep(_); end

  # source://prism//lib/prism/translation/ripper.rb#682
  def on_xstring_add(_, _); end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_xstring_literal(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_xstring_new; end

  # source://prism//lib/prism/translation/ripper.rb#681
  def on_yield(_); end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_yield0; end

  # source://prism//lib/prism/translation/ripper.rb#680
  def on_zsuper; end

  # source://prism//lib/prism/translation/ripper.rb#676
  def result; end

  # source://prism//lib/prism/translation/ripper.rb#521
  def visit_aref_field_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#513
  def visit_aref_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#501
  def visit_binary_op_assign(node, operator: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ripper.rb#652
  def visit_binary_operator(node); end

  # source://prism//lib/prism/translation/ripper.rb#474
  def visit_elements(elements); end

  # source://prism//lib/prism/translation/ripper.rb#482
  def visit_enumerated_node(node); end

  # source://prism//lib/prism/translation/ripper.rb#410
  def visit_no_paren_call(node); end

  # source://prism//lib/prism/translation/ripper.rb#611
  def visit_number(node); end

  # source://prism//lib/prism/translation/ripper.rb#580
  def visit_symbol_literal_node(node, no_symbol_wrapper: T.unsafe(nil)); end

  # source://prism//lib/prism/translation/ripper.rb#634
  def visit_unary_operator(value); end

  class << self
    # source://prism//lib/prism/translation/ripper.rb#403
    def sexp(source); end

    # source://prism//lib/prism/translation/ripper.rb#398
    def sexp_raw(source); end
  end
end

# source://prism//lib/prism/translation/ripper.rb#532
Prism::Translation::Ripper::RUBY_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://prism//lib/prism/translation/ripper.rb#24
class Prism::Translation::Ripper::SexpBuilder < ::Prism::Translation::Ripper
  private

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_BEGIN(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_CHAR(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_END(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on___end__(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_alias(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_alias_error(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_aref(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_aref_field(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_arg_ambiguous(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_arg_paren(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_args_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_args_add_block(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_args_add_star(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_args_forward(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_args_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_array(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_aryptn(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_assign(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_assign_error(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_assoc_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_assoc_splat(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_assoclist_from_args(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_backref(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_backtick(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_bare_assoc_hash(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_begin(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_binary(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_block_var(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_blockarg(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_bodystmt(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_brace_block(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_break(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_call(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_case(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_class(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_class_name_error(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_comma(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_command(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_command_call(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_comment(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_const(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_const_path_field(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_const_path_ref(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_const_ref(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_cvar(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_def(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_defined(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_defs(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_do_block(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_dot2(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_dot3(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_dyna_symbol(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_else(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_elsif(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_embdoc(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_embdoc_beg(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_embdoc_end(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_embexpr_beg(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_embexpr_end(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_embvar(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_ensure(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_excessed_comma(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_fcall(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_field(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_float(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_fndptn(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_for(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_gvar(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_hash(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_heredoc_beg(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_heredoc_dedent(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_heredoc_end(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_hshptn(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_ident(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_if(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_if_mod(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_ifop(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_ignored_nl(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_ignored_sp(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_imaginary(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_in(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_int(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_ivar(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_kw(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_kwrest_param(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_label(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_label_end(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_lambda(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_lbrace(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_lbracket(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_lparen(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_magic_comment(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_massign(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_method_add_arg(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_method_add_block(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_mlhs_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_mlhs_add_post(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_mlhs_add_star(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_mlhs_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_mlhs_paren(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_module(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_mrhs_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_mrhs_add_star(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_mrhs_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_mrhs_new_from_args(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_next(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_nl(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_nokw_param(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_op(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_opassign(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_operator_ambiguous(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_param_error(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_params(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_paren(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_parse_error(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_period(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_program(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_qsymbols_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_qsymbols_beg(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_qsymbols_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_qwords_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_qwords_beg(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_qwords_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_rational(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_rbrace(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_rbracket(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_redo(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_regexp_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_regexp_beg(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_regexp_end(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_regexp_literal(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_regexp_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_rescue(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_rescue_mod(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_rest_param(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_retry(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_return(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_return0(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_rparen(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_sclass(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_semicolon(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_sp(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_stmts_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_stmts_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_string_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_string_concat(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_string_content(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_string_dvar(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_string_embexpr(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_string_literal(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_super(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_symbeg(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_symbol(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_symbol_literal(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_symbols_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_symbols_beg(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_symbols_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_tlambda(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_tlambeg(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_top_const_field(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_top_const_ref(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_tstring_beg(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_tstring_content(value); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_tstring_end(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_unary(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_undef(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_unless(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_unless_mod(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_until(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_until_mod(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_var_alias(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_var_field(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_var_ref(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_vcall(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_void_stmt(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_when(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_while(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_while_mod(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_word_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_word_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_words_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_words_beg(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_words_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#34
  def on_words_sep(value); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_xstring_add(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_xstring_literal(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_xstring_new(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_yield(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_yield0(*args); end

  # source://prism//lib/prism/translation/ripper.rb#28
  def on_zsuper(*args); end
end

# source://prism//lib/prism/translation/ripper.rb#43
class Prism::Translation::Ripper::SexpBuilderPP < ::Prism::Translation::Ripper::SexpBuilder
  private

  # source://prism//lib/prism/translation/ripper.rb#46
  def _dispatch_event_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def _dispatch_event_push(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_args_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_args_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_mlhs_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_mlhs_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_mrhs_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_mrhs_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_qsymbols_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_qsymbols_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_qwords_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_qwords_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_regexp_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_regexp_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_stmts_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_stmts_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_string_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_symbols_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_symbols_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_word_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_word_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_words_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_words_new; end

  # source://prism//lib/prism/translation/ripper.rb#50
  def on_xstring_add(list, item); end

  # source://prism//lib/prism/translation/ripper.rb#46
  def on_xstring_new; end
end

# source://prism//lib/prism/node.rb#18139
class Prism::TrueNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18141
  def initialize(source, location); end

  # source://prism//lib/prism/node.rb#18148
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18153
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18163
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18158
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18168
  sig { params(params: T.untyped).returns(Prism::TrueNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#18153
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18179
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#18185
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18204
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18214
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18223
class Prism::UndefNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18225
  def initialize(source, names, keyword_loc, location); end

  # source://prism//lib/prism/node.rb#18234
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18239
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18249
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18244
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18254
  sig { params(params: T.untyped).returns(Prism::UndefNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#18239
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18267
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#18287
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18282
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18275
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18272
  sig { returns(T::Array[Prism::Node]) }
  def names; end

  # source://prism//lib/prism/node.rb#18308
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18318
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18330
class Prism::UnlessNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18332
  def initialize(source, keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end

  # source://prism//lib/prism/node.rb#18345
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18354
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18368
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18359
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18419
  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  # source://prism//lib/prism/node.rb#18373
  sig { params(params: T.untyped).returns(Prism::UnlessNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#18354
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18390
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#18445
  sig { returns(T.nilable(String)) }
  def end_keyword; end

  # source://prism//lib/prism/node.rb#18422
  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  # source://prism//lib/prism/node.rb#18450
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18435
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18395
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18401
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#18349
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#18416
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18440
  sig { returns(T.nilable(String)) }
  def then_keyword; end

  # source://prism//lib/prism/node.rb#18404
  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  # source://prism//lib/prism/node.rb#18486
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18496
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18508
class Prism::UntilNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18510
  def initialize(source, flags, keyword_loc, closing_loc, predicate, statements, location); end

  # source://prism//lib/prism/node.rb#18522
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18599
  sig { returns(T::Boolean) }
  def begin_modifier?; end

  # source://prism//lib/prism/node.rb#18531
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18609
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#18580
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#18544
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18536
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18549
  sig { params(params: T.untyped).returns(Prism::UntilNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#18531
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18565
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#18614
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18604
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18574
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18592
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#18526
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#18595
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18645
  def type; end

  private

  # source://prism//lib/prism/node.rb#18570
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#18655
    def type; end
  end
end

Prism::VERSION = T.let(T.unsafe(nil), String)

# source://prism//lib/prism/visitor.rb#50
class Prism::Visitor < ::Prism::BasicVisitor
  # source://prism//lib/prism/visitor.rb#26
  # Visit a AliasGlobalVariableNode node
  sig { params(node: Prism::AliasGlobalVariableNode).void }
  def visit_alias_global_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AliasMethodNode node
  sig { params(node: Prism::AliasMethodNode).void }
  def visit_alias_method_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AlternationPatternNode node
  sig { params(node: Prism::AlternationPatternNode).void }
  def visit_alternation_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AndNode node
  sig { params(node: Prism::AndNode).void }
  def visit_and_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ArgumentsNode node
  sig { params(node: Prism::ArgumentsNode).void }
  def visit_arguments_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ArrayNode node
  sig { params(node: Prism::ArrayNode).void }
  def visit_array_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ArrayPatternNode node
  sig { params(node: Prism::ArrayPatternNode).void }
  def visit_array_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AssocNode node
  sig { params(node: Prism::AssocNode).void }
  def visit_assoc_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a AssocSplatNode node
  sig { params(node: Prism::AssocSplatNode).void }
  def visit_assoc_splat_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BackReferenceReadNode node
  sig { params(node: Prism::BackReferenceReadNode).void }
  def visit_back_reference_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BeginNode node
  sig { params(node: Prism::BeginNode).void }
  def visit_begin_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockArgumentNode node
  sig { params(node: Prism::BlockArgumentNode).void }
  def visit_block_argument_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockLocalVariableNode node
  sig { params(node: Prism::BlockLocalVariableNode).void }
  def visit_block_local_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockNode node
  sig { params(node: Prism::BlockNode).void }
  def visit_block_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockParameterNode node
  sig { params(node: Prism::BlockParameterNode).void }
  def visit_block_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BlockParametersNode node
  sig { params(node: Prism::BlockParametersNode).void }
  def visit_block_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a BreakNode node
  sig { params(node: Prism::BreakNode).void }
  def visit_break_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallAndWriteNode node
  sig { params(node: Prism::CallAndWriteNode).void }
  def visit_call_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallNode node
  sig { params(node: Prism::CallNode).void }
  def visit_call_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallOperatorWriteNode node
  sig { params(node: Prism::CallOperatorWriteNode).void }
  def visit_call_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallOrWriteNode node
  sig { params(node: Prism::CallOrWriteNode).void }
  def visit_call_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CallTargetNode node
  sig { params(node: Prism::CallTargetNode).void }
  def visit_call_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CapturePatternNode node
  sig { params(node: Prism::CapturePatternNode).void }
  def visit_capture_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CaseMatchNode node
  sig { params(node: Prism::CaseMatchNode).void }
  def visit_case_match_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a CaseNode node
  sig { params(node: Prism::CaseNode).void }
  def visit_case_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassNode node
  sig { params(node: Prism::ClassNode).void }
  def visit_class_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableAndWriteNode node
  sig { params(node: Prism::ClassVariableAndWriteNode).void }
  def visit_class_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableOperatorWriteNode node
  sig { params(node: Prism::ClassVariableOperatorWriteNode).void }
  def visit_class_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableOrWriteNode node
  sig { params(node: Prism::ClassVariableOrWriteNode).void }
  def visit_class_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableReadNode node
  sig { params(node: Prism::ClassVariableReadNode).void }
  def visit_class_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableTargetNode node
  sig { params(node: Prism::ClassVariableTargetNode).void }
  def visit_class_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ClassVariableWriteNode node
  sig { params(node: Prism::ClassVariableWriteNode).void }
  def visit_class_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantAndWriteNode node
  sig { params(node: Prism::ConstantAndWriteNode).void }
  def visit_constant_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantOperatorWriteNode node
  sig { params(node: Prism::ConstantOperatorWriteNode).void }
  def visit_constant_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantOrWriteNode node
  sig { params(node: Prism::ConstantOrWriteNode).void }
  def visit_constant_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathAndWriteNode node
  sig { params(node: Prism::ConstantPathAndWriteNode).void }
  def visit_constant_path_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathNode node
  sig { params(node: Prism::ConstantPathNode).void }
  def visit_constant_path_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathOperatorWriteNode node
  sig { params(node: Prism::ConstantPathOperatorWriteNode).void }
  def visit_constant_path_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathOrWriteNode node
  sig { params(node: Prism::ConstantPathOrWriteNode).void }
  def visit_constant_path_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathTargetNode node
  sig { params(node: Prism::ConstantPathTargetNode).void }
  def visit_constant_path_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantPathWriteNode node
  sig { params(node: Prism::ConstantPathWriteNode).void }
  def visit_constant_path_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantReadNode node
  sig { params(node: Prism::ConstantReadNode).void }
  def visit_constant_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantTargetNode node
  sig { params(node: Prism::ConstantTargetNode).void }
  def visit_constant_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ConstantWriteNode node
  sig { params(node: Prism::ConstantWriteNode).void }
  def visit_constant_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a DefNode node
  sig { params(node: Prism::DefNode).void }
  def visit_def_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a DefinedNode node
  sig { params(node: Prism::DefinedNode).void }
  def visit_defined_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ElseNode node
  sig { params(node: Prism::ElseNode).void }
  def visit_else_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a EmbeddedStatementsNode node
  sig { params(node: Prism::EmbeddedStatementsNode).void }
  def visit_embedded_statements_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a EmbeddedVariableNode node
  sig { params(node: Prism::EmbeddedVariableNode).void }
  def visit_embedded_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a EnsureNode node
  sig { params(node: Prism::EnsureNode).void }
  def visit_ensure_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FalseNode node
  sig { params(node: Prism::FalseNode).void }
  def visit_false_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FindPatternNode node
  sig { params(node: Prism::FindPatternNode).void }
  def visit_find_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FlipFlopNode node
  sig { params(node: Prism::FlipFlopNode).void }
  def visit_flip_flop_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a FloatNode node
  sig { params(node: Prism::FloatNode).void }
  def visit_float_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForNode node
  sig { params(node: Prism::ForNode).void }
  def visit_for_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForwardingArgumentsNode node
  sig { params(node: Prism::ForwardingArgumentsNode).void }
  def visit_forwarding_arguments_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForwardingParameterNode node
  sig { params(node: Prism::ForwardingParameterNode).void }
  def visit_forwarding_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ForwardingSuperNode node
  sig { params(node: Prism::ForwardingSuperNode).void }
  def visit_forwarding_super_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableAndWriteNode node
  sig { params(node: Prism::GlobalVariableAndWriteNode).void }
  def visit_global_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableOperatorWriteNode node
  sig { params(node: Prism::GlobalVariableOperatorWriteNode).void }
  def visit_global_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableOrWriteNode node
  sig { params(node: Prism::GlobalVariableOrWriteNode).void }
  def visit_global_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableReadNode node
  sig { params(node: Prism::GlobalVariableReadNode).void }
  def visit_global_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableTargetNode node
  sig { params(node: Prism::GlobalVariableTargetNode).void }
  def visit_global_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a GlobalVariableWriteNode node
  sig { params(node: Prism::GlobalVariableWriteNode).void }
  def visit_global_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a HashNode node
  sig { params(node: Prism::HashNode).void }
  def visit_hash_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a HashPatternNode node
  sig { params(node: Prism::HashPatternNode).void }
  def visit_hash_pattern_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IfNode node
  sig { params(node: Prism::IfNode).void }
  def visit_if_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ImaginaryNode node
  sig { params(node: Prism::ImaginaryNode).void }
  def visit_imaginary_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ImplicitNode node
  sig { params(node: Prism::ImplicitNode).void }
  def visit_implicit_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ImplicitRestNode node
  sig { params(node: Prism::ImplicitRestNode).void }
  def visit_implicit_rest_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InNode node
  sig { params(node: Prism::InNode).void }
  def visit_in_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexAndWriteNode node
  sig { params(node: Prism::IndexAndWriteNode).void }
  def visit_index_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexOperatorWriteNode node
  sig { params(node: Prism::IndexOperatorWriteNode).void }
  def visit_index_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexOrWriteNode node
  sig { params(node: Prism::IndexOrWriteNode).void }
  def visit_index_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IndexTargetNode node
  sig { params(node: Prism::IndexTargetNode).void }
  def visit_index_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableAndWriteNode node
  sig { params(node: Prism::InstanceVariableAndWriteNode).void }
  def visit_instance_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableOperatorWriteNode node
  sig { params(node: Prism::InstanceVariableOperatorWriteNode).void }
  def visit_instance_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableOrWriteNode node
  sig { params(node: Prism::InstanceVariableOrWriteNode).void }
  def visit_instance_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableReadNode node
  sig { params(node: Prism::InstanceVariableReadNode).void }
  def visit_instance_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableTargetNode node
  sig { params(node: Prism::InstanceVariableTargetNode).void }
  def visit_instance_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InstanceVariableWriteNode node
  sig { params(node: Prism::InstanceVariableWriteNode).void }
  def visit_instance_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a IntegerNode node
  sig { params(node: Prism::IntegerNode).void }
  def visit_integer_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedMatchLastLineNode node
  sig { params(node: Prism::InterpolatedMatchLastLineNode).void }
  def visit_interpolated_match_last_line_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedRegularExpressionNode node
  sig { params(node: Prism::InterpolatedRegularExpressionNode).void }
  def visit_interpolated_regular_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedStringNode node
  sig { params(node: Prism::InterpolatedStringNode).void }
  def visit_interpolated_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedSymbolNode node
  sig { params(node: Prism::InterpolatedSymbolNode).void }
  def visit_interpolated_symbol_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a InterpolatedXStringNode node
  sig { params(node: Prism::InterpolatedXStringNode).void }
  def visit_interpolated_x_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a KeywordHashNode node
  sig { params(node: Prism::KeywordHashNode).void }
  def visit_keyword_hash_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a KeywordRestParameterNode node
  sig { params(node: Prism::KeywordRestParameterNode).void }
  def visit_keyword_rest_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LambdaNode node
  sig { params(node: Prism::LambdaNode).void }
  def visit_lambda_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableAndWriteNode node
  sig { params(node: Prism::LocalVariableAndWriteNode).void }
  def visit_local_variable_and_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableOperatorWriteNode node
  sig { params(node: Prism::LocalVariableOperatorWriteNode).void }
  def visit_local_variable_operator_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableOrWriteNode node
  sig { params(node: Prism::LocalVariableOrWriteNode).void }
  def visit_local_variable_or_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableReadNode node
  sig { params(node: Prism::LocalVariableReadNode).void }
  def visit_local_variable_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableTargetNode node
  sig { params(node: Prism::LocalVariableTargetNode).void }
  def visit_local_variable_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a LocalVariableWriteNode node
  sig { params(node: Prism::LocalVariableWriteNode).void }
  def visit_local_variable_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchLastLineNode node
  sig { params(node: Prism::MatchLastLineNode).void }
  def visit_match_last_line_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchPredicateNode node
  sig { params(node: Prism::MatchPredicateNode).void }
  def visit_match_predicate_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchRequiredNode node
  sig { params(node: Prism::MatchRequiredNode).void }
  def visit_match_required_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MatchWriteNode node
  sig { params(node: Prism::MatchWriteNode).void }
  def visit_match_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MissingNode node
  sig { params(node: Prism::MissingNode).void }
  def visit_missing_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ModuleNode node
  sig { params(node: Prism::ModuleNode).void }
  def visit_module_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MultiTargetNode node
  sig { params(node: Prism::MultiTargetNode).void }
  def visit_multi_target_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a MultiWriteNode node
  sig { params(node: Prism::MultiWriteNode).void }
  def visit_multi_write_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NextNode node
  sig { params(node: Prism::NextNode).void }
  def visit_next_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NilNode node
  sig { params(node: Prism::NilNode).void }
  def visit_nil_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NoKeywordsParameterNode node
  sig { params(node: Prism::NoKeywordsParameterNode).void }
  def visit_no_keywords_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NumberedParametersNode node
  sig { params(node: Prism::NumberedParametersNode).void }
  def visit_numbered_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a NumberedReferenceReadNode node
  sig { params(node: Prism::NumberedReferenceReadNode).void }
  def visit_numbered_reference_read_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a OptionalKeywordParameterNode node
  sig { params(node: Prism::OptionalKeywordParameterNode).void }
  def visit_optional_keyword_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a OptionalParameterNode node
  sig { params(node: Prism::OptionalParameterNode).void }
  def visit_optional_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a OrNode node
  sig { params(node: Prism::OrNode).void }
  def visit_or_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ParametersNode node
  sig { params(node: Prism::ParametersNode).void }
  def visit_parameters_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ParenthesesNode node
  sig { params(node: Prism::ParenthesesNode).void }
  def visit_parentheses_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PinnedExpressionNode node
  sig { params(node: Prism::PinnedExpressionNode).void }
  def visit_pinned_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PinnedVariableNode node
  sig { params(node: Prism::PinnedVariableNode).void }
  def visit_pinned_variable_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PostExecutionNode node
  sig { params(node: Prism::PostExecutionNode).void }
  def visit_post_execution_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a PreExecutionNode node
  sig { params(node: Prism::PreExecutionNode).void }
  def visit_pre_execution_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ProgramNode node
  sig { params(node: Prism::ProgramNode).void }
  def visit_program_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RangeNode node
  sig { params(node: Prism::RangeNode).void }
  def visit_range_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RationalNode node
  sig { params(node: Prism::RationalNode).void }
  def visit_rational_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RedoNode node
  sig { params(node: Prism::RedoNode).void }
  def visit_redo_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RegularExpressionNode node
  sig { params(node: Prism::RegularExpressionNode).void }
  def visit_regular_expression_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RequiredKeywordParameterNode node
  sig { params(node: Prism::RequiredKeywordParameterNode).void }
  def visit_required_keyword_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RequiredParameterNode node
  sig { params(node: Prism::RequiredParameterNode).void }
  def visit_required_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RescueModifierNode node
  sig { params(node: Prism::RescueModifierNode).void }
  def visit_rescue_modifier_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RescueNode node
  sig { params(node: Prism::RescueNode).void }
  def visit_rescue_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RestParameterNode node
  sig { params(node: Prism::RestParameterNode).void }
  def visit_rest_parameter_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a RetryNode node
  sig { params(node: Prism::RetryNode).void }
  def visit_retry_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a ReturnNode node
  sig { params(node: Prism::ReturnNode).void }
  def visit_return_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SelfNode node
  sig { params(node: Prism::SelfNode).void }
  def visit_self_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SingletonClassNode node
  sig { params(node: Prism::SingletonClassNode).void }
  def visit_singleton_class_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SourceEncodingNode node
  sig { params(node: Prism::SourceEncodingNode).void }
  def visit_source_encoding_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SourceFileNode node
  sig { params(node: Prism::SourceFileNode).void }
  def visit_source_file_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SourceLineNode node
  sig { params(node: Prism::SourceLineNode).void }
  def visit_source_line_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SplatNode node
  sig { params(node: Prism::SplatNode).void }
  def visit_splat_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a StatementsNode node
  sig { params(node: Prism::StatementsNode).void }
  def visit_statements_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a StringNode node
  sig { params(node: Prism::StringNode).void }
  def visit_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SuperNode node
  sig { params(node: Prism::SuperNode).void }
  def visit_super_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a SymbolNode node
  sig { params(node: Prism::SymbolNode).void }
  def visit_symbol_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a TrueNode node
  sig { params(node: Prism::TrueNode).void }
  def visit_true_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a UndefNode node
  sig { params(node: Prism::UndefNode).void }
  def visit_undef_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a UnlessNode node
  sig { params(node: Prism::UnlessNode).void }
  def visit_unless_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a UntilNode node
  sig { params(node: Prism::UntilNode).void }
  def visit_until_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a WhenNode node
  sig { params(node: Prism::WhenNode).void }
  def visit_when_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a WhileNode node
  sig { params(node: Prism::WhileNode).void }
  def visit_while_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a XStringNode node
  sig { params(node: Prism::XStringNode).void }
  def visit_x_string_node(node); end

  # source://prism//lib/prism/visitor.rb#26
  # Visit a YieldNode node
  sig { params(node: Prism::YieldNode).void }
  def visit_yield_node(node); end
end

# source://prism//lib/prism/node.rb#18666
class Prism::WhenNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18668
  def initialize(source, keyword_loc, conditions, statements, location); end

  # source://prism//lib/prism/node.rb#18678
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18683
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18696
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18688
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18726
  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  # source://prism//lib/prism/node.rb#18701
  sig { params(params: T.untyped).returns(Prism::WhenNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#18683
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18715
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#18738
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18733
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18720
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18729
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18765
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#18775
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18787
class Prism::WhileNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#18789
  def initialize(source, flags, keyword_loc, closing_loc, predicate, statements, location); end

  # source://prism//lib/prism/node.rb#18801
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18878
  sig { returns(T::Boolean) }
  def begin_modifier?; end

  # source://prism//lib/prism/node.rb#18810
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#18888
  sig { returns(T.nilable(String)) }
  def closing; end

  # source://prism//lib/prism/node.rb#18859
  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#18823
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18815
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#18828
  sig { params(params: T.untyped).returns(Prism::WhileNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#18810
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18844
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#18893
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#18883
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#18853
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#18871
  sig { returns(Prism::Node) }
  def predicate; end

  # source://prism//lib/prism/node.rb#18805
  def set_newline_flag(newline_marked); end

  # source://prism//lib/prism/node.rb#18874
  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  # source://prism//lib/prism/node.rb#18924
  def type; end

  private

  # source://prism//lib/prism/node.rb#18849
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#18934
    def type; end
  end
end

# source://prism//lib/prism/node.rb#18943
class Prism::XStringNode < ::Prism::Node
  include ::Prism::HeredocQuery

  # source://prism//lib/prism/node.rb#18945
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  # source://prism//lib/prism/node.rb#18957
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#18962
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#19044
  sig { returns(String) }
  def closing; end

  # source://prism//lib/prism/node.rb#19014
  sig { returns(Prism::Location) }
  def closing_loc; end

  # source://prism//lib/prism/node.rb#18972
  def comment_targets; end

  # source://prism//lib/prism/node.rb#18967
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#19039
  sig { returns(String) }
  def content; end

  # source://prism//lib/prism/node.rb#19008
  sig { returns(Prism::Location) }
  def content_loc; end

  # source://prism//lib/prism/node.rb#18977
  sig { params(params: T.untyped).returns(Prism::XStringNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#18962
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#18993
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#19029
  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  # source://prism//lib/prism/node.rb#19024
  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  # source://prism//lib/prism/node.rb#19049
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#19034
  sig { returns(String) }
  def opening; end

  # source://prism//lib/prism/node.rb#19002
  sig { returns(Prism::Location) }
  def opening_loc; end

  # source://prism//lib/prism/node.rb#19074
  def type; end

  # source://prism//lib/prism/node.rb#19020
  sig { returns(String) }
  def unescaped; end

  private

  # source://prism//lib/prism/node.rb#18998
  sig { returns(Integer) }
  def flags; end

  class << self
    # source://prism//lib/prism/node.rb#19084
    def type; end
  end
end

# source://prism//lib/prism/node.rb#19093
class Prism::YieldNode < ::Prism::Node
  # source://prism//lib/prism/node.rb#19095
  def initialize(source, keyword_loc, lparen_loc, arguments, rparen_loc, location); end

  # source://prism//lib/prism/node.rb#19106
  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end

  # source://prism//lib/prism/node.rb#19166
  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  # source://prism//lib/prism/node.rb#19111
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  # source://prism//lib/prism/node.rb#19123
  def comment_targets; end

  # source://prism//lib/prism/node.rb#19116
  def compact_child_nodes; end

  # source://prism//lib/prism/node.rb#19128
  sig { params(params: T.untyped).returns(Prism::YieldNode) }
  def copy(**params); end

  # source://prism//lib/prism/node.rb#19111
  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  # source://prism//lib/prism/node.rb#19143
  sig do
    params(
      keys: T::Array[Symbol]
    ).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))])
  end
  def deconstruct_keys(keys); end

  # source://prism//lib/prism/node.rb#19197
  def inspect(inspector = T.unsafe(nil)); end

  # source://prism//lib/prism/node.rb#19182
  sig { returns(String) }
  def keyword; end

  # source://prism//lib/prism/node.rb#19148
  sig { returns(Prism::Location) }
  def keyword_loc; end

  # source://prism//lib/prism/node.rb#19187
  sig { returns(T.nilable(String)) }
  def lparen; end

  # source://prism//lib/prism/node.rb#19154
  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  # source://prism//lib/prism/node.rb#19192
  sig { returns(T.nilable(String)) }
  def rparen; end

  # source://prism//lib/prism/node.rb#19169
  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  # source://prism//lib/prism/node.rb#19225
  def type; end

  class << self
    # source://prism//lib/prism/node.rb#19235
    def type; end
  end
end
