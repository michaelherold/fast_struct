# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `benchmark-ips` gem.
# Please instead update this file by running `bin/tapioca gem benchmark-ips`.

# source://benchmark-ips//lib/benchmark/timing.rb#1
module Benchmark
  extend ::Benchmark::Compare
  extend ::Benchmark::IPS
end

# source://benchmark-ips//lib/benchmark/compare.rb#51
module Benchmark::Compare
  # source://benchmark-ips//lib/benchmark/compare.rb#56
  def compare(*entries, order: T.unsafe(nil)); end
end

# source://benchmark-ips//lib/benchmark/ips/stats/stats_metric.rb#2
module Benchmark::IPS
  # source://benchmark-ips//lib/benchmark/ips.rb#30
  def ips(*args); end

  class << self
    # source://benchmark-ips//lib/benchmark/ips.rb#80
    def options; end
  end
end

# source://benchmark-ips//lib/benchmark/ips.rb#23
Benchmark::IPS::CODENAME = T.let(T.unsafe(nil), String)

# source://benchmark-ips//lib/benchmark/ips.rb#84
module Benchmark::IPS::Helpers
  private

  # source://benchmark-ips//lib/benchmark/ips.rb#87
  def scale(value); end

  class << self
    # source://benchmark-ips//lib/benchmark/ips.rb#87
    def scale(value); end
  end
end

# source://benchmark-ips//lib/benchmark/ips.rb#85
Benchmark::IPS::Helpers::SUFFIXES = T.let(T.unsafe(nil), Array)

# source://benchmark-ips//lib/benchmark/ips/job/entry.rb#4
class Benchmark::IPS::Job
  # source://benchmark-ips//lib/benchmark/ips/job.rb#67
  def initialize(opts = T.unsafe(nil)); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#241
  def all_results_have_been_run?; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#245
  def clear_held_results; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#20
  def compare; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#124
  def compare!(order: T.unsafe(nil)); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#119
  def compare?; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#52
  def confidence; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#52
  def confidence=(_arg0); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#95
  def config(opts); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#392
  def create_report(label, measured_us, iter, samples, cycles); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#364
  def create_stats(samples); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#193
  def cycles_per_100ms(time_msec, iters); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#28
  def full_report; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#381
  def generate_json; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#24
  def hold; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#137
  def hold!(held_path); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#24
  def hold=(_arg0); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#131
  def hold?; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#175
  def item(label = T.unsafe(nil), str = T.unsafe(nil), &blk); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#44
  def iterations; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#44
  def iterations=(_arg0); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#211
  def iterations_per_sec(cycles, time_us); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#165
  def json!(path = T.unsafe(nil)); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#160
  def json?; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#16
  def list; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#215
  def load_held_results; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#56
  def quiet; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#105
  def quiet=(val); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#175
  def report(label = T.unsafe(nil), str = T.unsafe(nil), &blk); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#249
  def run; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#312
  def run_benchmark; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#376
  def run_comparison; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#154
  def run_single?; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#267
  def run_warmup; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#146
  def save!(held_path); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#226
  def save_held_results; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#48
  def stats; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#48
  def stats=(_arg0); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#62
  def suite; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#113
  def suite=(suite); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#40
  def time; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#40
  def time=(_arg0); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#202
  def time_us(before, after); end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#32
  def timing; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#36
  def warmup; end

  # source://benchmark-ips//lib/benchmark/ips/job.rb#36
  def warmup=(_arg0); end
end

# source://benchmark-ips//lib/benchmark/ips/job/entry.rb#6
class Benchmark::IPS::Job::Entry
  # source://benchmark-ips//lib/benchmark/ips/job/entry.rb#11
  def initialize(label, action); end

  # source://benchmark-ips//lib/benchmark/ips/job/entry.rb#41
  def action; end

  # source://benchmark-ips//lib/benchmark/ips/job/entry.rb#46
  def call_times(times); end

  # source://benchmark-ips//lib/benchmark/ips/job/entry.rb#50
  def compile_block; end

  # source://benchmark-ips//lib/benchmark/ips/job/entry.rb#66
  def compile_block_with_manual_loop; end

  # source://benchmark-ips//lib/benchmark/ips/job/entry.rb#79
  def compile_string(str); end

  # source://benchmark-ips//lib/benchmark/ips/job/entry.rb#37
  def label; end
end

# source://benchmark-ips//lib/benchmark/ips/job.rb#11
Benchmark::IPS::Job::MAX_TIME_SKEW = T.let(T.unsafe(nil), Float)

# source://benchmark-ips//lib/benchmark/ips/job.rb#6
Benchmark::IPS::Job::MICROSECONDS_PER_100MS = T.let(T.unsafe(nil), Integer)

# source://benchmark-ips//lib/benchmark/ips/job.rb#8
Benchmark::IPS::Job::MICROSECONDS_PER_SECOND = T.let(T.unsafe(nil), Integer)

# source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#4
class Benchmark::IPS::Job::MultiReport
  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#32
  def initialize(out = T.unsafe(nil)); end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#21
  def <<(report); end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#57
  def add_report(item, caller); end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#8
  def empty?; end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#61
  def footer; end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#6
  def out; end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#6
  def out=(_arg0); end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#16
  def quiet!; end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#12
  def quiet?; end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#53
  def running(label, warmup); end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#49
  def start_running; end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#37
  def start_warming; end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#41
  def warming(label, warmup); end

  # source://benchmark-ips//lib/benchmark/ips/job/multi_report.rb#45
  def warmup_stats(warmup_time_us, timing); end
end

# source://benchmark-ips//lib/benchmark/ips/job.rb#12
Benchmark::IPS::Job::POW_2_30 = T.let(T.unsafe(nil), Integer)

# source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#4
class Benchmark::IPS::Job::StreamReport
  # source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#5
  def initialize(stream = T.unsafe(nil)); end

  # source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#34
  def add_report(item, caller); end

  # source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#39
  def footer; end

  # source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#19
  def running(label, _warmup); end

  # source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#15
  def start_running; end

  # source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#10
  def start_warming; end

  # source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#19
  def warming(label, _warmup); end

  # source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#23
  def warmup_stats(_warmup_time_us, timing); end

  private

  # source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#48
  def format; end

  # source://benchmark-ips//lib/benchmark/ips/job/stream_report.rb#55
  def rjust(label); end
end

# source://benchmark-ips//lib/benchmark/ips/report.rb#8
class Benchmark::IPS::Report
  # source://benchmark-ips//lib/benchmark/ips/report.rb#135
  def initialize; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#147
  def add_entry(label, microseconds, iters, stats, measurement_cycle); end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#163
  def data; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#132
  def entries; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#185
  def generate_json(path); end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#179
  def run_comparison(order); end
end

# source://benchmark-ips//lib/benchmark/ips/report.rb#11
class Benchmark::IPS::Report::Entry
  # source://benchmark-ips//lib/benchmark/ips/report.rb#18
  def initialize(label, us, iters, stats, cycles); end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#88
  def body; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#123
  def display; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#78
  def error_percentage; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#112
  def header; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#45
  def ips; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#51
  def ips_sd; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#37
  def iterations; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#29
  def label; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#61
  def measurement_cycle; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#33
  def microseconds; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#72
  def runtime; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#55
  def samples; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#72
  def seconds; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#66
  def show_total_time!; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#41
  def stats; end

  # source://benchmark-ips//lib/benchmark/ips/report.rb#118
  def to_s; end
end

# source://benchmark-ips//lib/benchmark/ips/stats/stats_metric.rb#3
module Benchmark::IPS::Stats; end

# source://benchmark-ips//lib/benchmark/ips/stats/bootstrap.rb#5
class Benchmark::IPS::Stats::Bootstrap
  include ::Benchmark::IPS::Stats::StatsMetric

  # source://benchmark-ips//lib/benchmark/ips/stats/bootstrap.rb#9
  def initialize(samples, confidence); end

  # source://benchmark-ips//lib/benchmark/ips/stats/bootstrap.rb#22
  def central_tendency; end

  # source://benchmark-ips//lib/benchmark/ips/stats/bootstrap.rb#7
  def data; end

  # source://benchmark-ips//lib/benchmark/ips/stats/bootstrap.rb#44
  def dependencies; end

  # source://benchmark-ips//lib/benchmark/ips/stats/bootstrap.rb#7
  def error; end

  # source://benchmark-ips//lib/benchmark/ips/stats/bootstrap.rb#40
  def footer; end

  # source://benchmark-ips//lib/benchmark/ips/stats/bootstrap.rb#7
  def samples; end

  # source://benchmark-ips//lib/benchmark/ips/stats/bootstrap.rb#30
  def slowdown(baseline); end

  # source://benchmark-ips//lib/benchmark/ips/stats/bootstrap.rb#36
  def speedup(baseline); end
end

# source://benchmark-ips//lib/benchmark/ips/stats/sd.rb#5
class Benchmark::IPS::Stats::SD
  include ::Benchmark::IPS::Stats::StatsMetric

  # source://benchmark-ips//lib/benchmark/ips/stats/sd.rb#9
  def initialize(samples); end

  # source://benchmark-ips//lib/benchmark/ips/stats/sd.rb#17
  def central_tendency; end

  # source://benchmark-ips//lib/benchmark/ips/stats/sd.rb#7
  def error; end

  # source://benchmark-ips//lib/benchmark/ips/stats/sd.rb#37
  def footer; end

  # source://benchmark-ips//lib/benchmark/ips/stats/sd.rb#7
  def samples; end

  # source://benchmark-ips//lib/benchmark/ips/stats/sd.rb#25
  def slowdown(baseline); end

  # source://benchmark-ips//lib/benchmark/ips/stats/sd.rb#33
  def speedup(baseline); end
end

# source://benchmark-ips//lib/benchmark/ips/stats/stats_metric.rb#4
module Benchmark::IPS::Stats::StatsMetric
  # source://benchmark-ips//lib/benchmark/ips/stats/stats_metric.rb#7
  def error_percentage; end

  # source://benchmark-ips//lib/benchmark/ips/stats/stats_metric.rb#11
  def overlaps?(baseline); end
end

# source://benchmark-ips//lib/benchmark/ips.rb#20
Benchmark::IPS::VERSION = T.let(T.unsafe(nil), String)

# source://benchmark-ips//lib/benchmark/timing.rb#3
module Benchmark::Timing
  class << self
    # source://benchmark-ips//lib/benchmark/timing.rb#54
    def add_second(t, s); end

    # source://benchmark-ips//lib/benchmark/timing.rb#35
    def clean_env; end

    # source://benchmark-ips//lib/benchmark/timing.rb#10
    def mean(samples); end

    # source://benchmark-ips//lib/benchmark/timing.rb#49
    def now; end

    # source://benchmark-ips//lib/benchmark/timing.rb#30
    def stddev(samples, m = T.unsafe(nil)); end

    # source://benchmark-ips//lib/benchmark/timing.rb#59
    def time_us(before, after); end

    # source://benchmark-ips//lib/benchmark/timing.rb#18
    def variance(samples, m = T.unsafe(nil)); end
  end
end

# source://benchmark-ips//lib/benchmark/timing.rb#5
Benchmark::Timing::MICROSECONDS_PER_SECOND = T.let(T.unsafe(nil), Integer)
