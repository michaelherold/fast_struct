# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fileutils` gem.
# Please instead update this file by running `bin/tapioca gem fileutils`.

module FileUtils
  include ::FileUtils::StreamUtils_
  extend ::FileUtils::StreamUtils_

  private

  # source://fileutils//fileutils.rb#1660
  def apply_mask(mode, user_mask, op, mode_mask); end

  # source://fileutils//fileutils.rb#238
  def cd(dir, verbose: T.unsafe(nil), &block); end

  # source://fileutils//fileutils.rb#238
  def chdir(dir, verbose: T.unsafe(nil), &block); end

  # source://fileutils//fileutils.rb#1803
  def chmod(mode, list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1815
  def chmod_R(mode, list, noop: T.unsafe(nil), verbose: T.unsafe(nil), force: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1896
  def chown(user, group, list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1912
  def chown_R(user, group, list, noop: T.unsafe(nil), verbose: T.unsafe(nil), force: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1507
  def cmp(a, b); end

  # source://fileutils//fileutils.rb#1507
  def compare_file(a, b); end

  # source://fileutils//fileutils.rb#1530
  def compare_stream(a, b); end

  # source://fileutils//fileutils.rb#873
  def copy(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1040
  def copy_entry(src, dest, preserve = T.unsafe(nil), dereference_root = T.unsafe(nil), remove_destination = T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1076
  def copy_file(src, dest, preserve = T.unsafe(nil), dereference = T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1088
  def copy_stream(src, dest); end

  # source://fileutils//fileutils.rb#873
  def cp(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#627
  def cp_lr(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil), dereference_root: T.unsafe(nil), remove_destination: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#985
  def cp_r(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), dereference_root: T.unsafe(nil), remove_destination: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#2527
  def fu_clean_components(*comp); end

  # source://fileutils//fileutils.rb#2466
  def fu_each_src_dest(src, dest); end

  # source://fileutils//fileutils.rb#2474
  def fu_each_src_dest0(src, dest, target_directory = T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1947
  def fu_get_gid(group); end

  # source://fileutils//fileutils.rb#1933
  def fu_get_uid(user); end

  # source://fileutils//fileutils.rb#1423
  def fu_have_symlink?; end

  # source://fileutils//fileutils.rb#2461
  def fu_list(arg); end

  # source://fileutils//fileutils.rb#396
  def fu_mkdir(path, mode); end

  # source://fileutils//fileutils.rb#1721
  def fu_mode(mode, path); end

  # source://fileutils//fileutils.rb#2496
  def fu_output_message(msg); end

  # source://fileutils//fileutils.rb#2518
  def fu_relative_components_from(target, base); end

  # source://fileutils//fileutils.rb#2491
  def fu_same?(a, b); end

  # source://fileutils//fileutils.rb#2506
  def fu_split_path(path); end

  # source://fileutils//fileutils.rb#2550
  def fu_starting_path?(path); end

  # source://fileutils//fileutils.rb#1432
  def fu_stat_identical_entry?(a, b); end

  # source://fileutils//fileutils.rb#197
  def getwd; end

  # source://fileutils//fileutils.rb#1507
  def identical?(a, b); end

  # source://fileutils//fileutils.rb#1609
  def install(src, dest, mode: T.unsafe(nil), owner: T.unsafe(nil), group: T.unsafe(nil), preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#516
  def link(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#812
  def link_entry(src, dest, dereference_root = T.unsafe(nil), remove_destination = T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#516
  def ln(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#706
  def ln_s(src, dest, force: T.unsafe(nil), relative: T.unsafe(nil), target_directory: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#724
  def ln_sf(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#731
  def ln_sr(src, dest, target_directory: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#365
  def makedirs(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#316
  def mkdir(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#365
  def mkdir_p(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#365
  def mkpath(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1726
  def mode_to_s(mode); end

  # source://fileutils//fileutils.rb#1157
  def move(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1157
  def mv(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#197
  def pwd; end

  # source://fileutils//fileutils.rb#1216
  def remove(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1492
  def remove_dir(path, force = T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1449
  def remove_entry(path, force = T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1351
  def remove_entry_secure(path, force = T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1473
  def remove_file(path, force = T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#276
  def remove_trailing_slash(dir); end

  # source://fileutils//fileutils.rb#1216
  def rm(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1241
  def rm_f(list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1299
  def rm_r(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1328
  def rm_rf(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#442
  def rmdir(list, parents: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1328
  def rmtree(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1241
  def safe_unlink(list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#1672
  def symbolic_modes_to_i(mode_sym, path); end

  # source://fileutils//fileutils.rb#706
  def symlink(src, dest, force: T.unsafe(nil), relative: T.unsafe(nil), target_directory: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#2006
  def touch(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), mtime: T.unsafe(nil), nocreate: T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#264
  def uptodate?(new, old_list); end

  # source://fileutils//fileutils.rb#1642
  def user_mask(target); end

  class << self
    # source://fileutils//fileutils.rb#238
    def cd(dir, verbose: T.unsafe(nil), &block); end

    # source://fileutils//fileutils.rb#238
    def chdir(dir, verbose: T.unsafe(nil), &block); end

    # source://fileutils//fileutils.rb#1803
    def chmod(mode, list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1815
    def chmod_R(mode, list, noop: T.unsafe(nil), verbose: T.unsafe(nil), force: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1896
    def chown(user, group, list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1912
    def chown_R(user, group, list, noop: T.unsafe(nil), verbose: T.unsafe(nil), force: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1507
    def cmp(a, b); end

    # source://fileutils//fileutils.rb#2609
    def collect_method(opt); end

    # source://fileutils//fileutils.rb#2570
    def commands; end

    # source://fileutils//fileutils.rb#1507
    def compare_file(a, b); end

    # source://fileutils//fileutils.rb#1530
    def compare_stream(a, b); end

    # source://fileutils//fileutils.rb#873
    def copy(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1040
    def copy_entry(src, dest, preserve = T.unsafe(nil), dereference_root = T.unsafe(nil), remove_destination = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1076
    def copy_file(src, dest, preserve = T.unsafe(nil), dereference = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1088
    def copy_stream(src, dest); end

    # source://fileutils//fileutils.rb#873
    def cp(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#627
    def cp_lr(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil), dereference_root: T.unsafe(nil), remove_destination: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#985
    def cp_r(src, dest, preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), dereference_root: T.unsafe(nil), remove_destination: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#197
    def getwd; end

    # source://fileutils//fileutils.rb#2588
    def have_option?(mid, opt); end

    # source://fileutils//fileutils.rb#1507
    def identical?(a, b); end

    # source://fileutils//fileutils.rb#1609
    def install(src, dest, mode: T.unsafe(nil), owner: T.unsafe(nil), group: T.unsafe(nil), preserve: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#516
    def link(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#812
    def link_entry(src, dest, dereference_root = T.unsafe(nil), remove_destination = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#516
    def ln(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#706
    def ln_s(src, dest, force: T.unsafe(nil), relative: T.unsafe(nil), target_directory: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#724
    def ln_sf(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#731
    def ln_sr(src, dest, target_directory: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#365
    def makedirs(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#316
    def mkdir(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#365
    def mkdir_p(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#365
    def mkpath(list, mode: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1157
    def move(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1157
    def mv(src, dest, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#2578
    def options; end

    # source://fileutils//fileutils.rb#2599
    def options_of(mid); end

    # source://fileutils//fileutils.rb#185
    def private_module_function(name); end

    # source://fileutils//fileutils.rb#197
    def pwd; end

    # source://fileutils//fileutils.rb#1216
    def remove(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1492
    def remove_dir(path, force = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1449
    def remove_entry(path, force = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1351
    def remove_entry_secure(path, force = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1473
    def remove_file(path, force = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1216
    def rm(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1241
    def rm_f(list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1299
    def rm_r(list, force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1328
    def rm_rf(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#442
    def rmdir(list, parents: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1328
    def rmtree(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), secure: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1241
    def safe_unlink(list, noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#706
    def symlink(src, dest, force: T.unsafe(nil), relative: T.unsafe(nil), target_directory: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#2006
    def touch(list, noop: T.unsafe(nil), verbose: T.unsafe(nil), mtime: T.unsafe(nil), nocreate: T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#264
    def uptodate?(new, old_list); end

    private

    # source://fileutils//fileutils.rb#1660
    def apply_mask(mode, user_mask, op, mode_mask); end

    # source://fileutils//fileutils.rb#2527
    def fu_clean_components(*comp); end

    # source://fileutils//fileutils.rb#2466
    def fu_each_src_dest(src, dest); end

    # source://fileutils//fileutils.rb#2474
    def fu_each_src_dest0(src, dest, target_directory = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1947
    def fu_get_gid(group); end

    # source://fileutils//fileutils.rb#1933
    def fu_get_uid(user); end

    # source://fileutils//fileutils.rb#1423
    def fu_have_symlink?; end

    # source://fileutils//fileutils.rb#2461
    def fu_list(arg); end

    # source://fileutils//fileutils.rb#396
    def fu_mkdir(path, mode); end

    # source://fileutils//fileutils.rb#1721
    def fu_mode(mode, path); end

    # source://fileutils//fileutils.rb#2496
    def fu_output_message(msg); end

    # source://fileutils//fileutils.rb#2518
    def fu_relative_components_from(target, base); end

    # source://fileutils//fileutils.rb#2491
    def fu_same?(a, b); end

    # source://fileutils//fileutils.rb#2506
    def fu_split_path(path); end

    # source://fileutils//fileutils.rb#2550
    def fu_starting_path?(path); end

    # source://fileutils//fileutils.rb#1432
    def fu_stat_identical_entry?(a, b); end

    # source://fileutils//fileutils.rb#1726
    def mode_to_s(mode); end

    # source://fileutils//fileutils.rb#276
    def remove_trailing_slash(dir); end

    # source://fileutils//fileutils.rb#1672
    def symbolic_modes_to_i(mode_sym, path); end

    # source://fileutils//fileutils.rb#1642
    def user_mask(target); end
  end
end

module FileUtils::DryRun
  include ::FileUtils::StreamUtils_
  include ::FileUtils
  include ::FileUtils::LowMethods
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils
  extend ::FileUtils::LowMethods
  extend ::FileUtils::DryRun

  private

  # source://fileutils//fileutils.rb#2682
  def chmod(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def chmod_R(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def chown(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def chown_R(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def copy(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def cp(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def cp_lr(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def cp_r(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def install(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def link(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def ln(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def ln_s(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def ln_sf(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def ln_sr(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def makedirs(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def mkdir(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def mkdir_p(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def mkpath(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def move(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def mv(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def remove(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def rm(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def rm_f(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def rm_r(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def rm_rf(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def rmdir(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def rmtree(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def safe_unlink(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def symlink(*args, **options); end

  # source://fileutils//fileutils.rb#2682
  def touch(*args, **options); end

  class << self
    # source://fileutils//fileutils.rb#2618
    def cd(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def chdir(*_arg0); end

    # source://fileutils//fileutils.rb#2682
    def chmod(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def chmod_R(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def chown(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def chown_R(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def cmp(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def compare_file(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def compare_stream(*_arg0); end

    # source://fileutils//fileutils.rb#2682
    def copy(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def copy_entry(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def copy_file(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def copy_stream(*_arg0); end

    # source://fileutils//fileutils.rb#2682
    def cp(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def cp_lr(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def cp_r(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def getwd(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def identical?(*_arg0); end

    # source://fileutils//fileutils.rb#2682
    def install(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def link(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def link_entry(*_arg0); end

    # source://fileutils//fileutils.rb#2682
    def ln(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def ln_s(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def ln_sf(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def ln_sr(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def makedirs(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def mkdir(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def mkdir_p(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def mkpath(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def move(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def mv(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def pwd(*_arg0); end

    # source://fileutils//fileutils.rb#2682
    def remove(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def remove_dir(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def remove_entry(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def remove_entry_secure(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def remove_file(*_arg0); end

    # source://fileutils//fileutils.rb#2682
    def rm(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def rm_f(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def rm_r(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def rm_rf(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def rmdir(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def rmtree(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def safe_unlink(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def symlink(*args, **options); end

    # source://fileutils//fileutils.rb#2682
    def touch(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def uptodate?(*_arg0); end
  end
end

class FileUtils::Entry_
  include ::FileUtils::StreamUtils_

  # source://fileutils//fileutils.rb#2072
  def initialize(a, b = T.unsafe(nil), deref = T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#2138
  def blockdev?; end

  # source://fileutils//fileutils.rb#2133
  def chardev?; end

  # source://fileutils//fileutils.rb#2206
  def chmod(mode); end

  # source://fileutils//fileutils.rb#2215
  def chown(uid, gid); end

  # source://fileutils//fileutils.rb#2239
  def copy(dest); end

  # source://fileutils//fileutils.rb#2277
  def copy_file(dest); end

  # source://fileutils//fileutils.rb#2285
  def copy_metadata(path); end

  # source://fileutils//fileutils.rb#2105
  def dereference?; end

  # source://fileutils//fileutils.rb#2123
  def directory?; end

  # source://fileutils//fileutils.rb#2155
  def door?; end

  # source://fileutils//fileutils.rb#2160
  def entries; end

  # source://fileutils//fileutils.rb#2109
  def exist?; end

  # source://fileutils//fileutils.rb#2118
  def file?; end

  # source://fileutils//fileutils.rb#2085
  def inspect; end

  # source://fileutils//fileutils.rb#2223
  def link(dest); end

  # source://fileutils//fileutils.rb#2192
  def lstat; end

  # source://fileutils//fileutils.rb#2200
  def lstat!; end

  # source://fileutils//fileutils.rb#2089
  def path; end

  # source://fileutils//fileutils.rb#2148
  def pipe?; end

  # source://fileutils//fileutils.rb#2334
  def platform_support; end

  # source://fileutils//fileutils.rb#2364
  def postorder_traverse; end

  # source://fileutils//fileutils.rb#2097
  def prefix; end

  # source://fileutils//fileutils.rb#2354
  def preorder_traverse; end

  # source://fileutils//fileutils.rb#2101
  def rel; end

  # source://fileutils//fileutils.rb#2314
  def remove; end

  # source://fileutils//fileutils.rb#2322
  def remove_dir1; end

  # source://fileutils//fileutils.rb#2328
  def remove_file; end

  # source://fileutils//fileutils.rb#2143
  def socket?; end

  # source://fileutils//fileutils.rb#2170
  def stat; end

  # source://fileutils//fileutils.rb#2180
  def stat!; end

  # source://fileutils//fileutils.rb#2128
  def symlink?; end

  # source://fileutils//fileutils.rb#2354
  def traverse; end

  # source://fileutils//fileutils.rb#2384
  def wrap_traverse(pre, post); end

  private

  # source://fileutils//fileutils.rb#2406
  def check_have_lchmod?; end

  # source://fileutils//fileutils.rb#2424
  def check_have_lchown?; end

  # source://fileutils//fileutils.rb#2452
  def descendant_directory?(descendant, ascendant); end

  # source://fileutils//fileutils.rb#2398
  def have_lchmod?; end

  # source://fileutils//fileutils.rb#2416
  def have_lchown?; end

  # source://fileutils//fileutils.rb#2432
  def join(dir, base); end
end

module FileUtils::LowMethods
  private

  # source://fileutils//fileutils.rb#2618
  def _do_nothing(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def cd(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def chdir(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def cmp(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def collect_method(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def commands(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def compare_file(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def compare_stream(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def copy_entry(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def copy_file(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def copy_stream(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def getwd(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def have_option?(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def identical?(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def link_entry(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def options(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def options_of(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def private_module_function(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def pwd(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def remove_dir(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def remove_entry(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def remove_entry_secure(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def remove_file(*_arg0); end

  # source://fileutils//fileutils.rb#2618
  def uptodate?(*_arg0); end
end

module FileUtils::NoWrite
  include ::FileUtils::StreamUtils_
  include ::FileUtils
  include ::FileUtils::LowMethods
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils
  extend ::FileUtils::LowMethods
  extend ::FileUtils::NoWrite

  private

  # source://fileutils//fileutils.rb#2658
  def chmod(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def chmod_R(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def chown(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def chown_R(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def copy(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def cp(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def cp_lr(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def cp_r(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def install(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def link(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def ln(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def ln_s(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def ln_sf(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def ln_sr(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def makedirs(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def mkdir(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def mkdir_p(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def mkpath(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def move(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def mv(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def remove(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def rm(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def rm_f(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def rm_r(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def rm_rf(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def rmdir(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def rmtree(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def safe_unlink(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def symlink(*args, **options); end

  # source://fileutils//fileutils.rb#2658
  def touch(*args, **options); end

  class << self
    # source://fileutils//fileutils.rb#2618
    def cd(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def chdir(*_arg0); end

    # source://fileutils//fileutils.rb#2658
    def chmod(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def chmod_R(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def chown(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def chown_R(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def cmp(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def compare_file(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def compare_stream(*_arg0); end

    # source://fileutils//fileutils.rb#2658
    def copy(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def copy_entry(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def copy_file(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def copy_stream(*_arg0); end

    # source://fileutils//fileutils.rb#2658
    def cp(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def cp_lr(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def cp_r(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def getwd(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def identical?(*_arg0); end

    # source://fileutils//fileutils.rb#2658
    def install(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def link(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def link_entry(*_arg0); end

    # source://fileutils//fileutils.rb#2658
    def ln(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def ln_s(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def ln_sf(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def ln_sr(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def makedirs(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def mkdir(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def mkdir_p(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def mkpath(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def move(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def mv(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def pwd(*_arg0); end

    # source://fileutils//fileutils.rb#2658
    def remove(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def remove_dir(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def remove_entry(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def remove_entry_secure(*_arg0); end

    # source://fileutils//fileutils.rb#2618
    def remove_file(*_arg0); end

    # source://fileutils//fileutils.rb#2658
    def rm(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def rm_f(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def rm_r(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def rm_rf(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def rmdir(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def rmtree(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def safe_unlink(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def symlink(*args, **options); end

    # source://fileutils//fileutils.rb#2658
    def touch(*args, **options); end

    # source://fileutils//fileutils.rb#2618
    def uptodate?(*_arg0); end
  end
end

module FileUtils::StreamUtils_
  private

  # source://fileutils//fileutils.rb#2054
  def fu_blksize(st); end

  # source://fileutils//fileutils.rb#2041
  def fu_copy_stream0(src, dest, blksize = T.unsafe(nil)); end

  # source://fileutils//fileutils.rb#2061
  def fu_default_blksize; end

  # source://fileutils//fileutils.rb#2045
  def fu_stream_blksize(*streams); end

  # source://fileutils//fileutils.rb#2038
  def fu_windows?; end
end

module FileUtils::Verbose
  include ::FileUtils::StreamUtils_
  include ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils
  extend ::FileUtils::Verbose

  private

  # source://fileutils//fileutils.rb#2635
  def cd(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def chdir(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def chmod(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def chmod_R(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def chown(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def chown_R(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def copy(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def cp(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def cp_lr(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def cp_r(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def install(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def link(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def ln(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def ln_s(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def ln_sf(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def ln_sr(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def makedirs(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def mkdir(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def mkdir_p(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def mkpath(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def move(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def mv(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def remove(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def rm(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def rm_f(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def rm_r(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def rm_rf(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def rmdir(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def rmtree(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def safe_unlink(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def symlink(*args, **options); end

  # source://fileutils//fileutils.rb#2635
  def touch(*args, **options); end

  class << self
    # source://fileutils//fileutils.rb#2635
    def cd(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def chdir(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def chmod(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def chmod_R(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def chown(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def chown_R(*args, **options); end

    # source://fileutils//fileutils.rb#1507
    def cmp(a, b); end

    # source://fileutils//fileutils.rb#1507
    def compare_file(a, b); end

    # source://fileutils//fileutils.rb#1530
    def compare_stream(a, b); end

    # source://fileutils//fileutils.rb#2635
    def copy(*args, **options); end

    # source://fileutils//fileutils.rb#1040
    def copy_entry(src, dest, preserve = T.unsafe(nil), dereference_root = T.unsafe(nil), remove_destination = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1076
    def copy_file(src, dest, preserve = T.unsafe(nil), dereference = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1088
    def copy_stream(src, dest); end

    # source://fileutils//fileutils.rb#2635
    def cp(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def cp_lr(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def cp_r(*args, **options); end

    # source://fileutils//fileutils.rb#197
    def getwd; end

    # source://fileutils//fileutils.rb#1507
    def identical?(a, b); end

    # source://fileutils//fileutils.rb#2635
    def install(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def link(*args, **options); end

    # source://fileutils//fileutils.rb#812
    def link_entry(src, dest, dereference_root = T.unsafe(nil), remove_destination = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#2635
    def ln(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def ln_s(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def ln_sf(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def ln_sr(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def makedirs(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def mkdir(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def mkdir_p(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def mkpath(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def move(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def mv(*args, **options); end

    # source://fileutils//fileutils.rb#197
    def pwd; end

    # source://fileutils//fileutils.rb#2635
    def remove(*args, **options); end

    # source://fileutils//fileutils.rb#1492
    def remove_dir(path, force = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1449
    def remove_entry(path, force = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1351
    def remove_entry_secure(path, force = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#1473
    def remove_file(path, force = T.unsafe(nil)); end

    # source://fileutils//fileutils.rb#2635
    def rm(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def rm_f(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def rm_r(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def rm_rf(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def rmdir(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def rmtree(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def safe_unlink(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def symlink(*args, **options); end

    # source://fileutils//fileutils.rb#2635
    def touch(*args, **options); end

    # source://fileutils//fileutils.rb#264
    def uptodate?(new, old_list); end
  end
end
