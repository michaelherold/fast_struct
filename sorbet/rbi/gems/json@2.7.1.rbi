# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `json` gem.
# Please instead update this file by running `bin/tapioca gem json`.

class Class < ::Module
  # source://json//json/common.rb#694
  def json_creatable?; end
end

module JSON
  private

  # source://json//json/common.rb#614
  def dump(obj, anIO = T.unsafe(nil), limit = T.unsafe(nil), kwargs = T.unsafe(nil)); end

  # source://json//json/common.rb#328
  def fast_generate(obj, opts = T.unsafe(nil)); end

  # source://json//json/common.rb#328
  def fast_unparse(obj, opts = T.unsafe(nil)); end

  # source://json//json/common.rb#299
  def generate(obj, opts = T.unsafe(nil)); end

  # source://json//json/common.rb#540
  def load(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://json//json/common.rb#248
  def load_file(filespec, opts = T.unsafe(nil)); end

  # source://json//json/common.rb#259
  def load_file!(filespec, opts = T.unsafe(nil)); end

  # source://json//json/common.rb#642
  def merge_dump_options(opts, strict: T.unsafe(nil)); end

  # source://json//json/common.rb#218
  def parse(source, opts = T.unsafe(nil)); end

  # source://json//json/common.rb#233
  def parse!(source, opts = T.unsafe(nil)); end

  # source://json//json/common.rb#373
  def pretty_generate(obj, opts = T.unsafe(nil)); end

  # source://json//json/common.rb#373
  def pretty_unparse(obj, opts = T.unsafe(nil)); end

  # source://json//json/common.rb#558
  def recurse_proc(result, &proc); end

  # source://json//json/common.rb#540
  def restore(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://json//json/common.rb#299
  def unparse(obj, opts = T.unsafe(nil)); end

  class << self
    # source://json//json/common.rb#21
    def [](object, opts = T.unsafe(nil)); end

    # source://json//json/common.rb#84
    def create_fast_state; end

    # source://json//json/common.rb#129
    def create_id; end

    # source://json//json/common.rb#123
    def create_id=(new_value); end

    # source://json//json/common.rb#94
    def create_pretty_state; end

    # source://json//json/common.rb#45
    def deep_const_get(path); end

    # source://json//json/common.rb#614
    def dump(obj, anIO = T.unsafe(nil), limit = T.unsafe(nil), kwargs = T.unsafe(nil)); end

    # source://json//json/common.rb#579
    def dump_default_options; end

    # source://json//json/common.rb#579
    def dump_default_options=(_arg0); end

    # source://json//json/common.rb#328
    def fast_generate(obj, opts = T.unsafe(nil)); end

    # source://json//json/common.rb#328
    def fast_unparse(obj, opts = T.unsafe(nil)); end

    # source://json//json/common.rb#299
    def generate(obj, opts = T.unsafe(nil)); end

    # source://json//json/common.rb#106
    def generator; end

    # source://json//json/common.rb#61
    def generator=(generator); end

    # source://json//json/common.rb#638
    def iconv(to, from, string); end

    # source://json//json/common.rb#540
    def load(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://json//json/common.rb#403
    def load_default_options; end

    # source://json//json/common.rb#403
    def load_default_options=(_arg0); end

    # source://json//json/common.rb#248
    def load_file(filespec, opts = T.unsafe(nil)); end

    # source://json//json/common.rb#259
    def load_file!(filespec, opts = T.unsafe(nil)); end

    # source://json//json/common.rb#218
    def parse(source, opts = T.unsafe(nil)); end

    # source://json//json/common.rb#233
    def parse!(source, opts = T.unsafe(nil)); end

    # source://json//json/common.rb#32
    def parser; end

    # source://json//json/common.rb#35
    def parser=(parser); end

    # source://json//json/common.rb#373
    def pretty_generate(obj, opts = T.unsafe(nil)); end

    # source://json//json/common.rb#373
    def pretty_unparse(obj, opts = T.unsafe(nil)); end

    # source://json//json/common.rb#558
    def recurse_proc(result, &proc); end

    # source://json//json/common.rb#540
    def restore(source, proc = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://json//json/common.rb#111
    def state; end

    # source://json//json/common.rb#111
    def state=(_arg0); end

    # source://json//json/common.rb#299
    def unparse(obj, opts = T.unsafe(nil)); end

    private

    # source://json//json/common.rb#642
    def merge_dump_options(opts, strict: T.unsafe(nil)); end
  end
end

# source://json//json/common.rb#117
JSON::CREATE_ID_TLS_KEY = T.let(T.unsafe(nil), String)

# source://json//json/common.rb#114
JSON::DEFAULT_CREATE_ID = T.let(T.unsafe(nil), String)

class JSON::GenericObject < ::OpenStruct
  # source://json//json/generic_object.rb#63
  def as_json(*_arg0); end

  # source://json//json/generic_object.rb#47
  def to_hash; end

  # source://json//json/generic_object.rb#67
  def to_json(*a); end

  # source://json//json/generic_object.rb#59
  def |(other); end

  class << self
    # source://json//json/generic_object.rb#41
    def dump(obj, *args); end

    # source://json//json/generic_object.rb#21
    def from_hash(object); end

    # source://json//json/generic_object.rb#13
    def json_creatable=(_arg0); end

    # source://json//json/generic_object.rb#9
    def json_creatable?; end

    # source://json//json/generic_object.rb#15
    def json_create(data); end

    # source://json//json/generic_object.rb#36
    def load(source, proc = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

class JSON::JSONError < ::StandardError
  class << self
    # source://json//json/common.rb#141
    def wrap(exception); end
  end
end

# source://json//json/common.rb#6
JSON::NOT_SET = T.let(T.unsafe(nil), Object)

# source://json//json/common.rb#38
JSON::Parser = JSON::Ext::Parser

# source://json//json/common.rb#76
JSON::State = JSON::Ext::Generator::State

# source://json//json/common.rb#162
JSON::UnparserError = JSON::GeneratorError

module Kernel
  private

  # source://json//json/common.rb#679
  def JSON(object, *args); end

  # source://json//json/common.rb#657
  def j(*objs); end

  # source://json//json/common.rb#666
  def jj(*objs); end
end
