# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `steep` gem.
# Please instead update this file by running `bin/tapioca gem steep`.

# source://steep//lib/steep.rb#284
module GCCounter
  private

  # source://steep//lib/steep.rb#287
  def count_objects(title, regexp = T.unsafe(nil), skip: T.unsafe(nil)); end

  class << self
    # source://steep//lib/steep.rb#287
    def count_objects(title, regexp = T.unsafe(nil), skip: T.unsafe(nil)); end
  end
end

# source://steep//lib/steep/method_name.rb#24
class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  # source://steep//lib/steep/method_name.rb#25
  def MethodName(string); end
end

module Parser; end
module Parser::Source; end

# source://steep//lib/steep/range_extension.rb#16
class Parser::Source::Range
  # source://parser/3.3.0.2/lib/parser/source/range.rb#37
  def initialize(source_buffer, begin_pos, end_pos); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#301
  def <=>(other); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#193
  def adjust(begin_pos: T.unsafe(nil), end_pos: T.unsafe(nil)); end

  # source://steep//lib/steep/range_extension.rb#17
  def as_lsp_range; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#55
  def begin; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#30
  def begin_pos; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#92
  def column; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#114
  def column_range; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#274
  def contained?(other); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#262
  def contains?(other); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#286
  def crossing?(other); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#236
  def disjoint?(other); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#294
  def empty?; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#63
  def end; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#30
  def end_pos; end

  def eql?(_arg0); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#83
  def first_line; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#313
  def hash; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#320
  def inspect; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#220
  def intersect(other); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#141
  def is?(*what); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#209
  def join(other); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#106
  def last_column; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#99
  def last_line; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#70
  def length; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#83
  def line; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#250
  def overlaps?(other); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#201
  def resize(new_size); end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#70
  def size; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#132
  def source; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#29
  def source_buffer; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#125
  def source_line; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#148
  def to_a; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#155
  def to_range; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#173
  def to_s; end

  # source://parser/3.3.0.2/lib/parser/source/range.rb#184
  def with(begin_pos: T.unsafe(nil), end_pos: T.unsafe(nil)); end
end

# source://steep//lib/steep/range_extension.rb#1
class RBS::Location
  def initialize(_arg0, _arg1, _arg2); end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#70
  def ==(other); end

  def [](_arg0); end
  def _add_optional_child(_arg0, _arg1, _arg2); end
  def _add_optional_no_child(_arg0); end
  def _add_required_child(_arg0, _arg1, _arg2); end
  def _optional_keys; end
  def _required_keys; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#101
  def add_optional_child(name, range); end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#97
  def add_required_child(name, range); end

  def aref(_arg0); end

  # source://steep//lib/steep/range_extension.rb#2
  def as_lsp_range; end

  def buffer; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#109
  def each_optional_key(&block); end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#117
  def each_required_key(&block); end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#42
  def end_column; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#38
  def end_line; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#52
  def end_loc; end

  def end_pos; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#5
  def inspect; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#125
  def key?(name); end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#26
  def name; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#129
  def optional_key?(name); end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#58
  def range; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#133
  def required_key?(name); end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#62
  def source; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#34
  def start_column; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#30
  def start_line; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#46
  def start_loc; end

  def start_pos; end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#77
  def to_json(state = T.unsafe(nil)); end

  # source://rbs/3.4.4/lib/rbs/location_aux.rb#66
  def to_s; end

  private

  def _end_loc; end
  def _start_loc; end
  def initialize_copy(_arg0); end

  class << self
    # source://rbs/3.4.4/lib/rbs/location_aux.rb#11
    def new(buffer_ = T.unsafe(nil), start_pos_ = T.unsafe(nil), end_pos_ = T.unsafe(nil), buffer: T.unsafe(nil), start_pos: T.unsafe(nil), end_pos: T.unsafe(nil)); end

    # source://rbs/3.4.4/lib/rbs/location_aux.rb#93
    def to_string(location, default: T.unsafe(nil)); end
  end
end

# source://steep//lib/steep/version.rb#1
module Steep
  class << self
    # source://steep//lib/steep.rb#200
    def log_error(exn, message: T.unsafe(nil)); end

    # source://steep//lib/steep.rb#169
    def log_output; end

    # source://steep//lib/steep.rb#173
    def log_output=(output); end

    # source://steep//lib/steep.rb#154
    def logger; end

    # source://steep//lib/steep.rb#189
    def measure(message, level: T.unsafe(nil)); end

    # source://steep//lib/steep.rb#250
    def measure2(message, level: T.unsafe(nil)); end

    # source://steep//lib/steep.rb#162
    def new_logger(output, prev_level); end

    # source://steep//lib/steep.rb#158
    def ui_logger; end
  end
end

# source://steep//lib/steep/ast/types/helper.rb#2
module Steep::AST; end

# source://steep//lib/steep/ast/annotation.rb#3
module Steep::AST::Annotation; end

# source://steep//lib/steep/ast/annotation.rb#48
class Steep::AST::Annotation::BlockType < ::Steep::AST::Annotation::Typed; end

# source://steep//lib/steep/ast/annotation.rb#52
class Steep::AST::Annotation::BreakType < ::Steep::AST::Annotation::Typed; end

# source://steep//lib/steep/ast/annotation/collection.rb#4
class Steep::AST::Annotation::Collection
  # source://steep//lib/steep/ast/annotation/collection.rb#22
  def initialize(annotations:, factory:, context:); end

  # source://steep//lib/steep/ast/annotation/collection.rb#65
  def absolute_type(type); end

  # source://steep//lib/steep/ast/annotation/collection.rb#5
  def annotations; end

  # source://steep//lib/steep/ast/annotation/collection.rb#158
  def any?(&block); end

  # source://steep//lib/steep/ast/annotation/collection.rb#88
  def block_type; end

  # source://steep//lib/steep/ast/annotation/collection.rb#13
  def block_type_annotation; end

  # source://steep//lib/steep/ast/annotation/collection.rb#108
  def break_type; end

  # source://steep//lib/steep/ast/annotation/collection.rb#20
  def break_type_annotation; end

  # source://steep//lib/steep/ast/annotation/collection.rb#10
  def const_type_annotations; end

  # source://steep//lib/steep/ast/annotation/collection.rb#124
  def const_types; end

  # source://steep//lib/steep/ast/annotation/collection.rb#7
  def context; end

  # source://steep//lib/steep/ast/annotation/collection.rb#19
  def dynamic_annotations; end

  # source://steep//lib/steep/ast/annotation/collection.rb#6
  def factory; end

  # source://steep//lib/steep/ast/annotation/collection.rb#18
  def implement_module_annotation; end

  # source://steep//lib/steep/ast/annotation/collection.rb#166
  def include?(obj); end

  # source://steep//lib/steep/ast/annotation/collection.rb#130
  def instance_dynamics; end

  # source://steep//lib/steep/ast/annotation/collection.rb#100
  def instance_type; end

  # source://steep//lib/steep/ast/annotation/collection.rb#16
  def instance_type_annotation; end

  # source://steep//lib/steep/ast/annotation/collection.rb#11
  def ivar_type_annotations; end

  # source://steep//lib/steep/ast/annotation/collection.rb#118
  def ivar_types; end

  # source://steep//lib/steep/ast/annotation/collection.rb#112
  def lvar_types; end

  # source://steep//lib/steep/ast/annotation/collection.rb#142
  def merge_block_annotations(annotations); end

  # source://steep//lib/steep/ast/annotation/collection.rb#82
  def method_type(name); end

  # source://steep//lib/steep/ast/annotation/collection.rb#12
  def method_type_annotations; end

  # source://steep//lib/steep/ast/annotation/collection.rb#136
  def module_dynamics; end

  # source://steep//lib/steep/ast/annotation/collection.rb#104
  def module_type; end

  # source://steep//lib/steep/ast/annotation/collection.rb#17
  def module_type_annotation; end

  # source://steep//lib/steep/ast/annotation/collection.rb#92
  def return_type; end

  # source://steep//lib/steep/ast/annotation/collection.rb#14
  def return_type_annotation; end

  # source://steep//lib/steep/ast/annotation/collection.rb#96
  def self_type; end

  # source://steep//lib/steep/ast/annotation/collection.rb#15
  def self_type_annotation; end

  # source://steep//lib/steep/ast/annotation/collection.rb#162
  def size; end

  # source://steep//lib/steep/ast/annotation/collection.rb#71
  def var_type(lvar: T.unsafe(nil), ivar: T.unsafe(nil), const: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/annotation/collection.rb#9
  def var_type_annotations; end
end

# source://steep//lib/steep/ast/annotation.rb#56
class Steep::AST::Annotation::ConstType < ::Steep::AST::Annotation::Named; end

# source://steep//lib/steep/ast/annotation.rb#94
class Steep::AST::Annotation::Dynamic
  include ::Steep::AST::Annotation::Located

  # source://steep//lib/steep/ast/annotation.rb#125
  def initialize(names:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/annotation.rb#130
  def ==(other); end

  # source://steep//lib/steep/ast/annotation.rb#123
  def names; end
end

# source://steep//lib/steep/ast/annotation.rb#95
class Steep::AST::Annotation::Dynamic::Name
  # source://steep//lib/steep/ast/annotation.rb#100
  def initialize(name:, kind:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/annotation.rb#114
  def ==(other); end

  # source://steep//lib/steep/ast/annotation.rb#106
  def instance_method?; end

  # source://steep//lib/steep/ast/annotation.rb#96
  def kind; end

  # source://steep//lib/steep/ast/annotation.rb#98
  def location; end

  # source://steep//lib/steep/ast/annotation.rb#110
  def module_method?; end

  # source://steep//lib/steep/ast/annotation.rb#97
  def name; end
end

# source://steep//lib/steep/ast/annotation.rb#59
class Steep::AST::Annotation::Implements
  include ::Steep::AST::Annotation::Located

  # source://steep//lib/steep/ast/annotation.rb#84
  def initialize(name:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/annotation.rb#89
  def ==(other); end

  # source://steep//lib/steep/ast/annotation.rb#82
  def name; end
end

# source://steep//lib/steep/ast/annotation.rb#60
class Steep::AST::Annotation::Implements::Module
  # source://steep//lib/steep/ast/annotation.rb#64
  def initialize(name:, args:); end

  # source://steep//lib/steep/ast/annotation.rb#69
  def ==(other); end

  # source://steep//lib/steep/ast/annotation.rb#62
  def args; end

  # source://steep//lib/steep/ast/annotation.rb#69
  def eql?(other); end

  # source://steep//lib/steep/ast/annotation.rb#75
  def hash; end

  # source://steep//lib/steep/ast/annotation.rb#61
  def name; end
end

# source://steep//lib/steep/ast/annotation.rb#50
class Steep::AST::Annotation::InstanceType < ::Steep::AST::Annotation::Typed; end

# source://steep//lib/steep/ast/annotation.rb#57
class Steep::AST::Annotation::IvarType < ::Steep::AST::Annotation::Named; end

# source://steep//lib/steep/ast/annotation.rb#4
module Steep::AST::Annotation::Located
  # source://steep//lib/steep/ast/annotation.rb#7
  def line; end

  # source://steep//lib/steep/ast/annotation.rb#5
  def location; end
end

# source://steep//lib/steep/ast/annotation.rb#54
class Steep::AST::Annotation::MethodType < ::Steep::AST::Annotation::Named; end

# source://steep//lib/steep/ast/annotation.rb#51
class Steep::AST::Annotation::ModuleType < ::Steep::AST::Annotation::Typed; end

# source://steep//lib/steep/ast/annotation.rb#12
class Steep::AST::Annotation::Named
  include ::Steep::AST::Annotation::Located

  # source://steep//lib/steep/ast/annotation.rb#18
  def initialize(name:, type:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/annotation.rb#24
  def ==(other); end

  # source://steep//lib/steep/ast/annotation.rb#15
  def name; end

  # source://steep//lib/steep/ast/annotation.rb#16
  def type; end
end

# source://steep//lib/steep/ast/annotation.rb#47
class Steep::AST::Annotation::ReturnType < ::Steep::AST::Annotation::Typed; end

# source://steep//lib/steep/ast/annotation.rb#49
class Steep::AST::Annotation::SelfType < ::Steep::AST::Annotation::Typed; end

# source://steep//lib/steep/ast/annotation.rb#31
class Steep::AST::Annotation::Typed
  include ::Steep::AST::Annotation::Located

  # source://steep//lib/steep/ast/annotation.rb#36
  def initialize(type:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/annotation.rb#41
  def ==(other); end

  # source://steep//lib/steep/ast/annotation.rb#34
  def type; end
end

# source://steep//lib/steep/ast/annotation.rb#55
class Steep::AST::Annotation::VarType < ::Steep::AST::Annotation::Named; end

# source://steep//lib/steep/ast/builtin.rb#3
module Steep::AST::Builtin
  class << self
    # source://steep//lib/steep/ast/builtin.rb#73
    def any_type; end

    # source://steep//lib/steep/ast/builtin.rb#77
    def bool_type; end

    # source://steep//lib/steep/ast/builtin.rb#81
    def bottom_type; end

    # source://steep//lib/steep/ast/builtin.rb#97
    def false_type; end

    # source://steep//lib/steep/ast/builtin.rb#69
    def nil_type; end

    # source://steep//lib/steep/ast/builtin.rb#89
    def optional(type); end

    # source://steep//lib/steep/ast/builtin.rb#85
    def top_type; end

    # source://steep//lib/steep/ast/builtin.rb#93
    def true_type; end
  end
end

# source://steep//lib/steep/ast/builtin.rb#54
Steep::AST::Builtin::Array = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#53
Steep::AST::Builtin::BasicObject = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#58
Steep::AST::Builtin::Class = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#64
Steep::AST::Builtin::FalseClass = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#60
Steep::AST::Builtin::Float = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#56
Steep::AST::Builtin::Hash = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#59
Steep::AST::Builtin::Integer = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#57
Steep::AST::Builtin::Module = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#66
Steep::AST::Builtin::NilClass = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#52
Steep::AST::Builtin::Object = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#67
Steep::AST::Builtin::Proc = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#55
Steep::AST::Builtin::Range = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#65
Steep::AST::Builtin::Regexp = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#61
Steep::AST::Builtin::String = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#62
Steep::AST::Builtin::Symbol = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#63
Steep::AST::Builtin::TrueClass = T.let(T.unsafe(nil), Steep::AST::Builtin::Type)

# source://steep//lib/steep/ast/builtin.rb#4
class Steep::AST::Builtin::Type
  # source://steep//lib/steep/ast/builtin.rb#8
  def initialize(module_name, arity: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/builtin.rb#6
  def arity; end

  # source://steep//lib/steep/ast/builtin.rb#13
  def instance_type(*args, fill_untyped: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/builtin.rb#28
  def instance_type?(type, args: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/builtin.rb#5
  def module_name; end

  # source://steep//lib/steep/ast/builtin.rb#24
  def module_type; end

  # source://steep//lib/steep/ast/builtin.rb#43
  def module_type?(type); end
end

# source://steep//lib/steep/ast/ignore.rb#3
module Steep::AST::Ignore
  class << self
    # source://steep//lib/steep/ast/ignore.rb#93
    def parse(comment, buffer); end
  end
end

# source://steep//lib/steep/ast/ignore.rb#4
class Steep::AST::Ignore::BufferScanner
  # source://steep//lib/steep/ast/ignore.rb#7
  def initialize(location); end

  # source://steep//lib/steep/ast/ignore.rb#17
  def charpos; end

  # source://steep//lib/steep/ast/ignore.rb#33
  def eos?; end

  # source://steep//lib/steep/ast/ignore.rb#5
  def location; end

  # source://steep//lib/steep/ast/ignore.rb#13
  def offset; end

  # source://steep//lib/steep/ast/ignore.rb#21
  def scan(regexp); end

  # source://steep//lib/steep/ast/ignore.rb#5
  def scanner; end

  # source://steep//lib/steep/ast/ignore.rb#29
  def skip(regexp); end
end

# source://steep//lib/steep/ast/ignore.rb#51
class Steep::AST::Ignore::IgnoreEnd
  # source://steep//lib/steep/ast/ignore.rb#54
  def initialize(comment, location); end

  # source://steep//lib/steep/ast/ignore.rb#52
  def comment; end

  # source://steep//lib/steep/ast/ignore.rb#59
  def line; end

  # source://steep//lib/steep/ast/ignore.rb#52
  def location; end
end

# source://steep//lib/steep/ast/ignore.rb#64
class Steep::AST::Ignore::IgnoreLine
  # source://steep//lib/steep/ast/ignore.rb#67
  def initialize(comment, diagnostics, location); end

  # source://steep//lib/steep/ast/ignore.rb#65
  def comment; end

  # source://steep//lib/steep/ast/ignore.rb#77
  def ignored_diagnostics; end

  # source://steep//lib/steep/ast/ignore.rb#73
  def line; end

  # source://steep//lib/steep/ast/ignore.rb#65
  def location; end

  # source://steep//lib/steep/ast/ignore.rb#65
  def raw_diagnostics; end
end

# source://steep//lib/steep/ast/ignore.rb#38
class Steep::AST::Ignore::IgnoreStart
  # source://steep//lib/steep/ast/ignore.rb#41
  def initialize(comment, location); end

  # source://steep//lib/steep/ast/ignore.rb#39
  def comment; end

  # source://steep//lib/steep/ast/ignore.rb#46
  def line; end

  # source://steep//lib/steep/ast/ignore.rb#39
  def location; end
end

# source://steep//lib/steep/ast/node/type_assertion.rb#3
module Steep::AST::Node; end

# source://steep//lib/steep/ast/node/type_application.rb#4
class Steep::AST::Node::TypeApplication
  # source://steep//lib/steep/ast/node/type_application.rb#7
  def initialize(location); end

  # source://steep//lib/steep/ast/node/type_application.rb#19
  def line; end

  # source://steep//lib/steep/ast/node/type_application.rb#5
  def location; end

  # source://steep//lib/steep/ast/node/type_application.rb#11
  def node; end

  # source://steep//lib/steep/ast/node/type_application.rb#15
  def set_node(node); end

  # source://steep//lib/steep/ast/node/type_application.rb#23
  def source; end

  # source://steep//lib/steep/ast/node/type_application.rb#74
  def type_location; end

  # source://steep//lib/steep/ast/node/type_application.rb#70
  def type_str; end

  # source://steep//lib/steep/ast/node/type_application.rb#27
  def types(context, subtyping, type_vars); end

  # source://steep//lib/steep/ast/node/type_application.rb#61
  def types?(context, subtyping, type_vars); end

  class << self
    # source://steep//lib/steep/ast/node/type_application.rb#79
    def parse(location); end
  end
end

# source://steep//lib/steep/ast/node/type_assertion.rb#4
class Steep::AST::Node::TypeAssertion
  # source://steep//lib/steep/ast/node/type_assertion.rb#7
  def initialize(location); end

  # source://steep//lib/steep/ast/node/type_assertion.rb#15
  def line; end

  # source://steep//lib/steep/ast/node/type_assertion.rb#5
  def location; end

  # source://steep//lib/steep/ast/node/type_assertion.rb#11
  def source; end

  # source://steep//lib/steep/ast/node/type_assertion.rb#19
  def type(context, subtyping, type_vars); end

  # source://steep//lib/steep/ast/node/type_assertion.rb#48
  def type?(context, subtyping, type_vars); end

  # source://steep//lib/steep/ast/node/type_assertion.rb#63
  def type_location; end

  # source://steep//lib/steep/ast/node/type_assertion.rb#59
  def type_str; end

  # source://steep//lib/steep/ast/node/type_assertion.rb#41
  def type_syntax?; end

  class << self
    # source://steep//lib/steep/ast/node/type_assertion.rb#68
    def parse(location); end
  end
end

# source://steep//lib/steep/ast/types/helper.rb#3
module Steep::AST::Types; end

# source://steep//lib/steep/ast/types/any.rb#4
class Steep::AST::Types::Any
  include ::Steep::AST::Types::Helper::NoFreeVariables
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/any.rb#7
  def initialize(location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/any.rb#11
  def ==(other); end

  # source://steep//lib/steep/ast/types/any.rb#11
  def eql?(other); end

  # source://steep//lib/steep/ast/types/any.rb#15
  def hash; end

  # source://steep//lib/steep/ast/types/any.rb#33
  def level; end

  # source://steep//lib/steep/ast/types/any.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/any.rb#21
  def subst(s); end

  # source://steep//lib/steep/ast/types/any.rb#25
  def to_s; end

  # source://steep//lib/steep/ast/types/any.rb#37
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/boolean.rb#4
class Steep::AST::Types::Boolean
  include ::Steep::AST::Types::Helper::NoFreeVariables
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/boolean.rb#7
  def initialize(location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/boolean.rb#11
  def ==(other); end

  # source://steep//lib/steep/ast/types/boolean.rb#41
  def back_type; end

  # source://steep//lib/steep/ast/types/boolean.rb#11
  def eql?(other); end

  # source://steep//lib/steep/ast/types/boolean.rb#15
  def hash; end

  # source://steep//lib/steep/ast/types/boolean.rb#33
  def level; end

  # source://steep//lib/steep/ast/types/boolean.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/boolean.rb#21
  def subst(s); end

  # source://steep//lib/steep/ast/types/boolean.rb#25
  def to_s; end

  # source://steep//lib/steep/ast/types/boolean.rb#37
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/bot.rb#4
class Steep::AST::Types::Bot
  include ::Steep::AST::Types::Helper::NoFreeVariables
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/bot.rb#7
  def initialize(location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/bot.rb#11
  def ==(other); end

  # source://steep//lib/steep/ast/types/bot.rb#11
  def eql?(other); end

  # source://steep//lib/steep/ast/types/bot.rb#15
  def hash; end

  # source://steep//lib/steep/ast/types/bot.rb#33
  def level; end

  # source://steep//lib/steep/ast/types/bot.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/bot.rb#21
  def subst(s); end

  # source://steep//lib/steep/ast/types/bot.rb#25
  def to_s; end

  # source://steep//lib/steep/ast/types/bot.rb#37
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/class.rb#4
class Steep::AST::Types::Class
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/class.rb#7
  def initialize(location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/class.rb#19
  def ==(other); end

  # source://steep//lib/steep/ast/types/class.rb#19
  def eql?(other); end

  # source://steep//lib/steep/ast/types/class.rb#39
  def free_variables; end

  # source://steep//lib/steep/ast/types/class.rb#23
  def hash; end

  # source://steep//lib/steep/ast/types/class.rb#45
  def level; end

  # source://steep//lib/steep/ast/types/class.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/class.rb#29
  def subst(s); end

  # source://steep//lib/steep/ast/types/class.rb#15
  def to_s; end

  # source://steep//lib/steep/ast/types/class.rb#49
  def with_location(new_location); end

  class << self
    # source://steep//lib/steep/ast/types/class.rb#11
    def instance; end
  end
end

# source://steep//lib/steep/ast/types/factory.rb#4
class Steep::AST::Types::Factory
  # source://steep//lib/steep/ast/types/factory.rb#15
  def initialize(builder:); end

  # source://steep//lib/steep/ast/types/factory.rb#428
  def absolute_type(type, context:); end

  # source://steep//lib/steep/ast/types/factory.rb#435
  def absolute_type_name(type_name, context:); end

  # source://steep//lib/steep/ast/types/factory.rb#420
  def class_name?(type_name); end

  # source://steep//lib/steep/ast/types/factory.rb#322
  def deep_expand_alias(type, recursive: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/factory.rb#5
  def definition_builder; end

  # source://steep//lib/steep/ast/types/factory.rb#424
  def env; end

  # source://steep//lib/steep/ast/types/factory.rb#313
  def expand_alias(type); end

  # source://steep//lib/steep/ast/types/factory.rb#340
  def flatten_union(type, acc = T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/factory.rb#211
  def function_1(func); end

  # source://steep//lib/steep/ast/types/factory.rb#9
  def inspect; end

  # source://steep//lib/steep/ast/types/factory.rb#439
  def instance_type(type_name, args: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/factory.rb#263
  def method_type(method_type, method_decls:); end

  # source://steep//lib/steep/ast/types/factory.rb#289
  def method_type_1(method_type); end

  # source://steep//lib/steep/ast/types/factory.rb#416
  def module_name?(type_name); end

  # source://steep//lib/steep/ast/types/factory.rb#474
  def normalize_type(type); end

  # source://steep//lib/steep/ast/types/factory.rb#227
  def params(type); end

  # source://steep//lib/steep/ast/types/factory.rb#351
  def partition_union(type); end

  # source://steep//lib/steep/ast/types/factory.rb#454
  def try_instance_type(type); end

  # source://steep//lib/steep/ast/types/factory.rb#465
  def try_singleton_type(type); end

  # source://steep//lib/steep/ast/types/factory.rb#39
  def type(type); end

  # source://steep//lib/steep/ast/types/factory.rb#126
  def type_1(type); end

  # source://steep//lib/steep/ast/types/factory.rb#33
  def type_1_opt(type); end

  # source://steep//lib/steep/ast/types/factory.rb#7
  def type_cache; end

  # source://steep//lib/steep/ast/types/factory.rb#23
  def type_name_resolver; end

  # source://steep//lib/steep/ast/types/factory.rb#27
  def type_opt(type); end

  # source://steep//lib/steep/ast/types/factory.rb#238
  def type_param(type_param); end

  # source://steep//lib/steep/ast/types/factory.rb#247
  def type_param_1(type_param); end

  # source://steep//lib/steep/ast/types/factory.rb#304
  def unfold(type_name, args); end

  # source://steep//lib/steep/ast/types/factory.rb#390
  def unwrap_optional(type); end
end

# source://steep//lib/steep/ast/types/helper.rb#4
module Steep::AST::Types::Helper; end

# source://steep//lib/steep/ast/types/helper.rb#5
module Steep::AST::Types::Helper::ChildrenLevel
  # source://steep//lib/steep/ast/types/helper.rb#6
  def level_of_children(children); end
end

# source://steep//lib/steep/ast/types/helper.rb#26
module Steep::AST::Types::Helper::NoChild
  # source://steep//lib/steep/ast/types/helper.rb#27
  def each_child(&block); end
end

# source://steep//lib/steep/ast/types/helper.rb#20
module Steep::AST::Types::Helper::NoFreeVariables
  # source://steep//lib/steep/ast/types/helper.rb#21
  def free_variables; end
end

# source://steep//lib/steep/ast/types/instance.rb#4
class Steep::AST::Types::Instance
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/instance.rb#7
  def initialize(location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/instance.rb#15
  def ==(other); end

  # source://steep//lib/steep/ast/types/instance.rb#15
  def eql?(other); end

  # source://steep//lib/steep/ast/types/instance.rb#34
  def free_variables; end

  # source://steep//lib/steep/ast/types/instance.rb#19
  def hash; end

  # source://steep//lib/steep/ast/types/instance.rb#44
  def level; end

  # source://steep//lib/steep/ast/types/instance.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/instance.rb#25
  def subst(s); end

  # source://steep//lib/steep/ast/types/instance.rb#40
  def to_s; end

  # source://steep//lib/steep/ast/types/instance.rb#48
  def with_location(new_location); end

  class << self
    # source://steep//lib/steep/ast/types/instance.rb#11
    def instance; end
  end
end

# source://steep//lib/steep/ast/types/intersection.rb#4
class Steep::AST::Types::Intersection
  include ::Steep::AST::Types::Helper::ChildrenLevel

  # source://steep//lib/steep/ast/types/intersection.rb#8
  def initialize(types:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/intersection.rb#45
  def ==(other); end

  # source://steep//lib/steep/ast/types/intersection.rb#75
  def each_child(&block); end

  # source://steep//lib/steep/ast/types/intersection.rb#45
  def eql?(other); end

  # source://steep//lib/steep/ast/types/intersection.rb#63
  def free_variables; end

  # source://steep//lib/steep/ast/types/intersection.rb#49
  def hash; end

  # source://steep//lib/steep/ast/types/intersection.rb#83
  def level; end

  # source://steep//lib/steep/ast/types/intersection.rb#6
  def location; end

  # source://steep//lib/steep/ast/types/intersection.rb#55
  def subst(s); end

  # source://steep//lib/steep/ast/types/intersection.rb#59
  def to_s; end

  # source://steep//lib/steep/ast/types/intersection.rb#5
  def types; end

  # source://steep//lib/steep/ast/types/intersection.rb#87
  def with_location(new_location); end

  class << self
    # source://steep//lib/steep/ast/types/intersection.rb#13
    def build(types:, location: T.unsafe(nil)); end
  end
end

# source://steep//lib/steep/ast/types/literal.rb#4
class Steep::AST::Types::Literal
  include ::Steep::AST::Types::Helper::NoFreeVariables
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/literal.rb#8
  def initialize(value:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/literal.rb#13
  def ==(other); end

  # source://steep//lib/steep/ast/types/literal.rb#44
  def back_type; end

  # source://steep//lib/steep/ast/types/literal.rb#13
  def eql?(other); end

  # source://steep//lib/steep/ast/types/literal.rb#18
  def hash; end

  # source://steep//lib/steep/ast/types/literal.rb#36
  def level; end

  # source://steep//lib/steep/ast/types/literal.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/literal.rb#24
  def subst(s); end

  # source://steep//lib/steep/ast/types/literal.rb#28
  def to_s; end

  # source://steep//lib/steep/ast/types/literal.rb#6
  def value; end

  # source://steep//lib/steep/ast/types/literal.rb#40
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/logic.rb#4
module Steep::AST::Types::Logic; end

# source://steep//lib/steep/ast/types/logic.rb#65
class Steep::AST::Types::Logic::ArgEqualsReceiver < ::Steep::AST::Types::Logic::Base
  # source://steep//lib/steep/ast/types/logic.rb#66
  def initialize(location: T.unsafe(nil)); end
end

# source://steep//lib/steep/ast/types/logic.rb#71
class Steep::AST::Types::Logic::ArgIsAncestor < ::Steep::AST::Types::Logic::Base
  # source://steep//lib/steep/ast/types/logic.rb#72
  def initialize(location: T.unsafe(nil)); end
end

# source://steep//lib/steep/ast/types/logic.rb#59
class Steep::AST::Types::Logic::ArgIsReceiver < ::Steep::AST::Types::Logic::Base
  # source://steep//lib/steep/ast/types/logic.rb#60
  def initialize(location: T.unsafe(nil)); end
end

# source://steep//lib/steep/ast/types/logic.rb#5
class Steep::AST::Types::Logic::Base
  include ::Steep::AST::Types::Helper::NoFreeVariables
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/logic.rb#20
  def ==(other); end

  # source://steep//lib/steep/ast/types/logic.rb#20
  def eql?(other); end

  # source://steep//lib/steep/ast/types/logic.rb#16
  def hash; end

  # source://steep//lib/steep/ast/types/logic.rb#30
  def level; end

  # source://steep//lib/steep/ast/types/logic.rb#6
  def location; end

  # source://steep//lib/steep/ast/types/logic.rb#8
  def subst(s); end

  # source://steep//lib/steep/ast/types/logic.rb#26
  def to_s; end
end

# source://steep//lib/steep/ast/types/logic.rb#77
class Steep::AST::Types::Logic::Env < ::Steep::AST::Types::Logic::Base
  # source://steep//lib/steep/ast/types/logic.rb#80
  def initialize(truthy:, falsy:, type:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/logic.rb#86
  def ==(other); end

  # source://steep//lib/steep/ast/types/logic.rb#86
  def eql?(other); end

  # source://steep//lib/steep/ast/types/logic.rb#78
  def falsy; end

  # source://steep//lib/steep/ast/types/logic.rb#92
  def hash; end

  # source://steep//lib/steep/ast/types/logic.rb#96
  def inspect; end

  # source://steep//lib/steep/ast/types/logic.rb#96
  def to_s; end

  # source://steep//lib/steep/ast/types/logic.rb#78
  def truthy; end

  # source://steep//lib/steep/ast/types/logic.rb#78
  def type; end
end

# source://steep//lib/steep/ast/types/logic.rb#35
class Steep::AST::Types::Logic::Not < ::Steep::AST::Types::Logic::Base
  # source://steep//lib/steep/ast/types/logic.rb#36
  def initialize(location: T.unsafe(nil)); end
end

# source://steep//lib/steep/ast/types/logic.rb#53
class Steep::AST::Types::Logic::ReceiverIsArg < ::Steep::AST::Types::Logic::Base
  # source://steep//lib/steep/ast/types/logic.rb#54
  def initialize(location: T.unsafe(nil)); end
end

# source://steep//lib/steep/ast/types/logic.rb#41
class Steep::AST::Types::Logic::ReceiverIsNil < ::Steep::AST::Types::Logic::Base
  # source://steep//lib/steep/ast/types/logic.rb#42
  def initialize(location: T.unsafe(nil)); end
end

# source://steep//lib/steep/ast/types/logic.rb#47
class Steep::AST::Types::Logic::ReceiverIsNotNil < ::Steep::AST::Types::Logic::Base
  # source://steep//lib/steep/ast/types/logic.rb#48
  def initialize(location: T.unsafe(nil)); end
end

# source://steep//lib/steep/ast/types/name.rb#4
module Steep::AST::Types::Name; end

# source://steep//lib/steep/ast/types/name.rb#134
class Steep::AST::Types::Name::Alias < ::Steep::AST::Types::Name::Applying; end

# source://steep//lib/steep/ast/types/name.rb#29
class Steep::AST::Types::Name::Applying < ::Steep::AST::Types::Name::Base
  include ::Steep::AST::Types::Helper::ChildrenLevel

  # source://steep//lib/steep/ast/types/name.rb#32
  def initialize(name:, args:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/name.rb#37
  def ==(other); end

  # source://steep//lib/steep/ast/types/name.rb#30
  def args; end

  # source://steep//lib/steep/ast/types/name.rb#81
  def each_child(&block); end

  # source://steep//lib/steep/ast/types/name.rb#37
  def eql?(other); end

  # source://steep//lib/steep/ast/types/name.rb#73
  def free_variables; end

  # source://steep//lib/steep/ast/types/name.rb#45
  def hash; end

  # source://steep//lib/steep/ast/types/name.rb#91
  def level; end

  # source://steep//lib/steep/ast/types/name.rb#95
  def map_type(&block); end

  # source://steep//lib/steep/ast/types/name.rb#61
  def subst(s); end

  # source://steep//lib/steep/ast/types/name.rb#49
  def to_s; end

  # source://steep//lib/steep/ast/types/name.rb#57
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/name.rb#5
class Steep::AST::Types::Name::Base
  include ::Steep::AST::Types::Helper::NoFreeVariables

  # source://steep//lib/steep/ast/types/name.rb#9
  def initialize(name:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/name.rb#20
  def level; end

  # source://steep//lib/steep/ast/types/name.rb#6
  def location; end

  # source://steep//lib/steep/ast/types/name.rb#24
  def map_type(&block); end

  # source://steep//lib/steep/ast/types/name.rb#7
  def name; end

  # source://steep//lib/steep/ast/types/name.rb#16
  def subst(s); end
end

# source://steep//lib/steep/ast/types/name.rb#125
class Steep::AST::Types::Name::Instance < ::Steep::AST::Types::Name::Applying
  # source://steep//lib/steep/ast/types/name.rb#126
  def to_module; end
end

# source://steep//lib/steep/ast/types/name.rb#131
class Steep::AST::Types::Name::Interface < ::Steep::AST::Types::Name::Applying; end

# source://steep//lib/steep/ast/types/name.rb#102
class Steep::AST::Types::Name::Singleton < ::Steep::AST::Types::Name::Base
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/name.rb#103
  def ==(other); end

  # source://steep//lib/steep/ast/types/name.rb#103
  def eql?(other); end

  # source://steep//lib/steep/ast/types/name.rb#110
  def hash; end

  # source://steep//lib/steep/ast/types/name.rb#114
  def to_s; end

  # source://steep//lib/steep/ast/types/name.rb#118
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/nil.rb#4
class Steep::AST::Types::Nil
  include ::Steep::AST::Types::Helper::NoFreeVariables
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/nil.rb#7
  def initialize(location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/nil.rb#11
  def ==(other); end

  # source://steep//lib/steep/ast/types/nil.rb#41
  def back_type; end

  # source://steep//lib/steep/ast/types/nil.rb#11
  def eql?(other); end

  # source://steep//lib/steep/ast/types/nil.rb#15
  def hash; end

  # source://steep//lib/steep/ast/types/nil.rb#33
  def level; end

  # source://steep//lib/steep/ast/types/nil.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/nil.rb#21
  def subst(s); end

  # source://steep//lib/steep/ast/types/nil.rb#25
  def to_s; end

  # source://steep//lib/steep/ast/types/nil.rb#37
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/proc.rb#4
class Steep::AST::Types::Proc
  include ::Steep::AST::Types::Helper::ChildrenLevel

  # source://steep//lib/steep/ast/types/proc.rb#10
  def initialize(type:, block:, self_type:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/proc.rb#17
  def ==(other); end

  # source://steep//lib/steep/ast/types/proc.rb#95
  def back_type; end

  # source://steep//lib/steep/ast/types/proc.rb#8
  def block; end

  # source://steep//lib/steep/ast/types/proc.rb#101
  def block_required?; end

  # source://steep//lib/steep/ast/types/proc.rb#109
  def each_child(&block); end

  # source://steep//lib/steep/ast/types/proc.rb#17
  def eql?(other); end

  # source://steep//lib/steep/ast/types/proc.rb#49
  def free_variables; end

  # source://steep//lib/steep/ast/types/proc.rb#21
  def hash; end

  # source://steep//lib/steep/ast/types/proc.rb#59
  def level; end

  # source://steep//lib/steep/ast/types/proc.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/proc.rb#75
  def map_type(&block); end

  # source://steep//lib/steep/ast/types/proc.rb#84
  def one_arg?; end

  # source://steep//lib/steep/ast/types/proc.rb#7
  def self_type; end

  # source://steep//lib/steep/ast/types/proc.rb#27
  def subst(s); end

  # source://steep//lib/steep/ast/types/proc.rb#36
  def to_s; end

  # source://steep//lib/steep/ast/types/proc.rb#6
  def type; end

  # source://steep//lib/steep/ast/types/proc.rb#71
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/record.rb#4
class Steep::AST::Types::Record
  include ::Steep::AST::Types::Helper::ChildrenLevel

  # source://steep//lib/steep/ast/types/record.rb#8
  def initialize(elements:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/record.rb#13
  def ==(other); end

  # source://steep//lib/steep/ast/types/record.rb#45
  def each_child(&block); end

  # source://steep//lib/steep/ast/types/record.rb#6
  def elements; end

  # source://steep//lib/steep/ast/types/record.rb#13
  def eql?(other); end

  # source://steep//lib/steep/ast/types/record.rb#35
  def free_variables; end

  # source://steep//lib/steep/ast/types/record.rb#17
  def hash; end

  # source://steep//lib/steep/ast/types/record.rb#53
  def level; end

  # source://steep//lib/steep/ast/types/record.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/record.rb#23
  def subst(s); end

  # source://steep//lib/steep/ast/types/record.rb#28
  def to_s; end

  # source://steep//lib/steep/ast/types/record.rb#57
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/self.rb#4
class Steep::AST::Types::Self
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/self.rb#7
  def initialize(location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/self.rb#15
  def ==(other); end

  # source://steep//lib/steep/ast/types/self.rb#15
  def eql?(other); end

  # source://steep//lib/steep/ast/types/self.rb#41
  def free_variables; end

  # source://steep//lib/steep/ast/types/self.rb#19
  def hash; end

  # source://steep//lib/steep/ast/types/self.rb#45
  def level; end

  # source://steep//lib/steep/ast/types/self.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/self.rb#31
  def subst(s); end

  # source://steep//lib/steep/ast/types/self.rb#25
  def to_s; end

  # source://steep//lib/steep/ast/types/self.rb#49
  def with_location(new_location); end

  class << self
    # source://steep//lib/steep/ast/types/self.rb#11
    def instance; end
  end
end

# source://steep//lib/steep/ast/types/top.rb#4
class Steep::AST::Types::Top
  include ::Steep::AST::Types::Helper::NoFreeVariables
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/top.rb#7
  def initialize(location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/top.rb#11
  def ==(other); end

  # source://steep//lib/steep/ast/types/top.rb#11
  def eql?(other); end

  # source://steep//lib/steep/ast/types/top.rb#15
  def hash; end

  # source://steep//lib/steep/ast/types/top.rb#33
  def level; end

  # source://steep//lib/steep/ast/types/top.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/top.rb#21
  def subst(s); end

  # source://steep//lib/steep/ast/types/top.rb#25
  def to_s; end

  # source://steep//lib/steep/ast/types/top.rb#37
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/tuple.rb#4
class Steep::AST::Types::Tuple
  include ::Steep::AST::Types::Helper::ChildrenLevel

  # source://steep//lib/steep/ast/types/tuple.rb#8
  def initialize(types:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/tuple.rb#13
  def ==(other); end

  # source://steep//lib/steep/ast/types/tuple.rb#41
  def each_child(&block); end

  # source://steep//lib/steep/ast/types/tuple.rb#13
  def eql?(other); end

  # source://steep//lib/steep/ast/types/tuple.rb#33
  def free_variables; end

  # source://steep//lib/steep/ast/types/tuple.rb#18
  def hash; end

  # source://steep//lib/steep/ast/types/tuple.rb#49
  def level; end

  # source://steep//lib/steep/ast/types/tuple.rb#6
  def location; end

  # source://steep//lib/steep/ast/types/tuple.rb#24
  def subst(s); end

  # source://steep//lib/steep/ast/types/tuple.rb#29
  def to_s; end

  # source://steep//lib/steep/ast/types/tuple.rb#5
  def types; end

  # source://steep//lib/steep/ast/types/tuple.rb#53
  def with_location(new_location); end
end

# source://steep//lib/steep/ast/types/union.rb#4
class Steep::AST::Types::Union
  include ::Steep::AST::Types::Helper::ChildrenLevel

  # source://steep//lib/steep/ast/types/union.rb#8
  def initialize(types:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/union.rb#48
  def ==(other); end

  # source://steep//lib/steep/ast/types/union.rb#75
  def each_child(&block); end

  # source://steep//lib/steep/ast/types/union.rb#48
  def eql?(other); end

  # source://steep//lib/steep/ast/types/union.rb#67
  def free_variables; end

  # source://steep//lib/steep/ast/types/union.rb#53
  def hash; end

  # source://steep//lib/steep/ast/types/union.rb#85
  def level; end

  # source://steep//lib/steep/ast/types/union.rb#6
  def location; end

  # source://steep//lib/steep/ast/types/union.rb#59
  def subst(s); end

  # source://steep//lib/steep/ast/types/union.rb#63
  def to_s; end

  # source://steep//lib/steep/ast/types/union.rb#5
  def types; end

  # source://steep//lib/steep/ast/types/union.rb#89
  def with_location(new_location); end

  class << self
    # source://steep//lib/steep/ast/types/union.rb#13
    def build(types:, location: T.unsafe(nil)); end
  end
end

# source://steep//lib/steep/ast/types/var.rb#4
class Steep::AST::Types::Var
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/var.rb#8
  def initialize(name:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/var.rb#13
  def ==(other); end

  # source://steep//lib/steep/ast/types/var.rb#13
  def eql?(other); end

  # source://steep//lib/steep/ast/types/var.rb#51
  def free_variables; end

  # source://steep//lib/steep/ast/types/var.rb#18
  def hash; end

  # source://steep//lib/steep/ast/types/var.rb#57
  def level; end

  # source://steep//lib/steep/ast/types/var.rb#6
  def location; end

  # source://steep//lib/steep/ast/types/var.rb#5
  def name; end

  # source://steep//lib/steep/ast/types/var.rb#43
  def subst(s); end

  # source://steep//lib/steep/ast/types/var.rb#39
  def to_s; end

  # source://steep//lib/steep/ast/types/var.rb#61
  def update(name: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/var.rb#68
  def with_location(new_location); end

  class << self
    # source://steep//lib/steep/ast/types/var.rb#35
    def fresh(name, location: T.unsafe(nil)); end

    # source://steep//lib/steep/ast/types/var.rb#24
    def fresh_name(name); end
  end
end

# source://steep//lib/steep/ast/types/void.rb#4
class Steep::AST::Types::Void
  include ::Steep::AST::Types::Helper::NoFreeVariables
  include ::Steep::AST::Types::Helper::NoChild

  # source://steep//lib/steep/ast/types/void.rb#7
  def initialize(location: T.unsafe(nil)); end

  # source://steep//lib/steep/ast/types/void.rb#11
  def ==(other); end

  # source://steep//lib/steep/ast/types/void.rb#11
  def eql?(other); end

  # source://steep//lib/steep/ast/types/void.rb#15
  def hash; end

  # source://steep//lib/steep/ast/types/void.rb#33
  def level; end

  # source://steep//lib/steep/ast/types/void.rb#5
  def location; end

  # source://steep//lib/steep/ast/types/void.rb#21
  def subst(s); end

  # source://steep//lib/steep/ast/types/void.rb#25
  def to_s; end

  # source://steep//lib/steep/ast/types/void.rb#37
  def with_location(new_location); end
end

# source://steep//lib/steep/annotation_parser.rb#2
class Steep::AnnotationParser
  # source://steep//lib/steep/annotation_parser.rb#15
  def initialize(factory:); end

  # source://steep//lib/steep/annotation_parser.rb#13
  def factory; end

  # source://steep//lib/steep/annotation_parser.rb#72
  def keyword_and_type(keyword); end

  # source://steep//lib/steep/annotation_parser.rb#68
  def keyword_subject_type(keyword, name); end

  # source://steep//lib/steep/annotation_parser.rb#76
  def parse(src, location:); end

  # source://steep//lib/steep/annotation_parser.rb#47
  def parse_type(match, name = T.unsafe(nil), location:); end
end

# source://steep//lib/steep/annotation_parser.rb#42
Steep::AnnotationParser::COLON = T.let(T.unsafe(nil), Regexp)

# source://steep//lib/steep/annotation_parser.rb#7
Steep::AnnotationParser::CONST_NAME = T.let(T.unsafe(nil), Regexp)

# source://steep//lib/steep/annotation_parser.rb#10
Steep::AnnotationParser::DYNAMIC_NAME = T.let(T.unsafe(nil), Regexp)

# source://steep//lib/steep/annotation_parser.rb#11
Steep::AnnotationParser::IVAR_NAME = T.let(T.unsafe(nil), Regexp)

# source://steep//lib/steep/annotation_parser.rb#4
Steep::AnnotationParser::METHOD_NAME = T.let(T.unsafe(nil), Regexp)

# source://steep//lib/steep/annotation_parser.rb#44
Steep::AnnotationParser::PARAM = T.let(T.unsafe(nil), Regexp)

# source://steep//lib/steep/annotation_parser.rb#19
class Steep::AnnotationParser::SyntaxError < ::StandardError
  # source://steep//lib/steep/annotation_parser.rb#23
  def initialize(source:, location:, exn: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://steep//lib/steep/annotation_parser.rb#21
  def location; end

  # source://steep//lib/steep/annotation_parser.rb#20
  def source; end
end

# source://steep//lib/steep/annotation_parser.rb#41
Steep::AnnotationParser::TYPE = T.let(T.unsafe(nil), Regexp)

# source://steep//lib/steep/annotation_parser.rb#45
Steep::AnnotationParser::TYPE_PARAMS = T.let(T.unsafe(nil), Regexp)

# source://steep//lib/steep/annotation_parser.rb#3
Steep::AnnotationParser::VAR_NAME = T.let(T.unsafe(nil), Regexp)

# source://steep//lib/steep/diagnostic/helper.rb#2
module Steep::Diagnostic; end

# source://steep//lib/steep/diagnostic/helper.rb#3
module Steep::Diagnostic::Helper
  # source://steep//lib/steep/diagnostic/helper.rb#4
  def error_name; end

  # source://steep//lib/steep/diagnostic/helper.rb#9
  def full_message; end
end

# source://steep//lib/steep/diagnostic/lsp_formatter.rb#3
class Steep::Diagnostic::LSPFormatter
  # source://steep//lib/steep/diagnostic/lsp_formatter.rb#14
  def initialize(config = T.unsafe(nil), default_severity: T.unsafe(nil)); end

  # source://steep//lib/steep/diagnostic/lsp_formatter.rb#6
  def config; end

  # source://steep//lib/steep/diagnostic/lsp_formatter.rb#7
  def default_severity; end

  # source://steep//lib/steep/diagnostic/lsp_formatter.rb#40
  def format(diagnostic); end

  # source://steep//lib/steep/diagnostic/lsp_formatter.rb#55
  def severity_for(diagnostic); end

  # source://steep//lib/steep/diagnostic/lsp_formatter.rb#25
  def validate_class(klass); end

  # source://steep//lib/steep/diagnostic/lsp_formatter.rb#31
  def validate_severity(klass, severity); end
end

# source://steep//lib/steep/diagnostic/lsp_formatter.rb#9
Steep::Diagnostic::LSPFormatter::ERROR = T.let(T.unsafe(nil), Symbol)

# source://steep//lib/steep/diagnostic/lsp_formatter.rb#12
Steep::Diagnostic::LSPFormatter::HINT = T.let(T.unsafe(nil), Symbol)

# source://steep//lib/steep/diagnostic/lsp_formatter.rb#11
Steep::Diagnostic::LSPFormatter::INFORMATION = T.let(T.unsafe(nil), Symbol)

# source://steep//lib/steep/diagnostic/lsp_formatter.rb#4
Steep::Diagnostic::LSPFormatter::LSP = LanguageServer::Protocol

# source://steep//lib/steep/diagnostic/lsp_formatter.rb#10
Steep::Diagnostic::LSPFormatter::WARNING = T.let(T.unsafe(nil), Symbol)

# source://steep//lib/steep/diagnostic/ruby.rb#3
module Steep::Diagnostic::Ruby
  class << self
    # source://steep//lib/steep/diagnostic/ruby.rb#1019
    def all_error; end

    # source://steep//lib/steep/diagnostic/ruby.rb#1025
    def default; end

    # source://steep//lib/steep/diagnostic/ruby.rb#1143
    def lenient; end

    # source://steep//lib/steep/diagnostic/ruby.rb#1202
    def silent; end

    # source://steep//lib/steep/diagnostic/ruby.rb#1084
    def strict; end
  end
end

# source://steep//lib/steep/diagnostic/ruby.rb#1013
Steep::Diagnostic::Ruby::ALL = T.let(T.unsafe(nil), Array)

# source://steep//lib/steep/diagnostic/ruby.rb#262
class Steep::Diagnostic::Ruby::ArgumentTypeMismatch < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#270
  def initialize(node:, expected:, actual:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#265
  def actual; end

  # source://steep//lib/steep/diagnostic/ruby.rb#264
  def expected; end

  # source://steep//lib/steep/diagnostic/ruby.rb#277
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#263
  def node; end

  # source://steep//lib/steep/diagnostic/ruby.rb#266
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#4
class Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Helper

  # source://steep//lib/steep/diagnostic/ruby.rb#10
  def initialize(node:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/diagnostic/ruby.rb#19
  def detail_lines; end

  # source://steep//lib/steep/diagnostic/ruby.rb#23
  def diagnostic_code; end

  # source://steep//lib/steep/diagnostic/ruby.rb#15
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#8
  def location; end

  # source://steep//lib/steep/diagnostic/ruby.rb#7
  def node; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#389
class Steep::Diagnostic::Ruby::BlockBodyTypeMismatch < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#396
  def initialize(node:, expected:, actual:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#391
  def actual; end

  # source://steep//lib/steep/diagnostic/ruby.rb#390
  def expected; end

  # source://steep//lib/steep/diagnostic/ruby.rb#403
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#392
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#370
class Steep::Diagnostic::Ruby::BlockTypeMismatch < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#377
  def initialize(node:, expected:, actual:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#372
  def actual; end

  # source://steep//lib/steep/diagnostic/ruby.rb#371
  def expected; end

  # source://steep//lib/steep/diagnostic/ruby.rb#384
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#373
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#408
class Steep::Diagnostic::Ruby::BreakTypeMismatch < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#415
  def initialize(node:, expected:, actual:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#410
  def actual; end

  # source://steep//lib/steep/diagnostic/ruby.rb#409
  def expected; end

  # source://steep//lib/steep/diagnostic/ruby.rb#422
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#411
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#491
class Steep::Diagnostic::Ruby::DifferentMethodParameterKind < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#495
  def initialize(method_param:, method_type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#501
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#492
  def method_param; end

  # source://steep//lib/steep/diagnostic/ruby.rb#493
  def method_type; end
end

# source://steep//lib/steep/diagnostic/deprecated/else_on_exhaustive_case.rb#6
class Steep::Diagnostic::Ruby::ElseOnExhaustiveCase < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/deprecated/else_on_exhaustive_case.rb#9
  def initialize(node:, type:); end

  # source://steep//lib/steep/diagnostic/deprecated/else_on_exhaustive_case.rb#14
  def header_line; end

  # source://steep//lib/steep/diagnostic/deprecated/else_on_exhaustive_case.rb#7
  def type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#693
class Steep::Diagnostic::Ruby::FallbackAny < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#694
  def initialize(node:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#698
  def header_line; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#890
class Steep::Diagnostic::Ruby::FalseAssertion < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#893
  def initialize(node:, assertion_type:, node_type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#891
  def assertion_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#899
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#891
  def node; end

  # source://steep//lib/steep/diagnostic/ruby.rb#891
  def node_type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#427
class Steep::Diagnostic::Ruby::ImplicitBreakValueMismatch < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#433
  def initialize(node:, jump_type:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#439
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#428
  def jump_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#429
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#726
class Steep::Diagnostic::Ruby::IncompatibleAnnotation < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#731
  def initialize(node:, var_name:, result:, relation:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#740
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#729
  def relation; end

  # source://steep//lib/steep/diagnostic/ruby.rb#728
  def result; end

  # source://steep//lib/steep/diagnostic/ruby.rb#727
  def var_name; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#949
class Steep::Diagnostic::Ruby::IncompatibleArgumentForwarding < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter2

  # source://steep//lib/steep/diagnostic/ruby.rb#952
  def initialize(method_name:, node:, result:, params_pair: T.unsafe(nil), block_pair: T.unsafe(nil)); end

  # source://steep//lib/steep/diagnostic/ruby.rb#950
  def block_pair; end

  # source://steep//lib/steep/diagnostic/ruby.rb#962
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#950
  def method_name; end

  # source://steep//lib/steep/diagnostic/ruby.rb#950
  def params_pair; end

  # source://steep//lib/steep/diagnostic/ruby.rb#950
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#109
class Steep::Diagnostic::Ruby::IncompatibleAssignment < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#116
  def initialize(node:, lhs_type:, rhs_type:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#123
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#110
  def lhs_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#112
  def result; end

  # source://steep//lib/steep/diagnostic/ruby.rb#111
  def rhs_type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#506
class Steep::Diagnostic::Ruby::IncompatibleMethodTypeAnnotation < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#513
  def initialize(node:, interface_method:, annotation_method:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#508
  def annotation_method; end

  # source://steep//lib/steep/diagnostic/ruby.rb#507
  def interface_method; end

  # source://steep//lib/steep/diagnostic/ruby.rb#509
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#745
class Steep::Diagnostic::Ruby::IncompatibleTypeCase < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#750
  def initialize(node:, var_name:, result:, relation:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#759
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#748
  def relation; end

  # source://steep//lib/steep/diagnostic/ruby.rb#747
  def result; end

  # source://steep//lib/steep/diagnostic/ruby.rb#746
  def var_name; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#201
class Steep::Diagnostic::Ruby::InsufficientKeywordArguments < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#207
  def initialize(node:, params:, missing_keywords:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#227
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#203
  def method_name; end

  # source://steep//lib/steep/diagnostic/ruby.rb#204
  def method_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#205
  def missing_keywords; end

  # source://steep//lib/steep/diagnostic/ruby.rb#202
  def node; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#152
class Steep::Diagnostic::Ruby::InsufficientPositionalArguments < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#156
  def initialize(node:, params:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#174
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#153
  def node; end

  # source://steep//lib/steep/diagnostic/ruby.rb#154
  def params; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#918
class Steep::Diagnostic::Ruby::InsufficientTypeArgument < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#921
  def initialize(node:, type_args:, method_type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#927
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#919
  def method_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#919
  def type_args; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#1000
class Steep::Diagnostic::Ruby::InvalidIgnoreComment < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#1003
  def initialize(comment:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#1001
  def comment; end

  # source://steep//lib/steep/diagnostic/ruby.rb#1008
  def header_line; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#457
class Steep::Diagnostic::Ruby::MethodArityMismatch < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#460
  def initialize(node:, method_type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#471
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#458
  def method_type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#541
class Steep::Diagnostic::Ruby::MethodBodyTypeMismatch < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#548
  def initialize(node:, expected:, actual:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#543
  def actual; end

  # source://steep//lib/steep/diagnostic/ruby.rb#542
  def expected; end

  # source://steep//lib/steep/diagnostic/ruby.rb#555
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#544
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#601
class Steep::Diagnostic::Ruby::MethodDefinitionMissing < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#606
  def initialize(node:, module_name:, kind:, missing_method:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#613
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#603
  def kind; end

  # source://steep//lib/steep/diagnostic/ruby.rb#604
  def missing_method; end

  # source://steep//lib/steep/diagnostic/ruby.rb#602
  def module_name; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#476
class Steep::Diagnostic::Ruby::MethodParameterMismatch < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#480
  def initialize(method_param:, method_type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#486
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#477
  def method_param; end

  # source://steep//lib/steep/diagnostic/ruby.rb#478
  def method_type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#522
class Steep::Diagnostic::Ruby::MethodReturnTypeAnnotationMismatch < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#529
  def initialize(node:, method_type:, annotation_type:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#524
  def annotation_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#536
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#523
  def method_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#525
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#809
class Steep::Diagnostic::Ruby::MultipleAssignmentConversionError < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#812
  def initialize(node:, original_type:, returned_type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#820
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#810
  def original_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#810
  def returned_type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#282
class Steep::Diagnostic::Ruby::NoMethod < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#286
  def initialize(node:, type:, method:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#301
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#284
  def method; end

  # source://steep//lib/steep/diagnostic/ruby.rb#283
  def type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#974
class Steep::Diagnostic::Ruby::ProcHintIgnored < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#977
  def initialize(hint_type:, node:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#975
  def block_node; end

  # source://steep//lib/steep/diagnostic/ruby.rb#982
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#975
  def hint_type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#796
class Steep::Diagnostic::Ruby::ProcTypeExpected < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#799
  def initialize(node:, type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#804
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#797
  def type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#987
class Steep::Diagnostic::Ruby::RBSError < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#990
  def initialize(error:, node:, location:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#988
  def error; end

  # source://steep//lib/steep/diagnostic/ruby.rb#995
  def header_line; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#357
class Steep::Diagnostic::Ruby::RequiredBlockMissing < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#360
  def initialize(node:, method_type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#365
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#358
  def method_type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#28
module Steep::Diagnostic::Ruby::ResultPrinter
  # source://steep//lib/steep/diagnostic/ruby.rb#48
  def detail_lines; end

  # source://steep//lib/steep/diagnostic/ruby.rb#29
  def relation_message(relation); end
end

# source://steep//lib/steep/diagnostic/ruby.rb#64
module Steep::Diagnostic::Ruby::ResultPrinter2
  # source://steep//lib/steep/diagnostic/ruby.rb#93
  def detail_lines; end

  # source://steep//lib/steep/diagnostic/ruby.rb#65
  def result_line(result); end
end

# source://steep//lib/steep/diagnostic/ruby.rb#306
class Steep::Diagnostic::Ruby::ReturnTypeMismatch < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#313
  def initialize(node:, expected:, actual:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#308
  def actual; end

  # source://steep//lib/steep/diagnostic/ruby.rb#307
  def expected; end

  # source://steep//lib/steep/diagnostic/ruby.rb#320
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#309
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#560
class Steep::Diagnostic::Ruby::SetterBodyTypeMismatch < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#565
  def initialize(node:, expected:, actual:, result:, method_name:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#561
  def actual; end

  # source://steep//lib/steep/diagnostic/ruby.rb#561
  def expected; end

  # source://steep//lib/steep/diagnostic/ruby.rb#573
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#561
  def method_name; end

  # source://steep//lib/steep/diagnostic/ruby.rb#561
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#325
class Steep::Diagnostic::Ruby::SetterReturnTypeMismatch < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#330
  def initialize(node:, method_name:, expected:, actual:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#326
  def actual; end

  # source://steep//lib/steep/diagnostic/ruby.rb#326
  def expected; end

  # source://steep//lib/steep/diagnostic/ruby.rb#338
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#326
  def method_name; end

  # source://steep//lib/steep/diagnostic/ruby.rb#326
  def result; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#877
class Steep::Diagnostic::Ruby::SyntaxError < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#880
  def initialize(message:, location:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#885
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#878
  def message; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#932
class Steep::Diagnostic::Ruby::TypeArgumentMismatchError < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#935
  def initialize(type_arg:, type_param:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#944
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#933
  def result; end

  # source://steep//lib/steep/diagnostic/ruby.rb#933
  def type_argument; end

  # source://steep//lib/steep/diagnostic/ruby.rb#933
  def type_parameter; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#343
class Steep::Diagnostic::Ruby::UnexpectedBlockGiven < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#346
  def initialize(node:, method_type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#352
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#344
  def method_type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#624
class Steep::Diagnostic::Ruby::UnexpectedDynamicMethod < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#628
  def initialize(node:, module_name:, method_name:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#634
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#626
  def method_name; end

  # source://steep//lib/steep/diagnostic/ruby.rb#625
  def module_name; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#843
class Steep::Diagnostic::Ruby::UnexpectedError < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#846
  def initialize(node:, error:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#855
  def detail_lines; end

  # source://steep//lib/steep/diagnostic/ruby.rb#844
  def error; end

  # source://steep//lib/steep/diagnostic/ruby.rb#851
  def header_line; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#444
class Steep::Diagnostic::Ruby::UnexpectedJump < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#445
  def header_line; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#450
class Steep::Diagnostic::Ruby::UnexpectedJumpValue < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#451
  def header_line; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#179
class Steep::Diagnostic::Ruby::UnexpectedKeywordArgument < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#183
  def initialize(node:, params:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#196
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#180
  def node; end

  # source://steep//lib/steep/diagnostic/ruby.rb#181
  def params; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#138
class Steep::Diagnostic::Ruby::UnexpectedPositionalArgument < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#142
  def initialize(node:, params:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#147
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#139
  def node; end

  # source://steep//lib/steep/diagnostic/ruby.rb#140
  def params; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#783
class Steep::Diagnostic::Ruby::UnexpectedSplat < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#786
  def initialize(node:, type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#791
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#784
  def type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#584
class Steep::Diagnostic::Ruby::UnexpectedSuper < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#587
  def initialize(node:, method:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#592
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#585
  def method; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#904
class Steep::Diagnostic::Ruby::UnexpectedTypeArgument < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#907
  def initialize(type_arg:, method_type:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#913
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#905
  def method_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#905
  def type_arg; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#578
class Steep::Diagnostic::Ruby::UnexpectedYield < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#579
  def header_line; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#639
class Steep::Diagnostic::Ruby::UnknownConstant < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#643
  def initialize(node:, name:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#649
  def class!; end

  # source://steep//lib/steep/diagnostic/ruby.rb#659
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#641
  def kind; end

  # source://steep//lib/steep/diagnostic/ruby.rb#654
  def module!; end

  # source://steep//lib/steep/diagnostic/ruby.rb#640
  def name; end
end

# source://steep//lib/steep/diagnostic/deprecated/unknown_constant_assigned.rb#6
class Steep::Diagnostic::Ruby::UnknownConstantAssigned < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/deprecated/unknown_constant_assigned.rb#10
  def initialize(node:, context:, name:); end

  # source://steep//lib/steep/diagnostic/deprecated/unknown_constant_assigned.rb#7
  def context; end

  # source://steep//lib/steep/diagnostic/deprecated/unknown_constant_assigned.rb#22
  def header_line; end

  # source://steep//lib/steep/diagnostic/deprecated/unknown_constant_assigned.rb#8
  def name; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#680
class Steep::Diagnostic::Ruby::UnknownGlobalVariable < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#683
  def initialize(node:, name:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#688
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#681
  def name; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#667
class Steep::Diagnostic::Ruby::UnknownInstanceVariable < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#670
  def initialize(node:, name:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#675
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#668
  def name; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#764
class Steep::Diagnostic::Ruby::UnreachableBranch < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#765
  def header_line; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#770
class Steep::Diagnostic::Ruby::UnreachableValueBranch < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#773
  def initialize(node:, type:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/diagnostic/ruby.rb#778
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#771
  def type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#232
class Steep::Diagnostic::Ruby::UnresolvedOverloading < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#238
  def initialize(node:, receiver_type:, method_name:, method_types:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#249
  def detail_lines; end

  # source://steep//lib/steep/diagnostic/ruby.rb#245
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#235
  def method_name; end

  # source://steep//lib/steep/diagnostic/ruby.rb#236
  def method_types; end

  # source://steep//lib/steep/diagnostic/ruby.rb#233
  def node; end

  # source://steep//lib/steep/diagnostic/ruby.rb#234
  def receiver_type; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#703
class Steep::Diagnostic::Ruby::UnsatisfiableConstraint < ::Steep::Diagnostic::Ruby::Base
  include ::Steep::Diagnostic::Ruby::ResultPrinter

  # source://steep//lib/steep/diagnostic/ruby.rb#710
  def initialize(node:, method_type:, var:, sub_type:, super_type:, result:); end

  # source://steep//lib/steep/diagnostic/ruby.rb#721
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#704
  def method_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#708
  def result; end

  # source://steep//lib/steep/diagnostic/ruby.rb#706
  def sub_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#707
  def super_type; end

  # source://steep//lib/steep/diagnostic/ruby.rb#705
  def var; end
end

# source://steep//lib/steep/diagnostic/ruby.rb#825
class Steep::Diagnostic::Ruby::UnsupportedSyntax < ::Steep::Diagnostic::Ruby::Base
  # source://steep//lib/steep/diagnostic/ruby.rb#828
  def initialize(node:, message: T.unsafe(nil)); end

  # source://steep//lib/steep/diagnostic/ruby.rb#833
  def header_line; end

  # source://steep//lib/steep/diagnostic/ruby.rb#826
  def message; end
end

# source://steep//lib/steep/diagnostic/signature.rb#3
module Steep::Diagnostic::Signature
  class << self
    # source://steep//lib/steep/diagnostic/signature.rb#420
    def from_rbs_error(error, factory:); end
  end
end

# source://steep//lib/steep/diagnostic/signature.rb#4
class Steep::Diagnostic::Signature::Base
  include ::Steep::Diagnostic::Helper

  # source://steep//lib/steep/diagnostic/signature.rb#9
  def initialize(location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#17
  def detail_lines; end

  # source://steep//lib/steep/diagnostic/signature.rb#21
  def diagnostic_code; end

  # source://steep//lib/steep/diagnostic/signature.rb#13
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#7
  def location; end

  # source://steep//lib/steep/diagnostic/signature.rb#25
  def path; end
end

# source://steep//lib/steep/diagnostic/signature.rb#266
class Steep::Diagnostic::Signature::ClassVariableDuplicationError < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#271
  def initialize(class_name:, other_class_name:, variable_name:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#267
  def class_name; end

  # source://steep//lib/steep/diagnostic/signature.rb#279
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#268
  def other_class_name; end

  # source://steep//lib/steep/diagnostic/signature.rb#269
  def variable_name; end
end

# source://steep//lib/steep/diagnostic/signature.rb#407
class Steep::Diagnostic::Signature::CyclicClassAliasDefinitionError < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#410
  def initialize(decl:); end

  # source://steep//lib/steep/diagnostic/signature.rb#408
  def decl; end

  # source://steep//lib/steep/diagnostic/signature.rb#415
  def header_line; end
end

# source://steep//lib/steep/diagnostic/signature.rb#54
class Steep::Diagnostic::Signature::DuplicatedDeclaration < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#57
  def initialize(type_name:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#62
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#55
  def type_name; end
end

# source://steep//lib/steep/diagnostic/signature.rb#151
class Steep::Diagnostic::Signature::DuplicatedMethodDefinition < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#155
  def initialize(class_name:, method_name:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#152
  def class_name; end

  # source://steep//lib/steep/diagnostic/signature.rb#161
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#153
  def method_name; end
end

# source://steep//lib/steep/diagnostic/signature.rb#220
class Steep::Diagnostic::Signature::GenericParameterMismatch < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#223
  def initialize(name:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#228
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#221
  def name; end
end

# source://steep//lib/steep/diagnostic/signature.rb#384
class Steep::Diagnostic::Signature::InconsistentClassModuleAliasError < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#387
  def initialize(decl:); end

  # source://steep//lib/steep/diagnostic/signature.rb#385
  def decl; end

  # source://steep//lib/steep/diagnostic/signature.rb#392
  def header_line; end
end

# source://steep//lib/steep/diagnostic/signature.rb#330
class Steep::Diagnostic::Signature::InheritModuleError < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#333
  def initialize(super_class); end

  # source://steep//lib/steep/diagnostic/signature.rb#338
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#331
  def super_class; end
end

# source://steep//lib/steep/diagnostic/signature.rb#284
class Steep::Diagnostic::Signature::InstanceVariableTypeError < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#289
  def initialize(name:, location:, var_type:, parent_type:); end

  # source://steep//lib/steep/diagnostic/signature.rb#297
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#285
  def name; end

  # source://steep//lib/steep/diagnostic/signature.rb#287
  def parent_type; end

  # source://steep//lib/steep/diagnostic/signature.rb#286
  def var_type; end
end

# source://steep//lib/steep/diagnostic/signature.rb#121
class Steep::Diagnostic::Signature::InvalidMethodOverload < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#125
  def initialize(class_name:, method_name:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#122
  def class_name; end

  # source://steep//lib/steep/diagnostic/signature.rb#131
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#123
  def method_name; end
end

# source://steep//lib/steep/diagnostic/signature.rb#80
class Steep::Diagnostic::Signature::InvalidTypeApplication < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#85
  def initialize(name:, args:, params:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#82
  def args; end

  # source://steep//lib/steep/diagnostic/signature.rb#92
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#81
  def name; end

  # source://steep//lib/steep/diagnostic/signature.rb#83
  def params; end
end

# source://steep//lib/steep/diagnostic/signature.rb#233
class Steep::Diagnostic::Signature::InvalidVarianceAnnotation < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#237
  def initialize(name:, param:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#243
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#234
  def name; end

  # source://steep//lib/steep/diagnostic/signature.rb#235
  def param; end
end

# source://steep//lib/steep/diagnostic/signature.rb#302
class Steep::Diagnostic::Signature::MixinClassError < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#306
  def initialize(location:, member:, type_name:); end

  # source://steep//lib/steep/diagnostic/signature.rb#312
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#303
  def member; end

  # source://steep//lib/steep/diagnostic/signature.rb#304
  def type_name; end

  private

  # source://steep//lib/steep/diagnostic/signature.rb#318
  def mixin_name; end
end

# source://steep//lib/steep/diagnostic/signature.rb#248
class Steep::Diagnostic::Signature::ModuleSelfTypeError < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#253
  def initialize(name:, ancestor:, relation:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#250
  def ancestor; end

  # source://steep//lib/steep/diagnostic/signature.rb#261
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#249
  def name; end

  # source://steep//lib/steep/diagnostic/signature.rb#251
  def relation; end
end

# source://steep//lib/steep/diagnostic/signature.rb#369
class Steep::Diagnostic::Signature::NonregularTypeAlias < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#373
  def initialize(type_name:, nonregular_type:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#379
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#371
  def nonregular_type; end

  # source://steep//lib/steep/diagnostic/signature.rb#370
  def type_name; end
end

# source://steep//lib/steep/diagnostic/signature.rb#166
class Steep::Diagnostic::Signature::RecursiveAlias < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#170
  def initialize(class_name:, names:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#167
  def class_name; end

  # source://steep//lib/steep/diagnostic/signature.rb#176
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#168
  def names; end
end

# source://steep//lib/steep/diagnostic/signature.rb#181
class Steep::Diagnostic::Signature::RecursiveAncestor < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#184
  def initialize(ancestors:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#182
  def ancestors; end

  # source://steep//lib/steep/diagnostic/signature.rb#189
  def header_line; end
end

# source://steep//lib/steep/diagnostic/signature.rb#356
class Steep::Diagnostic::Signature::RecursiveTypeAlias < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#359
  def initialize(alias_names:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#357
  def alias_names; end

  # source://steep//lib/steep/diagnostic/signature.rb#364
  def header_line; end
end

# source://steep//lib/steep/diagnostic/signature.rb#207
class Steep::Diagnostic::Signature::SuperclassMismatch < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#210
  def initialize(name:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#215
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#208
  def name; end
end

# source://steep//lib/steep/diagnostic/signature.rb#32
class Steep::Diagnostic::Signature::SyntaxError < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#35
  def initialize(exception, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#33
  def exception; end

  # source://steep//lib/steep/diagnostic/signature.rb#49
  def header_line; end

  class << self
    # source://steep//lib/steep/diagnostic/signature.rb#40
    def parser_syntax_error_message(exception); end
  end
end

# source://steep//lib/steep/diagnostic/signature.rb#343
class Steep::Diagnostic::Signature::UnexpectedError < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#346
  def initialize(message:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#351
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#344
  def message; end
end

# source://steep//lib/steep/diagnostic/signature.rb#136
class Steep::Diagnostic::Signature::UnknownMethodAlias < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#140
  def initialize(class_name:, method_name:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#137
  def class_name; end

  # source://steep//lib/steep/diagnostic/signature.rb#146
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#138
  def method_name; end
end

# source://steep//lib/steep/diagnostic/signature.rb#67
class Steep::Diagnostic::Signature::UnknownTypeName < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#70
  def initialize(name:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#75
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#68
  def name; end
end

# source://steep//lib/steep/diagnostic/signature.rb#104
class Steep::Diagnostic::Signature::UnsatisfiableTypeApplication < ::Steep::Diagnostic::Signature::Base
  # source://steep//lib/steep/diagnostic/signature.rb#109
  def initialize(type_name:, type_arg:, type_param:, location:); end

  # source://steep//lib/steep/diagnostic/signature.rb#116
  def header_line; end

  # source://steep//lib/steep/diagnostic/signature.rb#106
  def type_arg; end

  # source://steep//lib/steep/diagnostic/signature.rb#105
  def type_name; end

  # source://steep//lib/steep/diagnostic/signature.rb#107
  def type_param; end
end

# source://steep//lib/steep/drivers/utils/driver_helper.rb#2
module Steep::Drivers; end

# source://steep//lib/steep/drivers/annotations.rb#3
class Steep::Drivers::Annotations
  include ::Steep::Drivers::Utils::DriverHelper

  # source://steep//lib/steep/drivers/annotations.rb#10
  def initialize(stdout:, stderr:); end

  # source://steep//lib/steep/drivers/annotations.rb#4
  def command_line_patterns; end

  # source://steep//lib/steep/drivers/annotations.rb#17
  def run; end

  # source://steep//lib/steep/drivers/annotations.rb#6
  def stderr; end

  # source://steep//lib/steep/drivers/annotations.rb#5
  def stdout; end
end

# source://steep//lib/steep/drivers/check.rb#3
class Steep::Drivers::Check
  include ::Steep::Drivers::Utils::DriverHelper

  # source://steep//lib/steep/drivers/check.rb#16
  def initialize(stdout:, stderr:); end

  # source://steep//lib/steep/drivers/check.rb#8
  def command_line_patterns; end

  # source://steep//lib/steep/drivers/check.rb#12
  def jobs_option; end

  # source://steep//lib/steep/drivers/check.rb#138
  def print_expectations(project:, all_files:, expectations_path:, notifications:); end

  # source://steep//lib/steep/drivers/check.rb#214
  def print_result(project:, notifications:); end

  # source://steep//lib/steep/drivers/check.rb#24
  def run; end

  # source://steep//lib/steep/drivers/check.rb#187
  def save_expectations(project:, all_files:, expectations_path:, notifications:); end

  # source://steep//lib/steep/drivers/check.rb#10
  def save_expectations_path; end

  # source://steep//lib/steep/drivers/check.rb#10
  def save_expectations_path=(_arg0); end

  # source://steep//lib/steep/drivers/check.rb#11
  def severity_level; end

  # source://steep//lib/steep/drivers/check.rb#11
  def severity_level=(_arg0); end

  # source://steep//lib/steep/drivers/check.rb#7
  def stderr; end

  # source://steep//lib/steep/drivers/check.rb#6
  def stdout; end

  # source://steep//lib/steep/drivers/check.rb#9
  def with_expectations_path; end

  # source://steep//lib/steep/drivers/check.rb#9
  def with_expectations_path=(_arg0); end
end

# source://steep//lib/steep/drivers/check.rb#4
Steep::Drivers::Check::LSP = LanguageServer::Protocol

# source://steep//lib/steep/drivers/checkfile.rb#3
class Steep::Drivers::Checkfile
  include ::Steep::Drivers::Utils::DriverHelper

  # source://steep//lib/steep/drivers/checkfile.rb#15
  def initialize(stdout:, stderr:); end

  # source://steep//lib/steep/drivers/checkfile.rb#9
  def all_rbs; end

  # source://steep//lib/steep/drivers/checkfile.rb#9
  def all_rbs=(_arg0); end

  # source://steep//lib/steep/drivers/checkfile.rb#9
  def all_ruby; end

  # source://steep//lib/steep/drivers/checkfile.rb#9
  def all_ruby=(_arg0); end

  # source://steep//lib/steep/drivers/checkfile.rb#8
  def command_line_args; end

  # source://steep//lib/steep/drivers/checkfile.rb#11
  def jobs_option; end

  # source://steep//lib/steep/drivers/checkfile.rb#27
  def run; end

  # source://steep//lib/steep/drivers/checkfile.rb#7
  def stderr; end

  # source://steep//lib/steep/drivers/checkfile.rb#10
  def stdin_input; end

  # source://steep//lib/steep/drivers/checkfile.rb#6
  def stdout; end
end

# source://steep//lib/steep/drivers/checkfile.rb#4
Steep::Drivers::Checkfile::LSP = LanguageServer::Protocol

# source://steep//lib/steep/drivers/diagnostic_printer.rb#3
class Steep::Drivers::DiagnosticPrinter
  # source://steep//lib/steep/drivers/diagnostic_printer.rb#9
  def initialize(stdout:, buffer:); end

  # source://steep//lib/steep/drivers/diagnostic_printer.rb#7
  def buffer; end

  # source://steep//lib/steep/drivers/diagnostic_printer.rb#18
  def color_severity(string, severity:); end

  # source://steep//lib/steep/drivers/diagnostic_printer.rb#50
  def location(diagnostic); end

  # source://steep//lib/steep/drivers/diagnostic_printer.rb#14
  def path; end

  # source://steep//lib/steep/drivers/diagnostic_printer.rb#55
  def print(diagnostic, prefix: T.unsafe(nil), source: T.unsafe(nil)); end

  # source://steep//lib/steep/drivers/diagnostic_printer.rb#81
  def print_source_line(diagnostic, prefix: T.unsafe(nil)); end

  # source://steep//lib/steep/drivers/diagnostic_printer.rb#33
  def severity_message(severity); end

  # source://steep//lib/steep/drivers/diagnostic_printer.rb#6
  def stdout; end
end

# source://steep//lib/steep/drivers/diagnostic_printer.rb#4
Steep::Drivers::DiagnosticPrinter::LSP = LanguageServer::Protocol

# source://steep//lib/steep/drivers/init.rb#3
class Steep::Drivers::Init
  include ::Steep::Drivers::Utils::DriverHelper

  # source://steep//lib/steep/drivers/init.rb#42
  def initialize(stdout:, stderr:); end

  # source://steep//lib/steep/drivers/init.rb#6
  def force_write; end

  # source://steep//lib/steep/drivers/init.rb#6
  def force_write=(_arg0); end

  # source://steep//lib/steep/drivers/init.rb#48
  def run; end

  # source://steep//lib/steep/drivers/init.rb#5
  def stderr; end

  # source://steep//lib/steep/drivers/init.rb#4
  def stdout; end
end

# source://steep//lib/steep/drivers/init.rb#10
Steep::Drivers::Init::TEMPLATE = T.let(T.unsafe(nil), String)

# source://steep//lib/steep/drivers/langserver.rb#3
class Steep::Drivers::Langserver
  include ::Steep::Drivers::Utils::DriverHelper

  # source://steep//lib/steep/drivers/langserver.rb#14
  def initialize(stdout:, stderr:, stdin:); end

  # source://steep//lib/steep/drivers/langserver.rb#10
  def jobs_option; end

  # source://steep//lib/steep/drivers/langserver.rb#31
  def project; end

  # source://steep//lib/steep/drivers/langserver.rb#27
  def reader; end

  # source://steep//lib/steep/drivers/langserver.rb#35
  def run; end

  # source://steep//lib/steep/drivers/langserver.rb#5
  def stderr; end

  # source://steep//lib/steep/drivers/langserver.rb#6
  def stdin; end

  # source://steep//lib/steep/drivers/langserver.rb#4
  def stdout; end

  # source://steep//lib/steep/drivers/langserver.rb#8
  def type_check_queue; end

  # source://steep//lib/steep/drivers/langserver.rb#9
  def type_check_thread; end

  # source://steep//lib/steep/drivers/langserver.rb#7
  def write_mutex; end

  # source://steep//lib/steep/drivers/langserver.rb#23
  def writer; end
end

# source://steep//lib/steep/drivers/print_project.rb#3
class Steep::Drivers::PrintProject
  include ::Steep::Drivers::Utils::DriverHelper

  # source://steep//lib/steep/drivers/print_project.rb#9
  def initialize(stdout:, stderr:); end

  # source://steep//lib/steep/drivers/print_project.rb#14
  def run; end

  # source://steep//lib/steep/drivers/print_project.rb#5
  def stderr; end

  # source://steep//lib/steep/drivers/print_project.rb#4
  def stdout; end
end

# source://steep//lib/steep/drivers/stats.rb#5
class Steep::Drivers::Stats
  include ::Steep::Drivers::Utils::DriverHelper

  # source://steep//lib/steep/drivers/stats.rb#107
  def initialize(stdout:, stderr:); end

  # source://steep//lib/steep/drivers/stats.rb#101
  def command_line_patterns; end

  # source://steep//lib/steep/drivers/stats.rb#102
  def format; end

  # source://steep//lib/steep/drivers/stats.rb#102
  def format=(_arg0); end

  # source://steep//lib/steep/drivers/stats.rb#103
  def jobs_option; end

  # source://steep//lib/steep/drivers/stats.rb#114
  def run; end

  # source://steep//lib/steep/drivers/stats.rb#100
  def stderr; end

  # source://steep//lib/steep/drivers/stats.rb#99
  def stdout; end
end

# source://steep//lib/steep/drivers/stats.rb#6
class Steep::Drivers::Stats::CSVPrinter
  # source://steep//lib/steep/drivers/stats.rb#9
  def initialize(io:); end

  # source://steep//lib/steep/drivers/stats.rb#7
  def io; end

  # source://steep//lib/steep/drivers/stats.rb#13
  def print(stats_result); end
end

# source://steep//lib/steep/drivers/stats.rb#49
class Steep::Drivers::Stats::TablePrinter
  # source://steep//lib/steep/drivers/stats.rb#52
  def initialize(io:); end

  # source://steep//lib/steep/drivers/stats.rb#50
  def io; end

  # source://steep//lib/steep/drivers/stats.rb#56
  def print(stats_result); end
end

# source://steep//lib/steep/drivers/utils/driver_helper.rb#3
module Steep::Drivers::Utils; end

# source://steep//lib/steep/drivers/utils/driver_helper.rb#4
module Steep::Drivers::Utils::DriverHelper
  # source://steep//lib/steep/drivers/utils/driver_helper.rb#72
  def keep_diagnostic?(diagnostic, severity_level:); end

  # source://steep//lib/steep/drivers/utils/driver_helper.rb#7
  def load_config(path: T.unsafe(nil)); end

  # source://steep//lib/steep/drivers/utils/driver_helper.rb#37
  def request_id; end

  # source://steep//lib/steep/drivers/utils/driver_helper.rb#47
  def shutdown_exit(writer:, reader:); end

  # source://steep//lib/steep/drivers/utils/driver_helper.rb#5
  def steepfile; end

  # source://steep//lib/steep/drivers/utils/driver_helper.rb#5
  def steepfile=(_arg0); end

  # source://steep//lib/steep/drivers/utils/driver_helper.rb#55
  def wait_for_message(reader:, unknown_messages: T.unsafe(nil), &block); end

  # source://steep//lib/steep/drivers/utils/driver_helper.rb#41
  def wait_for_response_id(reader:, id:, unknown_responses: T.unsafe(nil)); end
end

# source://steep//lib/steep/drivers/utils/jobs_option.rb#4
class Steep::Drivers::Utils::JobsOption
  # source://steep//lib/steep/drivers/utils/jobs_option.rb#7
  def initialize(jobs_count_modifier: T.unsafe(nil)); end

  # source://steep//lib/steep/drivers/utils/jobs_option.rb#11
  def default_jobs_count; end

  # source://steep//lib/steep/drivers/utils/jobs_option.rb#5
  def jobs_count; end

  # source://steep//lib/steep/drivers/utils/jobs_option.rb#5
  def jobs_count=(_arg0); end

  # source://steep//lib/steep/drivers/utils/jobs_option.rb#5
  def jobs_count_modifier; end

  # source://steep//lib/steep/drivers/utils/jobs_option.rb#5
  def jobs_count_modifier=(_arg0); end

  # source://steep//lib/steep/drivers/utils/jobs_option.rb#15
  def jobs_count_value; end

  # source://steep//lib/steep/drivers/utils/jobs_option.rb#5
  def steep_command; end

  # source://steep//lib/steep/drivers/utils/jobs_option.rb#5
  def steep_command=(_arg0); end
end

# source://steep//lib/steep/drivers/validate.rb#3
class Steep::Drivers::Validate
  include ::Steep::Drivers::Utils::DriverHelper

  # source://steep//lib/steep/drivers/validate.rb#9
  def initialize(stdout:, stderr:); end

  # source://steep//lib/steep/drivers/validate.rb#14
  def run; end

  # source://steep//lib/steep/drivers/validate.rb#5
  def stderr; end

  # source://steep//lib/steep/drivers/validate.rb#4
  def stdout; end
end

# source://steep//lib/steep/drivers/vendor.rb#3
class Steep::Drivers::Vendor
  # source://steep//lib/steep/drivers/vendor.rb#11
  def initialize(stdout:, stderr:, stdin:); end

  # source://steep//lib/steep/drivers/vendor.rb#9
  def clean_before; end

  # source://steep//lib/steep/drivers/vendor.rb#9
  def clean_before=(_arg0); end

  # source://steep//lib/steep/drivers/vendor.rb#20
  def run; end

  # source://steep//lib/steep/drivers/vendor.rb#5
  def stderr; end

  # source://steep//lib/steep/drivers/vendor.rb#6
  def stdin; end

  # source://steep//lib/steep/drivers/vendor.rb#4
  def stdout; end

  # source://steep//lib/steep/drivers/vendor.rb#8
  def vendor_dir; end

  # source://steep//lib/steep/drivers/vendor.rb#8
  def vendor_dir=(_arg0); end
end

# source://steep//lib/steep/drivers/watch.rb#3
class Steep::Drivers::Watch
  include ::Steep::Drivers::Utils::DriverHelper

  # source://steep//lib/steep/drivers/watch.rb#15
  def initialize(stdout:, stderr:); end

  # source://steep//lib/steep/drivers/watch.rb#4
  def dirs; end

  # source://steep//lib/steep/drivers/watch.rb#9
  def jobs_option; end

  # source://steep//lib/steep/drivers/watch.rb#7
  def queue; end

  # source://steep//lib/steep/drivers/watch.rb#28
  def run; end

  # source://steep//lib/steep/drivers/watch.rb#8
  def severity_level; end

  # source://steep//lib/steep/drivers/watch.rb#8
  def severity_level=(_arg0); end

  # source://steep//lib/steep/drivers/watch.rb#6
  def stderr; end

  # source://steep//lib/steep/drivers/watch.rb#5
  def stdout; end

  # source://steep//lib/steep/drivers/watch.rb#24
  def watching?(changed_path, files:, dirs:); end
end

# source://steep//lib/steep/drivers/watch.rb#13
Steep::Drivers::Watch::LSP = LanguageServer::Protocol

# source://steep//lib/steep/drivers/worker.rb#3
class Steep::Drivers::Worker
  include ::Steep::Drivers::Utils::DriverHelper

  # source://steep//lib/steep/drivers/worker.rb#15
  def initialize(stdout:, stderr:, stdin:); end

  # source://steep//lib/steep/drivers/worker.rb#11
  def commandline_args; end

  # source://steep//lib/steep/drivers/worker.rb#11
  def commandline_args=(_arg0); end

  # source://steep//lib/steep/drivers/worker.rb#8
  def delay_shutdown; end

  # source://steep//lib/steep/drivers/worker.rb#8
  def delay_shutdown=(_arg0); end

  # source://steep//lib/steep/drivers/worker.rb#10
  def index; end

  # source://steep//lib/steep/drivers/worker.rb#10
  def index=(_arg0); end

  # source://steep//lib/steep/drivers/worker.rb#9
  def max_index; end

  # source://steep//lib/steep/drivers/worker.rb#9
  def max_index=(_arg0); end

  # source://steep//lib/steep/drivers/worker.rb#22
  def run; end

  # source://steep//lib/steep/drivers/worker.rb#4
  def stderr; end

  # source://steep//lib/steep/drivers/worker.rb#4
  def stdin; end

  # source://steep//lib/steep/drivers/worker.rb#4
  def stdout; end

  # source://steep//lib/steep/drivers/worker.rb#7
  def worker_name; end

  # source://steep//lib/steep/drivers/worker.rb#7
  def worker_name=(_arg0); end

  # source://steep//lib/steep/drivers/worker.rb#6
  def worker_type; end

  # source://steep//lib/steep/drivers/worker.rb#6
  def worker_type=(_arg0); end
end

# source://steep//lib/steep/equatable.rb#2
module Steep::Equatable
  # source://steep//lib/steep/equatable.rb#3
  def ==(other); end

  # source://steep//lib/steep/equatable.rb#13
  def eql?(other); end

  # source://steep//lib/steep/equatable.rb#17
  def hash; end
end

# source://steep//lib/steep/expectations.rb#2
class Steep::Expectations
  # source://steep//lib/steep/expectations.rb#190
  def initialize; end

  # source://steep//lib/steep/expectations.rb#188
  def diagnostics; end

  # source://steep//lib/steep/expectations.rb#194
  def test(path:, diagnostics:); end

  # source://steep//lib/steep/expectations.rb#202
  def to_yaml; end

  class << self
    # source://steep//lib/steep/expectations.rb#198
    def empty; end

    # source://steep//lib/steep/expectations.rb#216
    def load(path:, content:); end
  end
end

# source://steep//lib/steep/expectations.rb#3
class Steep::Expectations::Diagnostic < ::Struct
  # source://steep//lib/steep/expectations.rb#88
  def lsp_severity; end

  # source://steep//lib/steep/expectations.rb#121
  def sort_key; end

  # source://steep//lib/steep/expectations.rb#70
  def to_hash; end

  # source://steep//lib/steep/expectations.rb#103
  def to_lsp; end

  class << self
    # source://steep//lib/steep/expectations.rb#6
    def from_hash(hash); end

    # source://steep//lib/steep/expectations.rb#37
    def from_lsp(diagnostic); end
  end
end

# source://steep//lib/steep/expectations.rb#4
Steep::Expectations::Diagnostic::DiagnosticSeverity = LanguageServer::Protocol::Constant::DiagnosticSeverity

# source://steep//lib/steep/expectations.rb#186
Steep::Expectations::LSP = LanguageServer::Protocol

# source://steep//lib/steep/expectations.rb#134
class Steep::Expectations::TestResult
  # source://steep//lib/steep/expectations.rb#139
  def initialize(path:, expectation:, actual:); end

  # source://steep//lib/steep/expectations.rb#137
  def actual; end

  # source://steep//lib/steep/expectations.rb#153
  def each_diagnostics; end

  # source://steep//lib/steep/expectations.rb#145
  def empty?; end

  # source://steep//lib/steep/expectations.rb#136
  def expectation; end

  # source://steep//lib/steep/expectations.rb#173
  def expected_diagnostics; end

  # source://steep//lib/steep/expectations.rb#181
  def missing_diagnostics; end

  # source://steep//lib/steep/expectations.rb#135
  def path; end

  # source://steep//lib/steep/expectations.rb#149
  def satisfied?; end

  # source://steep//lib/steep/expectations.rb#177
  def unexpected_diagnostics; end
end

# source://steep//lib/steep/index/rbs_index.rb#2
module Steep::Index; end

# source://steep//lib/steep/index/rbs_index.rb#3
class Steep::Index::RBSIndex
  # source://steep//lib/steep/index/rbs_index.rb#132
  def initialize; end

  # source://steep//lib/steep/index/rbs_index.rb#173
  def add_constant_declaration(const_name, decl); end

  # source://steep//lib/steep/index/rbs_index.rb#177
  def add_global_declaration(global_name, decl); end

  # source://steep//lib/steep/index/rbs_index.rb#169
  def add_method_declaration(method_name, member); end

  # source://steep//lib/steep/index/rbs_index.rb#165
  def add_type_declaration(type_name, declaration); end

  # source://steep//lib/steep/index/rbs_index.rb#190
  def add_type_reference(type_name, ref); end

  # source://steep//lib/steep/index/rbs_index.rb#129
  def const_index; end

  # source://steep//lib/steep/index/rbs_index.rb#181
  def each_declaration(type_name: T.unsafe(nil), method_name: T.unsafe(nil), const_name: T.unsafe(nil), global_name: T.unsafe(nil), &block); end

  # source://steep//lib/steep/index/rbs_index.rb#154
  def each_entry(&block); end

  # source://steep//lib/steep/index/rbs_index.rb#194
  def each_reference(type_name:, &block); end

  # source://steep//lib/steep/index/rbs_index.rb#139
  def entry(type_name: T.unsafe(nil), method_name: T.unsafe(nil), const_name: T.unsafe(nil), global_name: T.unsafe(nil)); end

  # source://steep//lib/steep/index/rbs_index.rb#130
  def global_index; end

  # source://steep//lib/steep/index/rbs_index.rb#128
  def method_index; end

  # source://steep//lib/steep/index/rbs_index.rb#127
  def type_index; end
end

# source://steep//lib/steep/index/rbs_index.rb#205
class Steep::Index::RBSIndex::Builder
  # source://steep//lib/steep/index/rbs_index.rb#208
  def initialize(index:); end

  # source://steep//lib/steep/index/rbs_index.rb#291
  def env(env); end

  # source://steep//lib/steep/index/rbs_index.rb#206
  def index; end

  # source://steep//lib/steep/index/rbs_index.rb#212
  def member(type_name, member); end

  # source://steep//lib/steep/index/rbs_index.rb#280
  def type_reference(type, from:); end
end

# source://steep//lib/steep/index/rbs_index.rb#85
class Steep::Index::RBSIndex::ConstantEntry
  # source://steep//lib/steep/index/rbs_index.rb#89
  def initialize(const_name:); end

  # source://steep//lib/steep/index/rbs_index.rb#94
  def add_declaration(decl); end

  # source://steep//lib/steep/index/rbs_index.rb#86
  def const_name; end

  # source://steep//lib/steep/index/rbs_index.rb#87
  def declarations; end
end

# source://steep//lib/steep/index/rbs_index.rb#106
class Steep::Index::RBSIndex::GlobalEntry
  # source://steep//lib/steep/index/rbs_index.rb#110
  def initialize(global_name:); end

  # source://steep//lib/steep/index/rbs_index.rb#115
  def add_declaration(decl); end

  # source://steep//lib/steep/index/rbs_index.rb#108
  def declarations; end

  # source://steep//lib/steep/index/rbs_index.rb#107
  def global_name; end
end

# source://steep//lib/steep/index/rbs_index.rb#58
class Steep::Index::RBSIndex::MethodEntry
  # source://steep//lib/steep/index/rbs_index.rb#63
  def initialize(method_name:); end

  # source://steep//lib/steep/index/rbs_index.rb#69
  def add_declaration(decl); end

  # source://steep//lib/steep/index/rbs_index.rb#60
  def declarations; end

  # source://steep//lib/steep/index/rbs_index.rb#59
  def method_name; end

  # source://steep//lib/steep/index/rbs_index.rb#61
  def references; end
end

# source://steep//lib/steep/index/rbs_index.rb#4
class Steep::Index::RBSIndex::TypeEntry
  # source://steep//lib/steep/index/rbs_index.rb#9
  def initialize(type_name:); end

  # source://steep//lib/steep/index/rbs_index.rb#15
  def add_declaration(decl); end

  # source://steep//lib/steep/index/rbs_index.rb#32
  def add_reference(ref); end

  # source://steep//lib/steep/index/rbs_index.rb#6
  def declarations; end

  # source://steep//lib/steep/index/rbs_index.rb#7
  def references; end

  # source://steep//lib/steep/index/rbs_index.rb#5
  def type_name; end
end

# source://steep//lib/steep/index/signature_symbol_provider.rb#3
class Steep::Index::SignatureSymbolProvider
  # source://steep//lib/steep/index/signature_symbol_provider.rb#13
  def initialize(project:, assignment:); end

  # source://steep//lib/steep/index/signature_symbol_provider.rb#42
  def assigned?(path); end

  # source://steep//lib/steep/index/signature_symbol_provider.rb#11
  def assignment; end

  # source://steep//lib/steep/index/signature_symbol_provider.rb#10
  def indexes; end

  # source://steep//lib/steep/index/signature_symbol_provider.rb#9
  def project; end

  # source://steep//lib/steep/index/signature_symbol_provider.rb#52
  def query_symbol(query); end

  class << self
    # source://steep//lib/steep/index/signature_symbol_provider.rb#19
    def test_const_name(query, type_name); end

    # source://steep//lib/steep/index/signature_symbol_provider.rb#19
    def test_global_name(query, type_name); end

    # source://steep//lib/steep/index/signature_symbol_provider.rb#33
    def test_method_name(query, method_name); end

    # source://steep//lib/steep/index/signature_symbol_provider.rb#19
    def test_type_name(query, type_name); end
  end
end

# source://steep//lib/steep/index/signature_symbol_provider.rb#4
Steep::Index::SignatureSymbolProvider::LSP = LanguageServer::Protocol

# source://steep//lib/steep/index/signature_symbol_provider.rb#6
class Steep::Index::SignatureSymbolProvider::SymbolInformation < ::Struct; end

# source://steep//lib/steep/index/source_index.rb#3
class Steep::Index::SourceIndex
  # source://steep//lib/steep/index/source_index.rb#96
  def initialize(source:, parent: T.unsafe(nil)); end

  # source://steep//lib/steep/index/source_index.rb#126
  def add_definition(definition:, constant: T.unsafe(nil), method: T.unsafe(nil)); end

  # source://steep//lib/steep/index/source_index.rb#132
  def add_reference(ref:, constant: T.unsafe(nil), method: T.unsafe(nil)); end

  # source://steep//lib/steep/index/source_index.rb#89
  def constant_index; end

  # source://steep//lib/steep/index/source_index.rb#93
  def count; end

  # source://steep//lib/steep/index/source_index.rb#138
  def entry(constant: T.unsafe(nil), method: T.unsafe(nil)); end

  # source://steep//lib/steep/index/source_index.rb#111
  def merge!(child); end

  # source://steep//lib/steep/index/source_index.rb#90
  def method_index; end

  # source://steep//lib/steep/index/source_index.rb#107
  def new_child; end

  # source://steep//lib/steep/index/source_index.rb#92
  def parent; end

  # source://steep//lib/steep/index/source_index.rb#94
  def parent_count; end

  # source://steep//lib/steep/index/source_index.rb#149
  def reference(constant_node: T.unsafe(nil)); end

  # source://steep//lib/steep/index/source_index.rb#88
  def source; end
end

# source://steep//lib/steep/index/source_index.rb#4
class Steep::Index::SourceIndex::ConstantEntry
  # source://steep//lib/steep/index/source_index.rb#10
  def initialize(name:); end

  # source://steep//lib/steep/index/source_index.rb#17
  def add_definition(node); end

  # source://steep//lib/steep/index/source_index.rb#28
  def add_reference(node); end

  # source://steep//lib/steep/index/source_index.rb#7
  def definitions; end

  # source://steep//lib/steep/index/source_index.rb#39
  def merge!(other); end

  # source://steep//lib/steep/index/source_index.rb#5
  def name; end

  # source://steep//lib/steep/index/source_index.rb#8
  def references; end
end

# source://steep//lib/steep/index/source_index.rb#46
class Steep::Index::SourceIndex::MethodEntry
  # source://steep//lib/steep/index/source_index.rb#52
  def initialize(name:); end

  # source://steep//lib/steep/index/source_index.rb#59
  def add_definition(node); end

  # source://steep//lib/steep/index/source_index.rb#70
  def add_reference(node); end

  # source://steep//lib/steep/index/source_index.rb#49
  def definitions; end

  # source://steep//lib/steep/index/source_index.rb#81
  def merge!(other); end

  # source://steep//lib/steep/index/source_index.rb#47
  def name; end

  # source://steep//lib/steep/index/source_index.rb#50
  def references; end
end

# source://steep//lib/steep/method_name.rb#2
class Steep::InstanceMethodName < ::Struct
  def method_name; end
  def method_name=(_); end

  # source://steep//lib/steep/method_name.rb#8
  def relative; end

  # source://steep//lib/steep/method_name.rb#4
  def to_s; end

  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/interface/type_param.rb#2
module Steep::Interface; end

# source://steep//lib/steep/interface/block.rb#3
class Steep::Interface::Block
  # source://steep//lib/steep/interface/block.rb#8
  def initialize(type:, optional:, self_type:); end

  # source://steep//lib/steep/interface/block.rb#82
  def +(other); end

  # source://steep//lib/steep/interface/block.rb#30
  def ==(other); end

  # source://steep//lib/steep/interface/block.rb#40
  def closed?; end

  # source://steep//lib/steep/interface/block.rb#30
  def eql?(other); end

  # source://steep//lib/steep/interface/block.rb#55
  def free_variables; end

  # source://steep//lib/steep/interface/block.rb#36
  def hash; end

  # source://steep//lib/steep/interface/block.rb#64
  def map_type(&block); end

  # source://steep//lib/steep/interface/block.rb#5
  def optional; end

  # source://steep//lib/steep/interface/block.rb#14
  def optional?; end

  # source://steep//lib/steep/interface/block.rb#18
  def required?; end

  # source://steep//lib/steep/interface/block.rb#6
  def self_type; end

  # source://steep//lib/steep/interface/block.rb#44
  def subst(s); end

  # source://steep//lib/steep/interface/block.rb#22
  def to_optional; end

  # source://steep//lib/steep/interface/block.rb#72
  def to_proc_type; end

  # source://steep//lib/steep/interface/block.rb#59
  def to_s; end

  # source://steep//lib/steep/interface/block.rb#4
  def type; end
end

# source://steep//lib/steep/interface/builder.rb#3
class Steep::Interface::Builder
  # source://steep//lib/steep/interface/builder.rb#93
  def initialize(factory); end

  # source://steep//lib/steep/interface/builder.rb#90
  def cache; end

  # source://steep//lib/steep/interface/builder.rb#283
  def definition_builder; end

  # source://steep//lib/steep/interface/builder.rb#90
  def factory; end

  # source://steep//lib/steep/interface/builder.rb#110
  def fetch_cache(type, public_only, config); end

  # source://steep//lib/steep/interface/builder.rb#101
  def include_self?(type); end

  # source://steep//lib/steep/interface/builder.rb#422
  def intersection_shape(type, shapes, public_only); end

  # source://steep//lib/steep/interface/builder.rb#362
  def method_name_for(type_def, name); end

  # source://steep//lib/steep/interface/builder.rb#287
  def object_shape(type, public_only, keep_self, keep_instance, keep_singleton); end

  # source://steep//lib/steep/interface/builder.rb#693
  def proc_shape(proc, public_only, config); end

  # source://steep//lib/steep/interface/builder.rb#91
  def raw_instance_object_shape_cache; end

  # source://steep//lib/steep/interface/builder.rb#91
  def raw_interface_object_shape_cache; end

  # source://steep//lib/steep/interface/builder.rb#90
  def raw_object_cache; end

  # source://steep//lib/steep/interface/builder.rb#318
  def raw_object_shape(type, public_only, subst); end

  # source://steep//lib/steep/interface/builder.rb#91
  def raw_singleton_object_shape_cache; end

  # source://steep//lib/steep/interface/builder.rb#581
  def record_shape(record, public_only, config); end

  # source://steep//lib/steep/interface/builder.rb#713
  def replace_primitive_method(method_name, method_def, method_type); end

  # source://steep//lib/steep/interface/builder.rb#138
  def shape(type, public_only:, config:); end

  # source://steep//lib/steep/interface/builder.rb#382
  def subtyping; end

  # source://steep//lib/steep/interface/builder.rb#431
  def tuple_shape(tuple, public_only, config); end

  # source://steep//lib/steep/interface/builder.rb#386
  def union_shape(shape_type, shapes, public_only); end
end

# source://steep//lib/steep/interface/builder.rb#4
class Steep::Interface::Builder::Config
  # source://steep//lib/steep/interface/builder.rb#8
  def initialize(self_type:, class_type:, instance_type:, variable_bounds:, resolve_self: T.unsafe(nil), resolve_class: T.unsafe(nil), resolve_instance: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/builder.rb#42
  def ==(other); end

  # source://steep//lib/steep/interface/builder.rb#5
  def class_type; end

  # source://steep//lib/steep/interface/builder.rb#83
  def class_type?; end

  # source://steep//lib/steep/interface/builder.rb#42
  def eql?(other); end

  # source://steep//lib/steep/interface/builder.rb#55
  def hash; end

  # source://steep//lib/steep/interface/builder.rb#5
  def instance_type; end

  # source://steep//lib/steep/interface/builder.rb#77
  def instance_type?; end

  # source://steep//lib/steep/interface/builder.rb#30
  def no_resolve; end

  # source://steep//lib/steep/interface/builder.rb#38
  def resolve?; end

  # source://steep//lib/steep/interface/builder.rb#6
  def resolve_class; end

  # source://steep//lib/steep/interface/builder.rb#6
  def resolve_instance; end

  # source://steep//lib/steep/interface/builder.rb#6
  def resolve_self; end

  # source://steep//lib/steep/interface/builder.rb#5
  def self_type; end

  # source://steep//lib/steep/interface/builder.rb#71
  def self_type?; end

  # source://steep//lib/steep/interface/builder.rb#59
  def subst; end

  # source://steep//lib/steep/interface/builder.rb#18
  def update(self_type: T.unsafe(nil), class_type: T.unsafe(nil), instance_type: T.unsafe(nil), resolve_self: T.unsafe(nil), resolve_class: T.unsafe(nil), resolve_instance: T.unsafe(nil), variable_bounds: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/builder.rb#5
  def variable_bounds; end
end

# source://steep//lib/steep/interface/function.rb#3
class Steep::Interface::Function
  # source://steep//lib/steep/interface/function.rb#930
  def initialize(params:, return_type:, location:); end

  # source://steep//lib/steep/interface/function.rb#936
  def ==(other); end

  # source://steep//lib/steep/interface/function.rb#1001
  def closed?; end

  # source://steep//lib/steep/interface/function.rb#970
  def each_child(&block); end

  # source://steep//lib/steep/interface/function.rb#970
  def each_type(&block); end

  # source://steep//lib/steep/interface/function.rb#936
  def eql?(other); end

  # source://steep//lib/steep/interface/function.rb#946
  def free_variables; end

  # source://steep//lib/steep/interface/function.rb#942
  def hash; end

  # source://steep//lib/steep/interface/function.rb#928
  def location; end

  # source://steep//lib/steep/interface/function.rb#981
  def map_type(&block); end

  # source://steep//lib/steep/interface/function.rb#926
  def params; end

  # source://steep//lib/steep/interface/function.rb#927
  def return_type; end

  # source://steep//lib/steep/interface/function.rb#953
  def subst(s); end

  # source://steep//lib/steep/interface/function.rb#997
  def to_s; end

  # source://steep//lib/steep/interface/function.rb#989
  def with(params: T.unsafe(nil), return_type: T.unsafe(nil)); end
end

# source://steep//lib/steep/interface/function.rb#4
class Steep::Interface::Function::Params
  # source://steep//lib/steep/interface/function.rb#719
  def initialize(positional_params:, keyword_params:); end

  # source://steep//lib/steep/interface/function.rb#906
  def &(other); end

  # source://steep//lib/steep/interface/function.rb#892
  def +(other); end

  # source://steep//lib/steep/interface/function.rb#749
  def ==(other); end

  # source://steep//lib/steep/interface/function.rb#838
  def closed?; end

  # source://steep//lib/steep/interface/function.rb#810
  def drop_first; end

  # source://steep//lib/steep/interface/function.rb#796
  def each_positional_param(&block); end

  # source://steep//lib/steep/interface/function.rb#821
  def each_type(&block); end

  # source://steep//lib/steep/interface/function.rb#881
  def empty?; end

  # source://steep//lib/steep/interface/function.rb#749
  def eql?(other); end

  # source://steep//lib/steep/interface/function.rb#728
  def first_param; end

  # source://steep//lib/steep/interface/function.rb#776
  def flat_keywords; end

  # source://steep//lib/steep/interface/function.rb#761
  def flat_unnamed_params; end

  # source://steep//lib/steep/interface/function.rb#830
  def free_variables; end

  # source://steep//lib/steep/interface/function.rb#792
  def has_keywords?; end

  # source://steep//lib/steep/interface/function.rb#741
  def has_positional?; end

  # source://steep//lib/steep/interface/function.rb#757
  def hash; end

  # source://steep//lib/steep/interface/function.rb#711
  def keyword_params; end

  # source://steep//lib/steep/interface/function.rb#874
  def map_type(&block); end

  # source://steep//lib/steep/interface/function.rb#682
  def optional; end

  # source://steep//lib/steep/interface/function.rb#886
  def optional?; end

  # source://steep//lib/steep/interface/function.rb#784
  def optional_keywords; end

  # source://steep//lib/steep/interface/function.rb#710
  def positional_params; end

  # source://steep//lib/steep/interface/function.rb#667
  def required; end

  # source://steep//lib/steep/interface/function.rb#780
  def required_keywords; end

  # source://steep//lib/steep/interface/function.rb#699
  def rest; end

  # source://steep//lib/steep/interface/function.rb#788
  def rest_keywords; end

  # source://steep//lib/steep/interface/function.rb#860
  def size; end

  # source://steep//lib/steep/interface/function.rb#842
  def subst(s); end

  # source://steep//lib/steep/interface/function.rb#864
  def to_s; end

  # source://steep//lib/steep/interface/function.rb#724
  def update(positional_params: T.unsafe(nil), keyword_params: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/function.rb#732
  def with_first_param(param); end

  # source://steep//lib/steep/interface/function.rb#806
  def without_keywords; end

  # source://steep//lib/steep/interface/function.rb#919
  def |(other); end

  class << self
    # source://steep//lib/steep/interface/function.rb#713
    def build(required: T.unsafe(nil), optional: T.unsafe(nil), rest: T.unsafe(nil), required_keywords: T.unsafe(nil), optional_keywords: T.unsafe(nil), rest_keywords: T.unsafe(nil)); end

    # source://steep//lib/steep/interface/function.rb#745
    def empty; end
  end
end

# source://steep//lib/steep/interface/function.rb#377
class Steep::Interface::Function::Params::KeywordParams
  include ::Steep::Interface::Function::Params::Utils

  # source://steep//lib/steep/interface/function.rb#382
  def initialize(requireds: T.unsafe(nil), optionals: T.unsafe(nil), rest: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/function.rb#602
  def &(other); end

  # source://steep//lib/steep/interface/function.rb#473
  def +(other); end

  # source://steep//lib/steep/interface/function.rb#388
  def ==(other); end

  # source://steep//lib/steep/interface/function.rb#413
  def each(&block); end

  # source://steep//lib/steep/interface/function.rb#425
  def each_type; end

  # source://steep//lib/steep/interface/function.rb#409
  def empty?; end

  # source://steep//lib/steep/interface/function.rb#388
  def eql?(other); end

  # source://steep//lib/steep/interface/function.rb#397
  def hash; end

  # source://steep//lib/steep/interface/function.rb#466
  def keywords; end

  # source://steep//lib/steep/interface/function.rb#435
  def map_type(&block); end

  # source://steep//lib/steep/interface/function.rb#379
  def optionals; end

  # source://steep//lib/steep/interface/function.rb#378
  def requireds; end

  # source://steep//lib/steep/interface/function.rb#380
  def rest; end

  # source://steep//lib/steep/interface/function.rb#462
  def size; end

  # source://steep//lib/steep/interface/function.rb#451
  def subst(s); end

  # source://steep//lib/steep/interface/function.rb#401
  def update(requireds: T.unsafe(nil), optionals: T.unsafe(nil), rest: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/function.rb#537
  def |(other); end
end

# source://steep//lib/steep/interface/function.rb#16
class Steep::Interface::Function::Params::PositionalParams
  extend ::Steep::Interface::Function::Params::Utils

  # source://steep//lib/steep/interface/function.rb#64
  def initialize(head:, tail:); end

  # source://steep//lib/steep/interface/function.rb#115
  def ==(other); end

  # source://steep//lib/steep/interface/function.rb#125
  def each(&block); end

  # source://steep//lib/steep/interface/function.rb#134
  def each_type; end

  # source://steep//lib/steep/interface/function.rb#115
  def eql?(other); end

  # source://steep//lib/steep/interface/function.rb#121
  def hash; end

  # source://steep//lib/steep/interface/function.rb#61
  def head; end

  # source://steep//lib/steep/interface/function.rb#85
  def map(&block); end

  # source://steep//lib/steep/interface/function.rb#96
  def map_type(&block); end

  # source://steep//lib/steep/interface/function.rb#144
  def size; end

  # source://steep//lib/steep/interface/function.rb#104
  def subst(s); end

  # source://steep//lib/steep/interface/function.rb#62
  def tail; end

  # source://steep//lib/steep/interface/function.rb#81
  def to_ary; end

  class << self
    # source://steep//lib/steep/interface/function.rb#148
    def build(required:, optional:, rest:); end

    # source://steep//lib/steep/interface/function.rb#312
    def merge_for_intersection(xs, ys); end

    # source://steep//lib/steep/interface/function.rb#160
    def merge_for_overload(xs, ys); end

    # source://steep//lib/steep/interface/function.rb#237
    def merge_for_union(xs, ys); end

    # source://steep//lib/steep/interface/function.rb#73
    def optional(type, tail = T.unsafe(nil)); end

    # source://steep//lib/steep/interface/function.rb#69
    def required(type, tail = T.unsafe(nil)); end

    # source://steep//lib/steep/interface/function.rb#77
    def rest(type, tail = T.unsafe(nil)); end
  end
end

# source://steep//lib/steep/interface/function.rb#17
class Steep::Interface::Function::Params::PositionalParams::Base
  # source://steep//lib/steep/interface/function.rb#20
  def initialize(type); end

  # source://steep//lib/steep/interface/function.rb#24
  def ==(other); end

  # source://steep//lib/steep/interface/function.rb#24
  def eql?(other); end

  # source://steep//lib/steep/interface/function.rb#30
  def hash; end

  # source://steep//lib/steep/interface/function.rb#48
  def map_type(&block); end

  # source://steep//lib/steep/interface/function.rb#34
  def subst(s); end

  # source://steep//lib/steep/interface/function.rb#18
  def type; end

  # source://steep//lib/steep/interface/function.rb#44
  def var_type; end
end

# source://steep//lib/steep/interface/function.rb#58
class Steep::Interface::Function::Params::PositionalParams::Optional < ::Steep::Interface::Function::Params::PositionalParams::Base; end

# source://steep//lib/steep/interface/function.rb#57
class Steep::Interface::Function::Params::PositionalParams::Required < ::Steep::Interface::Function::Params::PositionalParams::Base; end

# source://steep//lib/steep/interface/function.rb#59
class Steep::Interface::Function::Params::PositionalParams::Rest < ::Steep::Interface::Function::Params::PositionalParams::Base; end

# source://steep//lib/steep/interface/function.rb#5
module Steep::Interface::Function::Params::Utils
  # source://steep//lib/steep/interface/function.rb#11
  def intersection(*types); end

  # source://steep//lib/steep/interface/function.rb#6
  def union(*types, null: T.unsafe(nil)); end
end

# source://steep//lib/steep/interface/method_type.rb#3
class Steep::Interface::MethodType
  # source://steep//lib/steep/interface/method_type.rb#9
  def initialize(type_params:, type:, block:, method_decls:); end

  # source://steep//lib/steep/interface/method_type.rb#285
  def &(other); end

  # source://steep//lib/steep/interface/method_type.rb#133
  def +(other); end

  # source://steep//lib/steep/interface/method_type.rb#16
  def ==(other); end

  # source://steep//lib/steep/interface/method_type.rb#6
  def block; end

  # source://steep//lib/steep/interface/method_type.rb#59
  def each_type(&block); end

  # source://steep//lib/steep/interface/method_type.rb#16
  def eql?(other); end

  # source://steep//lib/steep/interface/method_type.rb#137
  def equals_modulo_type_params?(other); end

  # source://steep//lib/steep/interface/method_type.rb#29
  def free_variables; end

  # source://steep//lib/steep/interface/method_type.rb#25
  def hash; end

  # source://steep//lib/steep/interface/method_type.rb#72
  def instantiate(s); end

  # source://steep//lib/steep/interface/method_type.rb#95
  def map_type(&block); end

  # source://steep//lib/steep/interface/method_type.rb#7
  def method_decls; end

  # source://steep//lib/steep/interface/method_type.rb#39
  def subst(s); end

  # source://steep//lib/steep/interface/method_type.rb#86
  def to_s; end

  # source://steep//lib/steep/interface/method_type.rb#5
  def type; end

  # source://steep//lib/steep/interface/method_type.rb#4
  def type_params; end

  # source://steep//lib/steep/interface/method_type.rb#104
  def unify_overload(other); end

  # source://steep//lib/steep/interface/method_type.rb#79
  def with(type_params: T.unsafe(nil), type: T.unsafe(nil), block: T.unsafe(nil), method_decls: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/method_type.rb#236
  def |(other); end

  class << self
    # source://steep//lib/steep/interface/method_type.rb#163
    def intersection(type1, type2, check); end

    # source://steep//lib/steep/interface/method_type.rb#173
    def try_type_params(type1, type2, check, generate, relation); end

    # source://steep//lib/steep/interface/method_type.rb#153
    def union(type1, type2, check); end
  end
end

# source://steep//lib/steep/interface/shape.rb#3
class Steep::Interface::Shape
  # source://steep//lib/steep/interface/shape.rb#98
  def initialize(type:, private:, methods: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/shape.rb#96
  def methods; end

  # source://steep//lib/steep/interface/shape.rb#123
  def private?; end

  # source://steep//lib/steep/interface/shape.rb#127
  def public?; end

  # source://steep//lib/steep/interface/shape.rb#112
  def subst(s, type: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/shape.rb#104
  def to_s; end

  # source://steep//lib/steep/interface/shape.rb#95
  def type; end

  # source://steep//lib/steep/interface/shape.rb#108
  def update(type: T.unsafe(nil), methods: T.unsafe(nil)); end
end

# source://steep//lib/steep/interface/shape.rb#4
class Steep::Interface::Shape::Entry
  # source://steep//lib/steep/interface/shape.rb#7
  def initialize(method_types:); end

  # source://steep//lib/steep/interface/shape.rb#5
  def method_types; end

  # source://steep//lib/steep/interface/shape.rb#11
  def to_s; end
end

# source://steep//lib/steep/interface/shape.rb#16
class Steep::Interface::Shape::Methods
  include ::Enumerable

  # source://steep//lib/steep/interface/shape.rb#21
  def initialize(substs:, methods:); end

  # source://steep//lib/steep/interface/shape.rb#85
  def +(other); end

  # source://steep//lib/steep/interface/shape.rb#36
  def [](name); end

  # source://steep//lib/steep/interface/shape.rb#31
  def []=(name, entry); end

  # source://steep//lib/steep/interface/shape.rb#48
  def each(&block); end

  # source://steep//lib/steep/interface/shape.rb#59
  def each_name(&block); end

  # source://steep//lib/steep/interface/shape.rb#27
  def key?(name); end

  # source://steep//lib/steep/interface/shape.rb#79
  def merge!(other); end

  # source://steep//lib/steep/interface/shape.rb#17
  def methods; end

  # source://steep//lib/steep/interface/shape.rb#75
  def push_substitution(subst); end

  # source://steep//lib/steep/interface/shape.rb#17
  def resolved_methods; end

  # source://steep//lib/steep/interface/shape.rb#67
  def subst; end

  # source://steep//lib/steep/interface/shape.rb#17
  def substs; end
end

# source://steep//lib/steep/interface/substitution.rb#3
class Steep::Interface::Substitution
  # source://steep//lib/steep/interface/substitution.rb#21
  def initialize(dictionary:, instance_type:, module_type:, self_type:); end

  # source://steep//lib/steep/interface/substitution.rb#67
  def [](key); end

  # source://steep//lib/steep/interface/substitution.rb#148
  def add!(v, ty); end

  # source://steep//lib/steep/interface/substitution.rb#75
  def apply?(type); end

  # source://steep//lib/steep/interface/substitution.rb#16
  def dictionary; end

  # source://steep//lib/steep/interface/substitution.rb#42
  def domain; end

  # source://steep//lib/steep/interface/substitution.rb#35
  def empty?; end

  # source://steep//lib/steep/interface/substitution.rb#103
  def except(vars); end

  # source://steep//lib/steep/interface/substitution.rb#112
  def except!(vars); end

  # source://steep//lib/steep/interface/substitution.rb#17
  def instance_type; end

  # source://steep//lib/steep/interface/substitution.rb#71
  def key?(var); end

  # source://steep//lib/steep/interface/substitution.rb#141
  def merge(s); end

  # source://steep//lib/steep/interface/substitution.rb#120
  def merge!(s, overwrite: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/substitution.rb#18
  def module_type; end

  # source://steep//lib/steep/interface/substitution.rb#19
  def self_type; end

  # source://steep//lib/steep/interface/substitution.rb#53
  def to_s; end

  class << self
    # source://steep//lib/steep/interface/substitution.rb#90
    def build(vars, types = T.unsafe(nil), instance_type: T.unsafe(nil), module_type: T.unsafe(nil), self_type: T.unsafe(nil)); end

    # source://steep//lib/steep/interface/substitution.rb#28
    def empty; end
  end
end

# source://steep//lib/steep/interface/substitution.rb#4
class Steep::Interface::Substitution::InvalidSubstitutionError < ::StandardError
  # source://steep//lib/steep/interface/substitution.rb#8
  def initialize(vars_size:, types_size:); end

  # source://steep//lib/steep/interface/substitution.rb#6
  def types_size; end

  # source://steep//lib/steep/interface/substitution.rb#5
  def vars_size; end
end

# source://steep//lib/steep/interface/type_param.rb#3
class Steep::Interface::TypeParam
  # source://steep//lib/steep/interface/type_param.rb#10
  def initialize(name:, upper_bound:, variance:, unchecked:, location: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/type_param.rb#18
  def ==(other); end

  # source://steep//lib/steep/interface/type_param.rb#18
  def eql?(other); end

  # source://steep//lib/steep/interface/type_param.rb#28
  def hash; end

  # source://steep//lib/steep/interface/type_param.rb#8
  def location; end

  # source://steep//lib/steep/interface/type_param.rb#4
  def name; end

  # source://steep//lib/steep/interface/type_param.rb#93
  def subst(s); end

  # source://steep//lib/steep/interface/type_param.rb#60
  def to_s; end

  # source://steep//lib/steep/interface/type_param.rb#7
  def unchecked; end

  # source://steep//lib/steep/interface/type_param.rb#83
  def update(name: T.unsafe(nil), upper_bound: T.unsafe(nil), variance: T.unsafe(nil), unchecked: T.unsafe(nil), location: T.unsafe(nil)); end

  # source://steep//lib/steep/interface/type_param.rb#5
  def upper_bound; end

  # source://steep//lib/steep/interface/type_param.rb#6
  def variance; end

  class << self
    # source://steep//lib/steep/interface/type_param.rb#32
    def rename(params, conflicting_names = T.unsafe(nil), new_names = T.unsafe(nil)); end
  end
end

# source://steep//lib/steep/module_helper.rb#2
module Steep::ModuleHelper
  # source://steep//lib/steep/module_helper.rb#3
  def module_name_from_node(parent_node, constant_name); end

  # source://steep//lib/steep/module_helper.rb#9
  def namespace_from_node(node); end
end

# source://steep//lib/steep/node_helper.rb#2
module Steep::NodeHelper
  # source://steep//lib/steep/node_helper.rb#244
  def clone_node(node); end

  # source://steep//lib/steep/node_helper.rb#97
  def deconstruct_case_node(node); end

  # source://steep//lib/steep/node_helper.rb#110
  def deconstruct_case_node!(node); end

  # source://steep//lib/steep/node_helper.rb#51
  def deconstruct_if_node(node); end

  # source://steep//lib/steep/node_helper.rb#62
  def deconstruct_if_node!(node); end

  # source://steep//lib/steep/node_helper.rb#172
  def deconstruct_resbody_node(node); end

  # source://steep//lib/steep/node_helper.rb#184
  def deconstruct_resbody_node!(node); end

  # source://steep//lib/steep/node_helper.rb#146
  def deconstruct_rescue_node(node); end

  # source://steep//lib/steep/node_helper.rb#160
  def deconstruct_rescue_node!(node); end

  # source://steep//lib/steep/node_helper.rb#196
  def deconstruct_send_node(node); end

  # source://steep//lib/steep/node_helper.rb#209
  def deconstruct_send_node!(node); end

  # source://steep//lib/steep/node_helper.rb#221
  def deconstruct_sendish_and_block_nodes(*nodes); end

  # source://steep//lib/steep/node_helper.rb#122
  def deconstruct_when_node(node); end

  # source://steep//lib/steep/node_helper.rb#134
  def deconstruct_when_node!(node); end

  # source://steep//lib/steep/node_helper.rb#74
  def deconstruct_whileish_node(node); end

  # source://steep//lib/steep/node_helper.rb#85
  def deconstruct_whileish_node!(node); end

  # source://steep//lib/steep/node_helper.rb#3
  def each_child_node(node, &block); end

  # source://steep//lib/steep/node_helper.rb#15
  def each_descendant_node(node, &block); end

  # source://steep//lib/steep/node_helper.rb#114
  def test_case_node(node); end

  # source://steep//lib/steep/node_helper.rb#66
  def test_if_node(node); end

  # source://steep//lib/steep/node_helper.rb#188
  def test_resbody_node(node); end

  # source://steep//lib/steep/node_helper.rb#164
  def test_rescue_node(node); end

  # source://steep//lib/steep/node_helper.rb#213
  def test_send_node(node); end

  # source://steep//lib/steep/node_helper.rb#138
  def test_when_node(node); end

  # source://steep//lib/steep/node_helper.rb#89
  def test_whileish_node(node); end

  # source://steep//lib/steep/node_helper.rb#26
  def value_node?(node); end
end

# source://steep//lib/steep/path_helper.rb#2
module Steep::PathHelper
  private

  # source://steep//lib/steep/path_helper.rb#5
  def to_pathname(uri, dosish: T.unsafe(nil)); end

  # source://steep//lib/steep/path_helper.rb#15
  def to_pathname!(uri, dosish: T.unsafe(nil)); end

  # source://steep//lib/steep/path_helper.rb#19
  def to_uri(path, dosish: T.unsafe(nil)); end

  class << self
    # source://steep//lib/steep/path_helper.rb#5
    def to_pathname(uri, dosish: T.unsafe(nil)); end

    # source://steep//lib/steep/path_helper.rb#15
    def to_pathname!(uri, dosish: T.unsafe(nil)); end

    # source://steep//lib/steep/path_helper.rb#19
    def to_uri(path, dosish: T.unsafe(nil)); end
  end
end

# source://steep//lib/steep/project.rb#2
class Steep::Project
  # source://steep//lib/steep/project.rb#7
  def initialize(steepfile_path:, base_dir: T.unsafe(nil)); end

  # source://steep//lib/steep/project.rb#29
  def absolute_path(path); end

  # source://steep//lib/steep/project.rb#5
  def base_dir; end

  # source://steep//lib/steep/project.rb#23
  def relative_path(path); end

  # source://steep//lib/steep/project.rb#4
  def steepfile_path; end

  # source://steep//lib/steep/project.rb#33
  def target_for_source_path(path); end

  # source://steep//lib/steep/project.rb#3
  def targets; end

  # source://steep//lib/steep/project.rb#39
  def targets_for_path(path); end
end

# source://steep//lib/steep/project/dsl.rb#3
class Steep::Project::DSL
  # source://steep//lib/steep/project/dsl.rb#171
  def initialize(project:); end

  # source://steep//lib/steep/project/dsl.rb#158
  def project; end

  # source://steep//lib/steep/project/dsl.rb#185
  def target(name, template: T.unsafe(nil), &block); end

  class << self
    # source://steep//lib/steep/project/dsl.rb#179
    def parse(project, code, filename: T.unsafe(nil)); end

    # source://steep//lib/steep/project/dsl.rb#175
    def register_template(name, target); end

    # source://steep//lib/steep/project/dsl.rb#167
    def templates; end
  end
end

# source://steep//lib/steep/project/dsl.rb#4
class Steep::Project::DSL::TargetDSL
  # source://steep//lib/steep/project/dsl.rb#17
  def initialize(name, sources: T.unsafe(nil), libraries: T.unsafe(nil), signatures: T.unsafe(nil), ignored_sources: T.unsafe(nil), repo_paths: T.unsafe(nil), code_diagnostics_config: T.unsafe(nil), project: T.unsafe(nil), collection_config_path: T.unsafe(nil)); end

  # source://steep//lib/steep/project/dsl.rb#45
  def check(*args); end

  # source://steep//lib/steep/project/dsl.rb#13
  def code_diagnostics_config; end

  # source://steep//lib/steep/project/dsl.rb#149
  def collection_config(path); end

  # source://steep//lib/steep/project/dsl.rb#15
  def collection_config_path; end

  # source://steep//lib/steep/project/dsl.rb#137
  def configure_code_diagnostics(hash = T.unsafe(nil)); end

  # source://steep//lib/steep/project/dsl.rb#11
  def core_root; end

  # source://steep//lib/steep/project/dsl.rb#153
  def disable_collection; end

  # source://steep//lib/steep/project/dsl.rb#49
  def ignore(*args); end

  # source://steep//lib/steep/project/dsl.rb#9
  def ignored_sources; end

  # source://steep//lib/steep/project/dsl.rb#7
  def libraries; end

  # source://steep//lib/steep/project/dsl.rb#53
  def library(*args); end

  # source://steep//lib/steep/project/dsl.rb#5
  def name; end

  # source://steep//lib/steep/project/dsl.rb#120
  def no_builtin!(value = T.unsafe(nil)); end

  # source://steep//lib/steep/project/dsl.rb#14
  def project; end

  # source://steep//lib/steep/project/dsl.rb#145
  def project!; end

  # source://steep//lib/steep/project/dsl.rb#133
  def repo_path(*paths); end

  # source://steep//lib/steep/project/dsl.rb#12
  def repo_paths; end

  # source://steep//lib/steep/project/dsl.rb#105
  def signature(*args); end

  # source://steep//lib/steep/project/dsl.rb#8
  def signatures; end

  # source://steep//lib/steep/project/dsl.rb#6
  def sources; end

  # source://steep//lib/steep/project/dsl.rb#128
  def stdlib_path(core_root:, stdlib_root:); end

  # source://steep//lib/steep/project/dsl.rb#10
  def stdlib_root; end

  # source://steep//lib/steep/project/dsl.rb#57
  def typing_options(level = T.unsafe(nil), **hash); end

  # source://steep//lib/steep/project/dsl.rb#109
  def update(name: T.unsafe(nil), sources: T.unsafe(nil), libraries: T.unsafe(nil), ignored_sources: T.unsafe(nil), signatures: T.unsafe(nil), project: T.unsafe(nil)); end

  # source://steep//lib/steep/project/dsl.rb#124
  def vendor(dir = T.unsafe(nil), stdlib: T.unsafe(nil), gems: T.unsafe(nil)); end

  private

  # source://steep//lib/steep/project/dsl.rb#31
  def initialize_copy(other); end
end

# source://steep//lib/steep/project/options.rb#3
class Steep::Project::Options
  # source://steep//lib/steep/project/options.rb#20
  def initialize; end

  # source://steep//lib/steep/project/options.rb#18
  def collection_config_path; end

  # source://steep//lib/steep/project/options.rb#18
  def collection_config_path=(_arg0); end

  # source://steep//lib/steep/project/options.rb#53
  def collection_lock; end

  # source://steep//lib/steep/project/options.rb#25
  def collection_lock_path; end

  # source://steep//lib/steep/project/options.rb#16
  def libraries; end

  # source://steep//lib/steep/project/options.rb#31
  def load_collection_lock(force: T.unsafe(nil)); end

  # source://steep//lib/steep/project/options.rb#17
  def paths; end

  # source://steep//lib/steep/project/options.rb#17
  def paths=(_arg0); end
end

# source://steep//lib/steep/project/options.rb#4
class Steep::Project::Options::PathOptions < ::Struct
  def core_root; end
  def core_root=(_); end

  # source://steep//lib/steep/project/options.rb#11
  def customized_core?; end

  # source://steep//lib/steep/project/options.rb#7
  def customized_stdlib?; end

  def repo_paths; end
  def repo_paths=(_); end
  def stdlib_root; end
  def stdlib_root=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/project/pattern.rb#3
class Steep::Project::Pattern
  # source://steep//lib/steep/project/pattern.rb#10
  def initialize(patterns:, ext:, ignores: T.unsafe(nil)); end

  # source://steep//lib/steep/project/pattern.rb#31
  def =~(path); end

  # source://steep//lib/steep/project/pattern.rb#8
  def ext; end

  # source://steep//lib/steep/project/pattern.rb#43
  def ignore?(path); end

  # source://steep//lib/steep/project/pattern.rb#7
  def ignore_prefixes; end

  # source://steep//lib/steep/project/pattern.rb#5
  def ignores; end

  # source://steep//lib/steep/project/pattern.rb#39
  def match?(path); end

  # source://steep//lib/steep/project/pattern.rb#4
  def patterns; end

  # source://steep//lib/steep/project/pattern.rb#6
  def prefixes; end

  # source://steep//lib/steep/project/pattern.rb#47
  def test_string(path, patterns, prefixes); end
end

# source://steep//lib/steep/project/target.rb#3
class Steep::Project::Target
  # source://steep//lib/steep/project/target.rb#11
  def initialize(name:, options:, source_pattern:, signature_pattern:, code_diagnostics_config:); end

  # source://steep//lib/steep/project/target.rb#9
  def code_diagnostics_config; end

  # source://steep//lib/steep/project/target.rb#4
  def name; end

  # source://steep//lib/steep/project/target.rb#27
  def new_env_loader(project:); end

  # source://steep//lib/steep/project/target.rb#5
  def options; end

  # source://steep//lib/steep/project/target.rb#23
  def possible_signature_file?(path); end

  # source://steep//lib/steep/project/target.rb#19
  def possible_source_file?(path); end

  # source://steep//lib/steep/project/target.rb#8
  def signature_pattern; end

  # source://steep//lib/steep/project/target.rb#7
  def source_pattern; end

  class << self
    # source://steep//lib/steep/project/target.rb#31
    def construct_env_loader(options:, project:); end
  end
end

# source://steep//lib/steep.rb#209
class Steep::Sampler
  # source://steep//lib/steep.rb#210
  def initialize; end

  # source://steep//lib/steep.rb#236
  def average; end

  # source://steep//lib/steep.rb#224
  def count; end

  # source://steep//lib/steep.rb#244
  def percentile(p); end

  # source://steep//lib/steep.rb#214
  def sample(message); end

  # source://steep//lib/steep.rb#232
  def slowests(num); end

  # source://steep//lib/steep.rb#228
  def total; end
end

# source://steep//lib/steep/server/delay_queue.rb#2
module Steep::Server; end

# source://steep//lib/steep/server/base_worker.rb#3
class Steep::Server::BaseWorker
  # source://steep//lib/steep/server/base_worker.rb#11
  def initialize(project:, reader:, writer:); end

  # source://steep//lib/steep/server/base_worker.rb#36
  def handle_job(job); end

  # source://steep//lib/steep/server/base_worker.rb#32
  def handle_request(request); end

  # source://steep//lib/steep/server/base_worker.rb#6
  def project; end

  # source://steep//lib/steep/server/base_worker.rb#7
  def queue; end

  # source://steep//lib/steep/server/base_worker.rb#7
  def reader; end

  # source://steep//lib/steep/server/base_worker.rb#40
  def run; end

  # source://steep//lib/steep/server/base_worker.rb#28
  def skip_job?; end

  # source://steep//lib/steep/server/base_worker.rb#20
  def skip_jobs_after_shutdown!(flag = T.unsafe(nil)); end

  # source://steep//lib/steep/server/base_worker.rb#24
  def skip_jobs_after_shutdown?; end

  # source://steep//lib/steep/server/base_worker.rb#7
  def writer; end
end

# source://steep//lib/steep/server/base_worker.rb#4
Steep::Server::BaseWorker::LSP = LanguageServer::Protocol

# source://steep//lib/steep/server/base_worker.rb#9
class Steep::Server::BaseWorker::ShutdownJob < ::Struct
  def id; end
  def id=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/change_buffer.rb#3
module Steep::Server::ChangeBuffer
  # source://steep//lib/steep/server/change_buffer.rb#5
  def buffered_changes; end

  # source://steep//lib/steep/server/change_buffer.rb#42
  def collect_changes(request); end

  # source://steep//lib/steep/server/change_buffer.rb#27
  def load_files(project:, commandline_args:); end

  # source://steep//lib/steep/server/change_buffer.rb#4
  def mutex; end

  # source://steep//lib/steep/server/change_buffer.rb#13
  def pop_buffer; end

  # source://steep//lib/steep/server/change_buffer.rb#7
  def push_buffer; end

  # source://steep//lib/steep/server/change_buffer.rb#65
  def reset_change(uri:, text:); end
end

# source://steep//lib/steep/server/delay_queue.rb#3
class Steep::Server::DelayQueue
  # source://steep//lib/steep/server/delay_queue.rb#6
  def initialize(delay:); end

  # source://steep//lib/steep/server/delay_queue.rb#4
  def delay; end

  # source://steep//lib/steep/server/delay_queue.rb#34
  def execute(&block); end

  # source://steep//lib/steep/server/delay_queue.rb#4
  def last_task; end

  # source://steep//lib/steep/server/delay_queue.rb#4
  def queue; end

  # source://steep//lib/steep/server/delay_queue.rb#4
  def thread; end
end

# source://steep//lib/steep/server/interaction_worker.rb#3
class Steep::Server::InteractionWorker < ::Steep::Server::BaseWorker
  include ::Steep::Server::ChangeBuffer

  # source://steep//lib/steep/server/interaction_worker.rb#15
  def initialize(project:, reader:, writer:, queue: T.unsafe(nil)); end

  # source://steep//lib/steep/server/interaction_worker.rb#324
  def format_completion_item(item); end

  # source://steep//lib/steep/server/interaction_worker.rb#255
  def format_completion_item_for_rbs(sig_service, type_name, job, complete_text, prefix_size); end

  # source://steep//lib/steep/server/interaction_worker.rb#24
  def handle_job(job); end

  # source://steep//lib/steep/server/interaction_worker.rb#82
  def handle_request(request); end

  # source://steep//lib/steep/server/interaction_worker.rb#13
  def mutex; end

  # source://steep//lib/steep/server/interaction_worker.rb#148
  def process_completion(job); end

  # source://steep//lib/steep/server/interaction_worker.rb#122
  def process_hover(job); end

  # source://steep//lib/steep/server/interaction_worker.rb#61
  def process_latest_job(job); end

  # source://steep//lib/steep/server/interaction_worker.rb#448
  def process_signature_help(job); end

  # source://steep//lib/steep/server/interaction_worker.rb#73
  def queue_job(job); end

  # source://steep//lib/steep/server/interaction_worker.rb#13
  def service; end
end

# source://steep//lib/steep/server/interaction_worker.rb#6
class Steep::Server::InteractionWorker::ApplyChangeJob; end

# source://steep//lib/steep/server/interaction_worker.rb#8
class Steep::Server::InteractionWorker::CompletionJob < ::Struct
  def column; end
  def column=(_); end
  def id; end
  def id=(_); end
  def line; end
  def line=(_); end
  def path; end
  def path=(_); end
  def trigger; end
  def trigger=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/interaction_worker.rb#7
class Steep::Server::InteractionWorker::HoverJob < ::Struct
  def column; end
  def column=(_); end
  def id; end
  def id=(_); end
  def line; end
  def line=(_); end
  def path; end
  def path=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/interaction_worker.rb#11
Steep::Server::InteractionWorker::LSP = LanguageServer::Protocol

# source://steep//lib/steep/server/interaction_worker.rb#9
class Steep::Server::InteractionWorker::SignatureHelpJob < ::Struct
  def column; end
  def column=(_); end
  def id; end
  def id=(_); end
  def line; end
  def line=(_); end
  def path; end
  def path=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/lsp_formatter.rb#3
module Steep::Server::LSPFormatter
  include ::Steep::Services

  private

  # source://steep//lib/steep/server/lsp_formatter.rb#393
  def declaration_summary(decl); end

  # source://steep//lib/steep/server/lsp_formatter.rb#326
  def format_comment(comment, header: T.unsafe(nil), &block); end

  # source://steep//lib/steep/server/lsp_formatter.rb#292
  def format_comments(comments); end

  # source://steep//lib/steep/server/lsp_formatter.rb#210
  def format_completion_docs(item); end

  # source://steep//lib/steep/server/lsp_formatter.rb#20
  def format_hover_content(content); end

  # source://steep//lib/steep/server/lsp_formatter.rb#421
  def format_method_item_doc(method_types, method_names, comments, footer = T.unsafe(nil)); end

  # source://steep//lib/steep/server/lsp_formatter.rb#269
  def format_rbs_completion_docs(type_name, decl, comments); end

  # source://steep//lib/steep/server/lsp_formatter.rb#349
  def instance_variable(name, type); end

  # source://steep//lib/steep/server/lsp_formatter.rb#343
  def local_variable(name, type); end

  # source://steep//lib/steep/server/lsp_formatter.rb#10
  def markup_content(string = T.unsafe(nil), &block); end

  # source://steep//lib/steep/server/lsp_formatter.rb#385
  def name_and_args(name, args); end

  # source://steep//lib/steep/server/lsp_formatter.rb#355
  def name_and_params(name, params); end

  class << self
    # source://steep//lib/steep/server/lsp_formatter.rb#393
    def declaration_summary(decl); end

    # source://steep//lib/steep/server/lsp_formatter.rb#326
    def format_comment(comment, header: T.unsafe(nil), &block); end

    # source://steep//lib/steep/server/lsp_formatter.rb#292
    def format_comments(comments); end

    # source://steep//lib/steep/server/lsp_formatter.rb#210
    def format_completion_docs(item); end

    # source://steep//lib/steep/server/lsp_formatter.rb#20
    def format_hover_content(content); end

    # source://steep//lib/steep/server/lsp_formatter.rb#421
    def format_method_item_doc(method_types, method_names, comments, footer = T.unsafe(nil)); end

    # source://steep//lib/steep/server/lsp_formatter.rb#269
    def format_rbs_completion_docs(type_name, decl, comments); end

    # source://steep//lib/steep/server/lsp_formatter.rb#349
    def instance_variable(name, type); end

    # source://steep//lib/steep/server/lsp_formatter.rb#343
    def local_variable(name, type); end

    # source://steep//lib/steep/server/lsp_formatter.rb#10
    def markup_content(string = T.unsafe(nil), &block); end

    # source://steep//lib/steep/server/lsp_formatter.rb#385
    def name_and_args(name, args); end

    # source://steep//lib/steep/server/lsp_formatter.rb#355
    def name_and_params(name, params); end
  end
end

# source://steep//lib/steep/server/lsp_formatter.rb#6
Steep::Server::LSPFormatter::LSP = LanguageServer::Protocol

# source://steep//lib/steep/server/master.rb#3
class Steep::Server::Master
  # source://steep//lib/steep/server/master.rb#414
  def initialize(project:, reader:, writer:, interaction_worker:, typecheck_workers:, queue: T.unsafe(nil)); end

  # source://steep//lib/steep/server/master.rb#965
  def broadcast_notification(message); end

  # source://steep//lib/steep/server/master.rb#399
  def commandline_args; end

  # source://steep//lib/steep/server/master.rb#407
  def controller; end

  # source://steep//lib/steep/server/master.rb#406
  def current_type_check_request; end

  # source://steep//lib/steep/server/master.rb#526
  def each_worker(&block); end

  # source://steep//lib/steep/server/master.rb#543
  def file_system_watcher_supported?; end

  # source://steep//lib/steep/server/master.rb#977
  def fresh_request_id; end

  # source://steep//lib/steep/server/master.rb#992
  def group_request; end

  # source://steep//lib/steep/server/master.rb#410
  def initialize_params; end

  # source://steep//lib/steep/server/master.rb#401
  def interaction_worker; end

  # source://steep//lib/steep/server/master.rb#404
  def job_queue; end

  # source://steep//lib/steep/server/master.rb#998
  def kill; end

  # source://steep//lib/steep/server/master.rb#940
  def on_type_check_update(guid:, path:); end

  # source://steep//lib/steep/server/master.rb#535
  def pathname(uri); end

  # source://steep//lib/steep/server/master.rb#547
  def process_message_from_client(message); end

  # source://steep//lib/steep/server/master.rb#844
  def process_message_from_worker(message, worker:); end

  # source://steep//lib/steep/server/master.rb#397
  def project; end

  # source://steep//lib/steep/server/master.rb#398
  def reader; end

  # source://steep//lib/steep/server/master.rb#408
  def result_controller; end

  # source://steep//lib/steep/server/master.rb#972
  def send_notification(message, worker:); end

  # source://steep//lib/steep/server/master.rb#981
  def send_request(method:, worker:, id: T.unsafe(nil), params: T.unsafe(nil), &block); end

  # source://steep//lib/steep/server/master.rb#430
  def start; end

  # source://steep//lib/steep/server/master.rb#869
  def start_type_check(request, last_request:, start_progress:); end

  # source://steep//lib/steep/server/master.rb#412
  def start_type_checking_queue; end

  # source://steep//lib/steep/server/master.rb#411
  def typecheck_automatically; end

  # source://steep//lib/steep/server/master.rb#411
  def typecheck_automatically=(_arg0); end

  # source://steep//lib/steep/server/master.rb#402
  def typecheck_workers; end

  # source://steep//lib/steep/server/master.rb#539
  def work_done_progress_supported?; end

  # source://steep//lib/steep/server/master.rb#398
  def writer; end
end

# source://steep//lib/steep/server/master.rb#267
class Steep::Server::Master::GroupHandler
  # source://steep//lib/steep/server/master.rb#272
  def initialize; end

  # source://steep//lib/steep/server/master.rb#295
  def <<(handler); end

  # source://steep//lib/steep/server/master.rb#291
  def completed?; end

  # source://steep//lib/steep/server/master.rb#270
  def completion_handler; end

  # source://steep//lib/steep/server/master.rb#269
  def handlers; end

  # source://steep//lib/steep/server/master.rb#299
  def on_completion(&block); end

  # source://steep//lib/steep/server/master.rb#277
  def process_response(message); end

  # source://steep//lib/steep/server/master.rb#268
  def request; end
end

# source://steep//lib/steep/server/master.rb#4
Steep::Server::Master::LSP = LanguageServer::Protocol

# source://steep//lib/steep/server/master.rb#331
module Steep::Server::Master::MessageUtils
  # source://steep//lib/steep/server/master.rb#360
  def id; end

  # source://steep//lib/steep/server/master.rb#356
  def method; end

  # source://steep//lib/steep/server/master.rb#348
  def notification?; end

  # source://steep//lib/steep/server/master.rb#368
  def params; end

  # source://steep//lib/steep/server/master.rb#332
  def request?; end

  # source://steep//lib/steep/server/master.rb#340
  def response?; end

  # source://steep//lib/steep/server/master.rb#364
  def result; end
end

# source://steep//lib/steep/server/master.rb#373
class Steep::Server::Master::ReceiveMessageJob < ::Struct
  include ::Steep::Server::Master::MessageUtils

  def message; end
  def message=(_); end

  # source://steep//lib/steep/server/master.rb#376
  def response?; end

  def source; end
  def source=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/master.rb#304
class Steep::Server::Master::ResultController
  # source://steep//lib/steep/server/master.rb#307
  def initialize; end

  # source://steep//lib/steep/server/master.rb#311
  def <<(handler); end

  # source://steep//lib/steep/server/master.rb#305
  def handlers; end

  # source://steep//lib/steep/server/master.rb#321
  def process_response(message); end

  # source://steep//lib/steep/server/master.rb#315
  def request_group; end
end

# source://steep//lib/steep/server/master.rb#232
class Steep::Server::Master::ResultHandler
  # source://steep//lib/steep/server/master.rb#237
  def initialize(request:); end

  # source://steep//lib/steep/server/master.rb#258
  def completed?; end

  # source://steep//lib/steep/server/master.rb#234
  def completion_handler; end

  # source://steep//lib/steep/server/master.rb#262
  def on_completion(&block); end

  # source://steep//lib/steep/server/master.rb#244
  def process_response(message); end

  # source://steep//lib/steep/server/master.rb#233
  def request; end

  # source://steep//lib/steep/server/master.rb#235
  def response; end

  # source://steep//lib/steep/server/master.rb#254
  def result; end
end

# source://steep//lib/steep/server/master.rb#383
class Steep::Server::Master::SendMessageJob < ::Struct
  include ::Steep::Server::Master::MessageUtils

  def dest; end
  def dest=(_); end
  def message; end
  def message=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end

    # source://steep//lib/steep/server/master.rb#390
    def to_client(message:); end

    # source://steep//lib/steep/server/master.rb#386
    def to_worker(worker, message:); end
  end
end

# source://steep//lib/steep/server/master.rb#81
class Steep::Server::Master::TypeCheckController
  # source://steep//lib/steep/server/master.rb#143
  def initialize(project:); end

  # source://steep//lib/steep/server/master.rb#84
  def changed_paths; end

  # source://steep//lib/steep/server/master.rb#150
  def load(command_line_args:); end

  # source://steep//lib/steep/server/master.rb#194
  def make_request(guid: T.unsafe(nil), last_request: T.unsafe(nil), include_unchanged: T.unsafe(nil)); end

  # source://steep//lib/steep/server/master.rb#83
  def priority_paths; end

  # source://steep//lib/steep/server/master.rb#82
  def project; end

  # source://steep//lib/steep/server/master.rb#170
  def push_changes(path); end

  # source://steep//lib/steep/server/master.rb#85
  def target_paths; end

  # source://steep//lib/steep/server/master.rb#180
  def update_priority(open: T.unsafe(nil), close: T.unsafe(nil)); end
end

# source://steep//lib/steep/server/master.rb#87
class Steep::Server::Master::TypeCheckController::TargetPaths
  # source://steep//lib/steep/server/master.rb#94
  def initialize(project:, target:); end

  # source://steep//lib/steep/server/master.rb#118
  def <<(path, library: T.unsafe(nil)); end

  # source://steep//lib/steep/server/master.rb#118
  def add(path, library: T.unsafe(nil)); end

  # source://steep//lib/steep/server/master.rb#102
  def all_paths; end

  # source://steep//lib/steep/server/master.rb#114
  def code_path?(path); end

  # source://steep//lib/steep/server/master.rb#90
  def code_paths; end

  # source://steep//lib/steep/server/master.rb#106
  def library_path?(path); end

  # source://steep//lib/steep/server/master.rb#92
  def library_paths; end

  # source://steep//lib/steep/server/master.rb#88
  def project; end

  # source://steep//lib/steep/server/master.rb#110
  def signature_path?(path); end

  # source://steep//lib/steep/server/master.rb#91
  def signature_paths; end

  # source://steep//lib/steep/server/master.rb#89
  def target; end
end

# source://steep//lib/steep/server/master.rb#6
class Steep::Server::Master::TypeCheckRequest
  # source://steep//lib/steep/server/master.rb#14
  def initialize(guid:); end

  # source://steep//lib/steep/server/master.rb#45
  def all_paths; end

  # source://steep//lib/steep/server/master.rb#27
  def as_json(assignment:); end

  # source://steep//lib/steep/server/master.rb#55
  def checked(path); end

  # source://steep//lib/steep/server/master.rb#12
  def checked_paths; end

  # source://steep//lib/steep/server/master.rb#49
  def checking_path?(path); end

  # source://steep//lib/steep/server/master.rb#10
  def code_paths; end

  # source://steep//lib/steep/server/master.rb#60
  def finished?; end

  # source://steep//lib/steep/server/master.rb#7
  def guid; end

  # source://steep//lib/steep/server/master.rb#8
  def library_paths; end

  # source://steep//lib/steep/server/master.rb#41
  def percentage; end

  # source://steep//lib/steep/server/master.rb#11
  def priority_paths; end

  # source://steep//lib/steep/server/master.rb#9
  def signature_paths; end

  # source://steep//lib/steep/server/master.rb#37
  def total; end

  # source://steep//lib/steep/server/master.rb#68
  def unchecked_code_paths; end

  # source://steep//lib/steep/server/master.rb#72
  def unchecked_library_paths; end

  # source://steep//lib/steep/server/master.rb#64
  def unchecked_paths; end

  # source://steep//lib/steep/server/master.rb#76
  def unchecked_signature_paths; end

  # source://steep//lib/steep/server/master.rb#23
  def uri(path); end
end

# source://steep//lib/steep/server/type_check_worker.rb#3
class Steep::Server::TypeCheckWorker < ::Steep::Server::BaseWorker
  include ::Steep::Server::ChangeBuffer

  # source://steep//lib/steep/server/type_check_worker.rb#56
  def initialize(project:, reader:, writer:, assignment:, commandline_args:); end

  # source://steep//lib/steep/server/type_check_worker.rb#4
  def assignment; end

  # source://steep//lib/steep/server/type_check_worker.rb#5
  def commandline_args; end

  # source://steep//lib/steep/server/type_check_worker.rb#6
  def current_type_check_guid; end

  # source://steep//lib/steep/server/type_check_worker.rb#102
  def enqueue_typecheck_jobs(params); end

  # source://steep//lib/steep/server/type_check_worker.rb#289
  def goto(job); end

  # source://steep//lib/steep/server/type_check_worker.rb#160
  def handle_job(job); end

  # source://steep//lib/steep/server/type_check_worker.rb#68
  def handle_request(request); end

  # source://steep//lib/steep/server/type_check_worker.rb#4
  def project; end

  # source://steep//lib/steep/server/type_check_worker.rb#4
  def service; end

  # source://steep//lib/steep/server/type_check_worker.rb#275
  def stats_result; end

  # source://steep//lib/steep/server/type_check_worker.rb#239
  def typecheck_progress(guid:, path:); end

  # source://steep//lib/steep/server/type_check_worker.rb#246
  def workspace_symbol_result(query); end
end

# source://steep//lib/steep/server/type_check_worker.rb#14
class Steep::Server::TypeCheckWorker::GotoJob < ::Struct
  # source://steep//lib/steep/server/type_check_worker.rb#45
  def definition?; end

  def id; end
  def id=(_); end

  # source://steep//lib/steep/server/type_check_worker.rb#41
  def implementation?; end

  def kind; end
  def kind=(_); end
  def params; end
  def params=(_); end

  # source://steep//lib/steep/server/type_check_worker.rb#49
  def type_definition?; end

  class << self
    def [](*_arg0); end

    # source://steep//lib/steep/server/type_check_worker.rb#25
    def definition(id:, params:); end

    # source://steep//lib/steep/server/type_check_worker.rb#17
    def implementation(id:, params:); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end

    # source://steep//lib/steep/server/type_check_worker.rb#33
    def type_definition(id:, params:); end
  end
end

# source://steep//lib/steep/server/type_check_worker.rb#10
class Steep::Server::TypeCheckWorker::StartTypeCheckJob < ::Struct
  def changes; end
  def changes=(_); end
  def guid; end
  def guid=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/type_check_worker.rb#9
class Steep::Server::TypeCheckWorker::StatsJob < ::Struct
  def id; end
  def id=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/type_check_worker.rb#11
class Steep::Server::TypeCheckWorker::TypeCheckCodeJob < ::Struct
  def guid; end
  def guid=(_); end
  def path; end
  def path=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/type_check_worker.rb#12
class Steep::Server::TypeCheckWorker::ValidateAppSignatureJob < ::Struct
  def guid; end
  def guid=(_); end
  def path; end
  def path=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/type_check_worker.rb#13
class Steep::Server::TypeCheckWorker::ValidateLibrarySignatureJob < ::Struct
  def guid; end
  def guid=(_); end
  def path; end
  def path=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/type_check_worker.rb#8
class Steep::Server::TypeCheckWorker::WorkspaceSymbolJob < ::Struct
  def id; end
  def id=(_); end
  def query; end
  def query=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/server/worker_process.rb#3
class Steep::Server::WorkerProcess
  # source://steep//lib/steep/server/worker_process.rb#12
  def initialize(reader:, writer:, stderr:, wait_thread:, name:, index: T.unsafe(nil)); end

  # source://steep//lib/steep/server/worker_process.rb#149
  def <<(message); end

  # source://steep//lib/steep/server/worker_process.rb#10
  def index; end

  # source://steep//lib/steep/server/worker_process.rb#157
  def kill(force: T.unsafe(nil)); end

  # source://steep//lib/steep/server/worker_process.rb#8
  def name; end

  # source://steep//lib/steep/server/worker_process.rb#153
  def read(&block); end

  # source://steep//lib/steep/server/worker_process.rb#4
  def reader; end

  # source://steep//lib/steep/server/worker_process.rb#6
  def stderr; end

  # source://steep//lib/steep/server/worker_process.rb#9
  def wait_thread; end

  # source://steep//lib/steep/server/worker_process.rb#5
  def writer; end

  class << self
    # source://steep//lib/steep/server/worker_process.rb#49
    def fork_worker(type, name:, steepfile:, index:, delay_shutdown:, patterns:); end

    # source://steep//lib/steep/server/worker_process.rb#95
    def spawn_worker(type, name:, steepfile:, steep_command:, index:, delay_shutdown:, patterns:); end

    # source://steep//lib/steep/server/worker_process.rb#135
    def start_typecheck_workers(steepfile:, args:, steep_command:, count: T.unsafe(nil), delay_shutdown: T.unsafe(nil)); end

    # source://steep//lib/steep/server/worker_process.rb#21
    def start_worker(type, name:, steepfile:, steep_command:, index: T.unsafe(nil), delay_shutdown: T.unsafe(nil), patterns: T.unsafe(nil)); end
  end
end

# source://steep//lib/steep/services/content_change.rb#2
module Steep::Services; end

# source://steep//lib/steep/services/completion_provider.rb#3
class Steep::Services::CompletionProvider
  include ::Steep::NodeHelper

  # source://steep//lib/steep/services/completion_provider.rb#170
  def initialize(source_text:, path:, subtyping:); end

  # source://steep//lib/steep/services/completion_provider.rb#331
  def at_comment?(position); end

  # source://steep//lib/steep/services/completion_provider.rb#325
  def at_end?(pos, of:); end

  # source://steep//lib/steep/services/completion_provider.rb#691
  def constant_items_for_context(context, position:, prefix:, items:, parent: T.unsafe(nil)); end

  # source://steep//lib/steep/services/completion_provider.rb#775
  def disallowed_method?(name); end

  # source://steep//lib/steep/services/completion_provider.rb#191
  def env; end

  # source://steep//lib/steep/services/completion_provider.rb#760
  def index_for(string, line:, column:); end

  # source://steep//lib/steep/services/completion_provider.rb#715
  def instance_variable_items_for_context(context, position:, prefix:, items:); end

  # source://steep//lib/steep/services/completion_provider.rb#547
  def items_for_atmark(position:); end

  # source://steep//lib/steep/services/completion_provider.rb#522
  def items_for_colon2(position:); end

  # source://steep//lib/steep/services/completion_provider.rb#462
  def items_for_dot(position:); end

  # source://steep//lib/steep/services/completion_provider.rb#579
  def items_for_following_keyword_arguments(text, index:, line:, column:, items:); end

  # source://steep//lib/steep/services/completion_provider.rb#492
  def items_for_qcall(position:); end

  # source://steep//lib/steep/services/completion_provider.rb#561
  def items_for_rbs(position:, buffer:); end

  # source://steep//lib/steep/services/completion_provider.rb#343
  def items_for_trigger(position:); end

  # source://steep//lib/steep/services/completion_provider.rb#724
  def keyword_argument_items_for_method(call_node:, send_node:, position:, prefix:, items:); end

  # source://steep//lib/steep/services/completion_provider.rb#680
  def local_variable_items_for_context(context, position:, prefix:, items:); end

  # source://steep//lib/steep/services/completion_provider.rb#610
  def method_items_for_receiver_type(type, include_private:, prefix:, position:, items:); end

  # source://steep//lib/steep/services/completion_provider.rb#166
  def modified_text; end

  # source://steep//lib/steep/services/completion_provider.rb#164
  def path; end

  # source://steep//lib/steep/services/completion_provider.rb#335
  def range_for(position, prefix: T.unsafe(nil)); end

  # source://steep//lib/steep/services/completion_provider.rb#318
  def range_from_loc(loc); end

  # source://steep//lib/steep/services/completion_provider.rb#195
  def run(line:, column:); end

  # source://steep//lib/steep/services/completion_provider.rb#167
  def source; end

  # source://steep//lib/steep/services/completion_provider.rb#163
  def source_text; end

  # source://steep//lib/steep/services/completion_provider.rb#165
  def subtyping; end

  # source://steep//lib/steep/services/completion_provider.rb#176
  def type_check!(text, line:, column:); end

  # source://steep//lib/steep/services/completion_provider.rb#168
  def typing; end

  # source://steep//lib/steep/services/completion_provider.rb#782
  def unwrap_optional(type); end

  # source://steep//lib/steep/services/completion_provider.rb#676
  def word_name?(name); end
end

# source://steep//lib/steep/services/completion_provider.rb#64
class Steep::Services::CompletionProvider::ComplexMethodNameItem < ::Struct
  # source://steep//lib/steep/services/completion_provider.rb#82
  def defining_method_name(type_name, name, member); end

  def identifier; end
  def identifier=(_); end
  def method_decls; end
  def method_decls=(_); end

  # source://steep//lib/steep/services/completion_provider.rb#71
  def method_definitions; end

  # source://steep//lib/steep/services/completion_provider.rb#67
  def method_names; end

  def method_types; end
  def method_types=(_); end
  def range; end
  def range=(_); end
  def receiver_type; end
  def receiver_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/completion_provider.rb#18
class Steep::Services::CompletionProvider::ConstantItem < ::Struct
  # source://steep//lib/steep/services/completion_provider.rb#21
  def class?; end

  # source://steep//lib/steep/services/completion_provider.rb#29
  def comments; end

  # source://steep//lib/steep/services/completion_provider.rb#42
  def decl; end

  def env; end
  def env=(_); end
  def full_name; end
  def full_name=(_); end
  def identifier; end
  def identifier=(_); end

  # source://steep//lib/steep/services/completion_provider.rb#25
  def module?; end

  def range; end
  def range=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/completion_provider.rb#100
class Steep::Services::CompletionProvider::GeneratedMethodNameItem < ::Struct
  def identifier; end
  def identifier=(_); end
  def method_types; end
  def method_types=(_); end
  def range; end
  def range=(_); end
  def receiver_type; end
  def receiver_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/completion_provider.rb#15
class Steep::Services::CompletionProvider::InstanceVariableItem < ::Struct
  def identifier; end
  def identifier=(_); end
  def range; end
  def range=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/completion_provider.rb#16
class Steep::Services::CompletionProvider::KeywordArgumentItem < ::Struct
  def identifier; end
  def identifier=(_); end
  def range; end
  def range=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/completion_provider.rb#17
class Steep::Services::CompletionProvider::LocalVariableItem < ::Struct
  def identifier; end
  def identifier=(_); end
  def range; end
  def range=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/completion_provider.rb#6
class Steep::Services::CompletionProvider::Position < ::Struct
  # source://steep//lib/steep/services/completion_provider.rb#8
  def -(size); end

  def column; end
  def column=(_); end
  def line; end
  def line=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/completion_provider.rb#13
class Steep::Services::CompletionProvider::Range < ::Struct
  def end; end
  def end=(_); end
  def start; end
  def start=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/completion_provider.rb#56
class Steep::Services::CompletionProvider::SimpleMethodNameItem < ::Struct
  # source://steep//lib/steep/services/completion_provider.rb#59
  def comment; end

  def identifier; end
  def identifier=(_); end
  def method_member; end
  def method_member=(_); end
  def method_name; end
  def method_name=(_); end
  def method_types; end
  def method_types=(_); end
  def range; end
  def range=(_); end
  def receiver_type; end
  def receiver_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/completion_provider.rb#160
class Steep::Services::CompletionProvider::TextItem < ::Struct; end

# source://steep//lib/steep/services/completion_provider.rb#104
class Steep::Services::CompletionProvider::TypeNameItem < ::Struct
  # source://steep//lib/steep/services/completion_provider.rb#125
  def comments; end

  # source://steep//lib/steep/services/completion_provider.rb#105
  def decl; end
end

# source://steep//lib/steep/services/content_change.rb#3
class Steep::Services::ContentChange
  # source://steep//lib/steep/services/content_change.rb#25
  def initialize(text:, range: T.unsafe(nil)); end

  # source://steep//lib/steep/services/content_change.rb#30
  def ==(other); end

  # source://steep//lib/steep/services/content_change.rb#44
  def apply_to(text); end

  # source://steep//lib/steep/services/content_change.rb#30
  def eql?(other); end

  # source://steep//lib/steep/services/content_change.rb#36
  def hash; end

  # source://steep//lib/steep/services/content_change.rb#23
  def range; end

  # source://steep//lib/steep/services/content_change.rb#23
  def text; end

  class << self
    # source://steep//lib/steep/services/content_change.rb#40
    def string(string); end
  end
end

# source://steep//lib/steep/services/content_change.rb#4
class Steep::Services::ContentChange::Position
  # source://steep//lib/steep/services/content_change.rb#7
  def initialize(line:, column:); end

  # source://steep//lib/steep/services/content_change.rb#12
  def ==(other); end

  # source://steep//lib/steep/services/content_change.rb#5
  def column; end

  # source://steep//lib/steep/services/content_change.rb#12
  def eql?(other); end

  # source://steep//lib/steep/services/content_change.rb#18
  def hash; end

  # source://steep//lib/steep/services/content_change.rb#5
  def line; end
end

# source://steep//lib/steep/services/file_loader.rb#3
class Steep::Services::FileLoader
  # source://steep//lib/steep/services/file_loader.rb#6
  def initialize(base_dir:); end

  # source://steep//lib/steep/services/file_loader.rb#4
  def base_dir; end

  # source://steep//lib/steep/services/file_loader.rb#10
  def each_path_in_patterns(pattern, commandline_patterns = T.unsafe(nil)); end

  # source://steep//lib/steep/services/file_loader.rb#45
  def load_changes(pattern, command_line_patterns = T.unsafe(nil), changes:); end
end

# source://steep//lib/steep/services/goto_service.rb#3
class Steep::Services::GotoService
  include ::Steep::ModuleHelper

  # source://steep//lib/steep/services/goto_service.rb#27
  def initialize(type_check:, assignment:); end

  # source://steep//lib/steep/services/goto_service.rb#25
  def assignment; end

  # source://steep//lib/steep/services/goto_service.rb#296
  def constant_definition_in_rbs(name, locations:); end

  # source://steep//lib/steep/services/goto_service.rb#321
  def constant_definition_in_ruby(name, locations:); end

  # source://steep//lib/steep/services/goto_service.rb#56
  def definition(path:, line:, column:); end

  # source://steep//lib/steep/services/goto_service.rb#125
  def each_type_name(type, &block); end

  # source://steep//lib/steep/services/goto_service.rb#36
  def implementation(path:, line:, column:); end

  # source://steep//lib/steep/services/goto_service.rb#346
  def method_locations(name, in_ruby:, in_rbs:, locations:); end

  # source://steep//lib/steep/services/goto_service.rb#32
  def project; end

  # source://steep//lib/steep/services/goto_service.rb#155
  def query_at(path:, line:, column:); end

  # source://steep//lib/steep/services/goto_service.rb#147
  def test_ast_location(loc, line:, column:); end

  # source://steep//lib/steep/services/goto_service.rb#25
  def type_check; end

  # source://steep//lib/steep/services/goto_service.rb#282
  def type_check_path(target:, path:, content:, line:, column:); end

  # source://steep//lib/steep/services/goto_service.rb#92
  def type_definition(path:, line:, column:); end

  # source://steep//lib/steep/services/goto_service.rb#406
  def type_name_locations(name, locations: T.unsafe(nil)); end
end

# source://steep//lib/steep/services/goto_service.rb#16
class Steep::Services::GotoService::ConstantQuery < ::Struct
  include ::Steep::Services::GotoService::SourceHelper
end

# source://steep//lib/steep/services/goto_service.rb#19
class Steep::Services::GotoService::MethodQuery < ::Struct
  include ::Steep::Services::GotoService::SourceHelper
end

# source://steep//lib/steep/services/goto_service.rb#6
module Steep::Services::GotoService::SourceHelper
  # source://steep//lib/steep/services/goto_service.rb#11
  def from_rbs?; end

  # source://steep//lib/steep/services/goto_service.rb#7
  def from_ruby?; end
end

# source://steep//lib/steep/services/goto_service.rb#22
class Steep::Services::GotoService::TypeNameQuery < ::Struct; end

# source://steep//lib/steep/services/hover_provider/singleton_methods.rb#3
module Steep::Services::HoverProvider
  extend ::Steep::Services::HoverProvider::SingletonMethods
end

# source://steep//lib/steep/services/hover_provider/rbs.rb#4
class Steep::Services::HoverProvider::RBS
  # source://steep//lib/steep/services/hover_provider/rbs.rb#11
  def initialize(service:); end

  # source://steep//lib/steep/services/hover_provider/rbs.rb#19
  def content_for(target:, path:, line:, column:); end

  # source://steep//lib/steep/services/hover_provider/rbs.rb#64
  def content_for_type_name(type_name, env:, location:); end

  # source://steep//lib/steep/services/hover_provider/rbs.rb#15
  def project; end

  # source://steep//lib/steep/services/hover_provider/rbs.rb#9
  def service; end
end

# source://steep//lib/steep/services/hover_provider/rbs.rb#6
class Steep::Services::HoverProvider::RBS::ClassContent < ::Struct
  def decl; end
  def decl=(_); end
  def location; end
  def location=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/hover_provider/rbs.rb#7
class Steep::Services::HoverProvider::RBS::InterfaceContent < ::Struct
  def decl; end
  def decl=(_); end
  def location; end
  def location=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/hover_provider/rbs.rb#5
class Steep::Services::HoverProvider::RBS::TypeAliasContent < ::Struct
  def decl; end
  def decl=(_); end
  def location; end
  def location=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/hover_provider/ruby.rb#4
class Steep::Services::HoverProvider::Ruby
  # source://steep//lib/steep/services/hover_provider/ruby.rb#57
  def initialize(service:); end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#112
  def content_for(target:, path:, line:, column:); end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#65
  def method_definition_for(factory, type_name, singleton_method: T.unsafe(nil), instance_method: T.unsafe(nil)); end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#92
  def method_name_from_method(context, builder:); end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#61
  def project; end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#55
  def service; end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#82
  def typecheck(target, path:, content:, line:, column:); end
end

# source://steep//lib/steep/services/hover_provider/ruby.rb#10
class Steep::Services::HoverProvider::Ruby::ConstantContent < ::Struct
  # source://steep//lib/steep/services/hover_provider/ruby.rb#33
  def class_alias; end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#26
  def class_decl; end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#50
  def class_or_module?; end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#13
  def comments; end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#46
  def constant?; end

  # source://steep//lib/steep/services/hover_provider/ruby.rb#40
  def constant_decl; end

  def decl; end
  def decl=(_); end
  def full_name; end
  def full_name=(_); end
  def location; end
  def location=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/hover_provider/ruby.rb#9
class Steep::Services::HoverProvider::Ruby::DefinitionContent < ::Struct
  def definition; end
  def definition=(_); end
  def location; end
  def location=(_); end
  def method_name; end
  def method_name=(_); end
  def method_type; end
  def method_type=(_); end
  def node; end
  def node=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/hover_provider/ruby.rb#8
class Steep::Services::HoverProvider::Ruby::MethodCallContent < ::Struct
  def location; end
  def location=(_); end
  def method_call; end
  def method_call=(_); end
  def node; end
  def node=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/hover_provider/ruby.rb#7
class Steep::Services::HoverProvider::Ruby::TypeAssertionContent < ::Struct
  def asserted_type; end
  def asserted_type=(_); end
  def location; end
  def location=(_); end
  def node; end
  def node=(_); end
  def original_type; end
  def original_type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/hover_provider/ruby.rb#5
class Steep::Services::HoverProvider::Ruby::TypeContent < ::Struct
  def location; end
  def location=(_); end
  def node; end
  def node=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/hover_provider/ruby.rb#6
class Steep::Services::HoverProvider::Ruby::VariableContent < ::Struct
  def location; end
  def location=(_); end
  def name; end
  def name=(_); end
  def node; end
  def node=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/hover_provider/singleton_methods.rb#4
module Steep::Services::HoverProvider::SingletonMethods
  # source://steep//lib/steep/services/hover_provider/singleton_methods.rb#5
  def content_for(service:, path:, line:, column:); end
end

# source://steep//lib/steep/services/path_assignment.rb#3
class Steep::Services::PathAssignment
  # source://steep//lib/steep/services/path_assignment.rb#6
  def initialize(index:, max_index:); end

  # source://steep//lib/steep/services/path_assignment.rb#16
  def ===(path); end

  # source://steep//lib/steep/services/path_assignment.rb#16
  def =~(path); end

  # source://steep//lib/steep/services/path_assignment.rb#4
  def cache; end

  # source://steep//lib/steep/services/path_assignment.rb#4
  def index; end

  # source://steep//lib/steep/services/path_assignment.rb#4
  def max_index; end

  class << self
    # source://steep//lib/steep/services/path_assignment.rb#12
    def all; end

    # source://steep//lib/steep/services/path_assignment.rb#22
    def index_for(path:, max_index:); end
  end
end

# source://steep//lib/steep/services/signature_help_provider.rb#3
class Steep::Services::SignatureHelpProvider
  # source://steep//lib/steep/services/signature_help_provider.rb#28
  def initialize(source:, subtyping:); end

  # source://steep//lib/steep/services/signature_help_provider.rb#138
  def active_parameter_for(method_type, argument_nodes, last_argument_nodes, node); end

  # source://steep//lib/steep/services/signature_help_provider.rb#22
  def buffer; end

  # source://steep//lib/steep/services/signature_help_provider.rb#24
  def env; end

  # source://steep//lib/steep/services/signature_help_provider.rb#78
  def last_argument_nodes_for(argument_nodes:, line:, column:); end

  # source://steep//lib/steep/services/signature_help_provider.rb#22
  def path; end

  # source://steep//lib/steep/services/signature_help_provider.rb#34
  def run(line:, column:); end

  # source://steep//lib/steep/services/signature_help_provider.rb#96
  def signature_help_for(node, argument, last_argument, typing); end

  # source://steep//lib/steep/services/signature_help_provider.rb#22
  def source; end

  # source://steep//lib/steep/services/signature_help_provider.rb#22
  def subtyping; end

  # source://steep//lib/steep/services/signature_help_provider.rb#72
  def type_check!(line:, column:); end

  # source://steep//lib/steep/services/signature_help_provider.rb#22
  def typing; end
end

# source://steep//lib/steep/services/signature_help_provider.rb#6
class Steep::Services::SignatureHelpProvider::Item < ::Struct
  def active_parameter; end
  def active_parameter=(_); end
  def comment; end
  def comment=(_); end
  def method_type; end
  def method_type=(_); end

  # source://steep//lib/steep/services/signature_help_provider.rb#9
  def parameters; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/signature_help_provider.rb#4
Steep::Services::SignatureHelpProvider::MethodCall = Steep::TypeInference::MethodCall

# source://steep//lib/steep/services/signature_service.rb#3
class Steep::Services::SignatureService
  # source://steep//lib/steep/services/signature_service.rb#80
  def initialize(env:); end

  # source://steep//lib/steep/services/signature_service.rb#380
  def add_descendants(graph:, names:, set:); end

  # source://steep//lib/steep/services/signature_service.rb#399
  def add_nested_decls(env:, names:, set:); end

  # source://steep//lib/steep/services/signature_service.rb#150
  def apply_changes(files, changes); end

  # source://steep//lib/steep/services/signature_service.rb#347
  def const_decls(paths:, env:); end

  # source://steep//lib/steep/services/signature_service.rb#144
  def current_subtyping; end

  # source://steep//lib/steep/services/signature_service.rb#96
  def each_rbs_path(&block); end

  # source://steep//lib/steep/services/signature_service.rb#90
  def env_rbs_paths; end

  # source://steep//lib/steep/services/signature_service.rb#110
  def files; end

  # source://steep//lib/steep/services/signature_service.rb#355
  def global_decls(paths:, env: T.unsafe(nil)); end

  # source://steep//lib/steep/services/signature_service.rb#127
  def latest_builder; end

  # source://steep//lib/steep/services/signature_service.rb#140
  def latest_constant_resolver; end

  # source://steep//lib/steep/services/signature_service.rb#123
  def latest_env; end

  # source://steep//lib/steep/services/signature_service.rb#136
  def latest_rbs_index; end

  # source://steep//lib/steep/services/signature_service.rb#114
  def pending_changed_paths; end

  # source://steep//lib/steep/services/signature_service.rb#302
  def rescue_rbs_error(errors); end

  # source://steep//lib/steep/services/signature_service.rb#4
  def status; end

  # source://steep//lib/steep/services/signature_service.rb#363
  def type_name_from_decl(decl, set:); end

  # source://steep//lib/steep/services/signature_service.rb#337
  def type_names(paths:, env:); end

  # source://steep//lib/steep/services/signature_service.rb#179
  def update(changes); end

  # source://steep//lib/steep/services/signature_service.rb#310
  def update_builder(ancestor_builder:, paths:); end

  # source://steep//lib/steep/services/signature_service.rb#230
  def update_env(updated_files, paths:); end

  class << self
    # source://steep//lib/steep/services/signature_service.rb#85
    def load_from(loader); end
  end
end

# source://steep//lib/steep/services/signature_service.rb#28
class Steep::Services::SignatureService::AncestorErrorStatus
  # source://steep//lib/steep/services/signature_service.rb#31
  def initialize(files:, changed_paths:, diagnostics:, last_builder:); end

  # source://steep//lib/steep/services/signature_service.rb#29
  def changed_paths; end

  # source://steep//lib/steep/services/signature_service.rb#45
  def constant_resolver; end

  # source://steep//lib/steep/services/signature_service.rb#29
  def diagnostics; end

  # source://steep//lib/steep/services/signature_service.rb#29
  def files; end

  # source://steep//lib/steep/services/signature_service.rb#29
  def last_builder; end

  # source://steep//lib/steep/services/signature_service.rb#38
  def rbs_index; end
end

# source://steep//lib/steep/services/signature_service.rb#78
class Steep::Services::SignatureService::FileStatus < ::Struct
  def content; end
  def content=(_); end
  def path; end
  def path=(_); end
  def signature; end
  def signature=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/signature_service.rb#50
class Steep::Services::SignatureService::LoadedStatus
  # source://steep//lib/steep/services/signature_service.rb#53
  def initialize(files:, builder:); end

  # source://steep//lib/steep/services/signature_service.rb#51
  def builder; end

  # source://steep//lib/steep/services/signature_service.rb#73
  def constant_resolver; end

  # source://steep//lib/steep/services/signature_service.rb#51
  def files; end

  # source://steep//lib/steep/services/signature_service.rb#66
  def rbs_index; end

  # source://steep//lib/steep/services/signature_service.rb#58
  def subtyping; end
end

# source://steep//lib/steep/services/signature_service.rb#6
class Steep::Services::SignatureService::SyntaxErrorStatus
  # source://steep//lib/steep/services/signature_service.rb#9
  def initialize(files:, changed_paths:, diagnostics:, last_builder:); end

  # source://steep//lib/steep/services/signature_service.rb#7
  def changed_paths; end

  # source://steep//lib/steep/services/signature_service.rb#23
  def constant_resolver; end

  # source://steep//lib/steep/services/signature_service.rb#7
  def diagnostics; end

  # source://steep//lib/steep/services/signature_service.rb#7
  def files; end

  # source://steep//lib/steep/services/signature_service.rb#7
  def last_builder; end

  # source://steep//lib/steep/services/signature_service.rb#16
  def rbs_index; end
end

# source://steep//lib/steep/services/stats_calculator.rb#3
class Steep::Services::StatsCalculator
  # source://steep//lib/steep/services/stats_calculator.rb#29
  def initialize(service:); end

  # source://steep//lib/steep/services/stats_calculator.rb#37
  def calc_stats(target, file:); end

  # source://steep//lib/steep/services/stats_calculator.rb#33
  def project; end

  # source://steep//lib/steep/services/stats_calculator.rb#27
  def service; end
end

# source://steep//lib/steep/services/stats_calculator.rb#17
class Steep::Services::StatsCalculator::ErrorStats < ::Struct
  # source://steep//lib/steep/services/stats_calculator.rb#18
  def as_json; end
end

# source://steep//lib/steep/services/stats_calculator.rb#4
class Steep::Services::StatsCalculator::SuccessStats < ::Struct
  # source://steep//lib/steep/services/stats_calculator.rb#5
  def as_json; end
end

# source://steep//lib/steep/services/type_check_service.rb#3
class Steep::Services::TypeCheckService
  # source://steep//lib/steep/services/type_check_service.rb#116
  def initialize(project:); end

  # source://steep//lib/steep/services/type_check_service.rb#440
  def app_signature_file?(path); end

  # source://steep//lib/steep/services/type_check_service.rb#160
  def diagnostics; end

  # source://steep//lib/steep/services/type_check_service.rb#164
  def each_diagnostics(&block); end

  # source://steep//lib/steep/services/type_check_service.rb#156
  def has_diagnostics?; end

  # source://steep//lib/steep/services/type_check_service.rb#447
  def lib_signature_file?(path); end

  # source://steep//lib/steep/services/type_check_service.rb#4
  def project; end

  # source://steep//lib/steep/services/type_check_service.rb#129
  def signature_diagnostics; end

  # source://steep//lib/steep/services/type_check_service.rb#432
  def signature_file?(path); end

  # source://steep//lib/steep/services/type_check_service.rb#7
  def signature_services; end

  # source://steep//lib/steep/services/type_check_service.rb#5
  def signature_validation_diagnostics; end

  # source://steep//lib/steep/services/type_check_service.rb#426
  def source_file?(path); end

  # source://steep//lib/steep/services/type_check_service.rb#6
  def source_files; end

  # source://steep//lib/steep/services/type_check_service.rb#353
  def type_check_file(target:, subtyping:, path:, text:); end

  # source://steep//lib/steep/services/type_check_service.rb#300
  def typecheck_source(path:, target: T.unsafe(nil), &block); end

  # source://steep//lib/steep/services/type_check_service.rb#178
  def update(changes:); end

  # source://steep//lib/steep/services/type_check_service.rb#194
  def update_and_check(changes:, assignment:, &block); end

  # source://steep//lib/steep/services/type_check_service.rb#318
  def update_signature(changes:, requests:); end

  # source://steep//lib/steep/services/type_check_service.rb#332
  def update_sources(changes:, requests:); end

  # source://steep//lib/steep/services/type_check_service.rb#219
  def validate_signature(path:, &block); end

  class << self
    # source://steep//lib/steep/services/type_check_service.rb#373
    def type_check(source:, subtyping:, constant_resolver:); end
  end
end

# source://steep//lib/steep/services/type_check_service.rb#9
class Steep::Services::TypeCheckService::SourceFile
  # source://steep//lib/steep/services/type_check_service.rb#18
  def initialize(path:, node:, content:, typing:, ignores:, errors:); end

  # source://steep//lib/steep/services/type_check_service.rb#12
  def content; end

  # source://steep//lib/steep/services/type_check_service.rb#50
  def diagnostics; end

  # source://steep//lib/steep/services/type_check_service.rb#15
  def errors; end

  # source://steep//lib/steep/services/type_check_service.rb#16
  def ignores; end

  # source://steep//lib/steep/services/type_check_service.rb#13
  def node; end

  # source://steep//lib/steep/services/type_check_service.rb#10
  def path; end

  # source://steep//lib/steep/services/type_check_service.rb#11
  def target; end

  # source://steep//lib/steep/services/type_check_service.rb#14
  def typing; end

  # source://steep//lib/steep/services/type_check_service.rb#39
  def update_content(content); end

  class << self
    # source://steep//lib/steep/services/type_check_service.rb#35
    def no_data(path:, content:); end

    # source://steep//lib/steep/services/type_check_service.rb#27
    def with_syntax_error(path:, content:, error:); end

    # source://steep//lib/steep/services/type_check_service.rb#31
    def with_typing(path:, content:, typing:, node:, ignores:); end
  end
end

# source://steep//lib/steep/services/type_check_service.rb#79
class Steep::Services::TypeCheckService::TargetRequest
  # source://steep//lib/steep/services/type_check_service.rb#83
  def initialize(target:); end

  # source://steep//lib/steep/services/type_check_service.rb#102
  def ==(other); end

  # source://steep//lib/steep/services/type_check_service.rb#98
  def empty?; end

  # source://steep//lib/steep/services/type_check_service.rb#102
  def eql?(other); end

  # source://steep//lib/steep/services/type_check_service.rb#111
  def hash; end

  # source://steep//lib/steep/services/type_check_service.rb#89
  def signature_updated!(value = T.unsafe(nil)); end

  # source://steep//lib/steep/services/type_check_service.rb#94
  def signature_updated?; end

  # source://steep//lib/steep/services/type_check_service.rb#81
  def source_paths; end

  # source://steep//lib/steep/services/type_check_service.rb#80
  def target; end
end

# source://steep//lib/steep/services/type_name_completion.rb#3
class Steep::Services::TypeNameCompletion
  # source://steep//lib/steep/services/type_name_completion.rb#54
  def initialize(env:, context:, dirs:); end

  # source://steep//lib/steep/services/type_name_completion.rb#52
  def context; end

  # source://steep//lib/steep/services/type_name_completion.rb#75
  def each_outer_module(context = T.unsafe(nil), &block); end

  # source://steep//lib/steep/services/type_name_completion.rb#96
  def each_type_name(&block); end

  # source://steep//lib/steep/services/type_name_completion.rb#146
  def each_type_name_under(module_name, normalized_name, table:, &block); end

  # source://steep//lib/steep/services/type_name_completion.rb#52
  def env; end

  # source://steep//lib/steep/services/type_name_completion.rb#206
  def find_type_names(prefix); end

  # source://steep//lib/steep/services/type_name_completion.rb#52
  def map; end

  # source://steep//lib/steep/services/type_name_completion.rb#180
  def resolve_name_in_context(name); end

  # source://steep//lib/steep/services/type_name_completion.rb#162
  def resolve_used_name(name); end

  # source://steep//lib/steep/services/type_name_completion.rb#52
  def type_name_resolver; end
end

# source://steep//lib/steep/services/type_name_completion.rb#4
module Steep::Services::TypeNameCompletion::Prefix
  class << self
    # source://steep//lib/steep/services/type_name_completion.rb#27
    def parse(buffer, line:, column:); end
  end
end

# source://steep//lib/steep/services/type_name_completion.rb#25
class Steep::Services::TypeNameCompletion::Prefix::NamespacePrefix < ::Struct
  def namespace; end
  def namespace=(_); end
  def size; end
  def size=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/type_name_completion.rb#17
class Steep::Services::TypeNameCompletion::Prefix::NamespacedIdentPrefix < ::Struct
  # source://steep//lib/steep/services/type_name_completion.rb#20
  def const_name?; end

  def ident; end
  def ident=(_); end
  def namespace; end
  def namespace=(_); end
  def size; end
  def size=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/services/type_name_completion.rb#5
class Steep::Services::TypeNameCompletion::Prefix::RawIdentPrefix < ::Struct
  # source://steep//lib/steep/services/type_name_completion.rb#8
  def const_name?; end

  def ident; end
  def ident=(_); end

  # source://steep//lib/steep/services/type_name_completion.rb#12
  def size; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/signature/validator.rb#2
module Steep::Signature; end

# source://steep//lib/steep/signature/validator.rb#3
class Steep::Signature::Validator
  # source://steep//lib/steep/signature/validator.rb#9
  def initialize(checker:); end

  # source://steep//lib/steep/signature/validator.rb#143
  def ancestor_to_type(ancestor); end

  # source://steep//lib/steep/signature/validator.rb#34
  def builder; end

  # source://steep//lib/steep/signature/validator.rb#7
  def checker; end

  # source://steep//lib/steep/signature/validator.rb#22
  def each_error(&block); end

  # source://steep//lib/steep/signature/validator.rb#193
  def each_method_type(definition); end

  # source://steep//lib/steep/signature/validator.rb#205
  def each_variable_type(definition); end

  # source://steep//lib/steep/signature/validator.rb#30
  def env; end

  # source://steep//lib/steep/signature/validator.rb#46
  def factory; end

  # source://steep//lib/steep/signature/validator.rb#14
  def has_error?; end

  # source://steep//lib/steep/signature/validator.rb#161
  def mixin_constraints(definition, mixin_ancestors, immediate_self_types:); end

  # source://steep//lib/steep/signature/validator.rb#18
  def no_error?; end

  # source://steep//lib/steep/signature/validator.rb#555
  def rescue_validation_errors(type_name = T.unsafe(nil)); end

  # source://steep//lib/steep/signature/validator.rb#38
  def type_name_resolver; end

  # source://steep//lib/steep/signature/validator.rb#50
  def validate; end

  # source://steep//lib/steep/signature/validator.rb#549
  def validate_alias; end

  # source://steep//lib/steep/signature/validator.rb#406
  def validate_ancestor_application(name, ancestor); end

  # source://steep//lib/steep/signature/validator.rb#494
  def validate_const; end

  # source://steep//lib/steep/signature/validator.rb#480
  def validate_decl; end

  # source://steep//lib/steep/signature/validator.rb#221
  def validate_definition_type(definition); end

  # source://steep//lib/steep/signature/validator.rb#508
  def validate_global; end

  # source://steep//lib/steep/signature/validator.rb#521
  def validate_one_alias(name, entry = T.unsafe(nil)); end

  # source://steep//lib/steep/signature/validator.rb#395
  def validate_one_class(name); end

  # source://steep//lib/steep/signature/validator.rb#542
  def validate_one_class_alias(name, entry); end

  # source://steep//lib/steep/signature/validator.rb#239
  def validate_one_class_decl(name); end

  # source://steep//lib/steep/signature/validator.rb#500
  def validate_one_constant(name, entry); end

  # source://steep//lib/steep/signature/validator.rb#514
  def validate_one_global(name, entry); end

  # source://steep//lib/steep/signature/validator.rb#446
  def validate_one_interface(name); end

  # source://steep//lib/steep/signature/validator.rb#136
  def validate_type(type); end

  # source://steep//lib/steep/signature/validator.rb#99
  def validate_type_application(type); end

  # source://steep//lib/steep/signature/validator.rb#59
  def validate_type_application_constraints(type_name, type_params, type_args, location:); end

  # source://steep//lib/steep/signature/validator.rb#42
  def validator; end
end

# source://steep//lib/steep/signature/validator.rb#5
Steep::Signature::Validator::Declarations = RBS::AST::Declarations

# source://steep//lib/steep/signature/validator.rb#4
Steep::Signature::Validator::Location = RBS::Location

# source://steep//lib/steep/method_name.rb#13
class Steep::SingletonMethodName < ::Struct
  def method_name; end
  def method_name=(_); end

  # source://steep//lib/steep/method_name.rb#19
  def relative; end

  # source://steep//lib/steep/method_name.rb#15
  def to_s; end

  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/source.rb#2
class Steep::Source
  extend ::Steep::NodeHelper

  # source://steep//lib/steep/source.rb#12
  def initialize(buffer:, path:, node:, mapping:, comments:, ignores:); end

  # source://steep//lib/steep/source.rb#297
  def annotations(block:, factory:, context:); end

  # source://steep//lib/steep/source.rb#3
  def buffer; end

  # source://steep//lib/steep/source.rb#7
  def comments; end

  # source://steep//lib/steep/source.rb#305
  def each_annotation(&block); end

  # source://steep//lib/steep/source.rb#315
  def each_heredoc_node(node = T.unsafe(nil), parents = T.unsafe(nil), &block); end

  # source://steep//lib/steep/source.rb#387
  def find_comment(line:, column:); end

  # source://steep//lib/steep/source.rb#336
  def find_heredoc_nodes(line, column, position); end

  # source://steep//lib/steep/source.rb#369
  def find_nodes(line:, column:); end

  # source://steep//lib/steep/source.rb#351
  def find_nodes_loc(node, position, parents); end

  # source://steep//lib/steep/source.rb#8
  def ignores; end

  # source://steep//lib/steep/source.rb#6
  def mapping; end

  # source://steep//lib/steep/source.rb#5
  def node; end

  # source://steep//lib/steep/source.rb#4
  def path; end

  # source://steep//lib/steep/source.rb#422
  def without_unrelated_defs(line:, column:); end

  class << self
    # source://steep//lib/steep/source.rb#576
    def adjust_location(node); end

    # source://steep//lib/steep/source.rb#592
    def assertion_node(node, type); end

    # source://steep//lib/steep/source.rb#100
    def construct_mapping(node:, annotations:, mapping:, line_range: T.unsafe(nil)); end

    # source://steep//lib/steep/source.rb#401
    def delete_defs(node, allow_list); end

    # source://steep//lib/steep/source.rb#447
    def insert_type_node(node, comments); end

    # source://steep//lib/steep/source.rb#277
    def map_child_node(node, type = T.unsafe(nil), skip: T.unsafe(nil)); end

    # source://steep//lib/steep/source.rb#32
    def new_parser; end

    # source://steep//lib/steep/source.rb#39
    def parse(source_code, path:, factory:); end

    # source://steep//lib/steep/source.rb#550
    def sendish_node?(node); end

    # source://steep//lib/steep/source.rb#597
    def type_application_node(node, tapp); end
  end
end

# source://steep//lib/steep/source.rb#21
class Steep::Source::Builder < ::Parser::Builders::Default
  # source://steep//lib/steep/source.rb#22
  def string_value(token); end
end

# source://steep//lib/steep/source/ignore_ranges.rb#3
class Steep::Source::IgnoreRanges
  # source://steep//lib/steep/source/ignore_ranges.rb#6
  def initialize(ignores:); end

  # source://steep//lib/steep/source/ignore_ranges.rb#4
  def all_ignores; end

  # source://steep//lib/steep/source/ignore_ranges.rb#4
  def error_ignores; end

  # source://steep//lib/steep/source/ignore_ranges.rb#43
  def ignore?(start_line, end_line, code); end

  # source://steep//lib/steep/source/ignore_ranges.rb#59
  def ignore_code?(line, code); end

  # source://steep//lib/steep/source/ignore_ranges.rb#4
  def ignored_lines; end

  # source://steep//lib/steep/source/ignore_ranges.rb#4
  def ignored_ranges; end
end

# source://steep//lib/steep/subtyping/result.rb#2
module Steep::Subtyping; end

# source://steep//lib/steep/subtyping/cache.rb#3
class Steep::Subtyping::Cache
  # source://steep//lib/steep/subtyping/cache.rb#6
  def initialize; end

  # source://steep//lib/steep/subtyping/cache.rb#15
  def [](relation, self_type, instance_type, class_type, bounds); end

  # source://steep//lib/steep/subtyping/cache.rb#20
  def []=(relation, self_type, instance_type, class_type, bounds, value); end

  # source://steep//lib/steep/subtyping/cache.rb#25
  def no_subtype_cache?; end

  # source://steep//lib/steep/subtyping/cache.rb#10
  def subtype(relation, self_type, instance_type, class_type, bounds); end

  # source://steep//lib/steep/subtyping/cache.rb#4
  def subtypes; end
end

# source://steep//lib/steep/subtyping/check.rb#3
class Steep::Subtyping::Check
  include ::Steep::Subtyping::Result::Helper

  # source://steep//lib/steep/subtyping/check.rb#9
  def initialize(builder:); end

  # source://steep//lib/steep/subtyping/check.rb#916
  def Relation(sub, sup); end

  # source://steep//lib/steep/subtyping/check.rb#229
  def alias?(type); end

  # source://steep//lib/steep/subtyping/check.rb#585
  def arg_type?(type); end

  # source://steep//lib/steep/subtyping/check.rb#75
  def assumptions; end

  # source://steep//lib/steep/subtyping/check.rb#6
  def builder; end

  # source://steep//lib/steep/subtyping/check.rb#7
  def cache; end

  # source://steep//lib/steep/subtyping/check.rb#219
  def cache_bounds(relation); end

  # source://steep//lib/steep/subtyping/check.rb#233
  def cacheable?(relation); end

  # source://steep//lib/steep/subtyping/check.rb#185
  def check(relation, constraints:, self_type:, instance_type:, class_type:); end

  # source://steep//lib/steep/subtyping/check.rb#795
  def check_constraints(relation, variables:, variance:); end

  # source://steep//lib/steep/subtyping/check.rb#861
  def check_function(name, relation); end

  # source://steep//lib/steep/subtyping/check.rb#672
  def check_generic_method_type(name, relation); end

  # source://steep//lib/steep/subtyping/check.rb#630
  def check_interface(relation); end

  # source://steep//lib/steep/subtyping/check.rb#652
  def check_method(name, relation); end

  # source://steep//lib/steep/subtyping/check.rb#892
  def check_method_params(name, relation); end

  # source://steep//lib/steep/subtyping/check.rb#812
  def check_method_type(name, relation); end

  # source://steep//lib/steep/subtyping/check.rb#875
  def check_self_type_binding(relation, sub_self, super_self); end

  # source://steep//lib/steep/subtyping/check.rb#191
  def check_type(relation); end

  # source://steep//lib/steep/subtyping/check.rb#257
  def check_type0(relation); end

  # source://steep//lib/steep/subtyping/check.rb#594
  def check_type_arg(relation); end

  # source://steep//lib/steep/subtyping/check.rb#87
  def class_type; end

  # source://steep//lib/steep/subtyping/check.rb#91
  def constraints; end

  # source://steep//lib/steep/subtyping/check.rb#572
  def definition_for_type(type); end

  # source://steep//lib/steep/subtyping/check.rb#95
  def each_ancestor(ancestors, &block); end

  # source://steep//lib/steep/subtyping/check.rb#1032
  def expand_alias(type, &block); end

  # source://steep//lib/steep/subtyping/check.rb#844
  def expand_block_given(name, relation, &block); end

  # source://steep//lib/steep/subtyping/check.rb#15
  def factory; end

  # source://steep//lib/steep/subtyping/check.rb#246
  def false_type?(type); end

  # source://steep//lib/steep/subtyping/check.rb#1038
  def hole_path(type, path = T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/check.rb#110
  def instance_super_types(type_name, args:); end

  # source://steep//lib/steep/subtyping/check.rb#83
  def instance_type; end

  # source://steep//lib/steep/subtyping/check.rb#920
  def match_method_type_fails?(name, type1, type2); end

  # source://steep//lib/steep/subtyping/check.rb#937
  def match_params(name, relation); end

  # source://steep//lib/steep/subtyping/check.rb#35
  def push_assumption(relation); end

  # source://steep//lib/steep/subtyping/check.rb#42
  def push_variable_bounds(params); end

  # source://steep//lib/steep/subtyping/check.rb#622
  def same_type?(relation); end

  # source://steep//lib/steep/subtyping/check.rb#79
  def self_type; end

  # source://steep//lib/steep/subtyping/check.rb#151
  def singleton_super_types(type_name); end

  # source://steep//lib/steep/subtyping/check.rb#237
  def true_type?(type); end

  # source://steep//lib/steep/subtyping/check.rb#59
  def variable_upper_bound(name); end

  # source://steep//lib/steep/subtyping/check.rb#69
  def variable_upper_bounds; end

  # source://steep//lib/steep/subtyping/check.rb#19
  def with_context(self_type:, instance_type:, class_type:, constraints:); end
end

# source://steep//lib/steep/subtyping/check.rb#4
Steep::Subtyping::Check::ABORT_LIMIT = T.let(T.unsafe(nil), Integer)

# source://steep//lib/steep/subtyping/constraints.rb#3
class Steep::Subtyping::Constraints
  # source://steep//lib/steep/subtyping/constraints.rb#78
  def initialize(unknowns:); end

  # source://steep//lib/steep/subtyping/constraints.rb#104
  def add(var, sub_type: T.unsafe(nil), super_type: T.unsafe(nil), skip: T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/constraints.rb#91
  def add_var(*vars); end

  # source://steep//lib/steep/subtyping/constraints.rb#75
  def dictionary; end

  # source://steep//lib/steep/subtyping/constraints.rb#308
  def each; end

  # source://steep//lib/steep/subtyping/constraints.rb#146
  def eliminate_variable(type, to:); end

  # source://steep//lib/steep/subtyping/constraints.rb#203
  def empty?; end

  # source://steep//lib/steep/subtyping/constraints.rb#304
  def has_constraint?(var); end

  # source://steep//lib/steep/subtyping/constraints.rb#224
  def lower_bound(var, skip: T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/constraints.rb#326
  def lower_bound_types(var_name); end

  # source://steep//lib/steep/subtyping/constraints.rb#239
  def solution(checker, variables:, variance: T.unsafe(nil), self_type: T.unsafe(nil), instance_type: T.unsafe(nil), class_type: T.unsafe(nil), context: T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/constraints.rb#318
  def to_s; end

  # source://steep//lib/steep/subtyping/constraints.rb#197
  def unknown!(var); end

  # source://steep//lib/steep/subtyping/constraints.rb#189
  def unknown?(var); end

  # source://steep//lib/steep/subtyping/constraints.rb#193
  def unknowns; end

  # source://steep//lib/steep/subtyping/constraints.rb#207
  def upper_bound(var, skip: T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/constraints.rb#331
  def upper_bound_types(var_name); end

  # source://steep//lib/steep/subtyping/constraints.rb#76
  def vars; end

  class << self
    # source://steep//lib/steep/subtyping/constraints.rb#87
    def empty; end
  end
end

# source://steep//lib/steep/subtyping/constraints.rb#237
class Steep::Subtyping::Constraints::Context < ::Struct
  def class_type; end
  def class_type=(_); end
  def instance_type; end
  def instance_type=(_); end
  def self_type; end
  def self_type=(_); end
  def variance; end
  def variance=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/subtyping/constraints.rb#59
class Steep::Subtyping::Constraints::UnsatisfiableConstraint < ::StandardError
  # source://steep//lib/steep/subtyping/constraints.rb#65
  def initialize(var:, sub_type:, super_type:, result:); end

  # source://steep//lib/steep/subtyping/constraints.rb#63
  def result; end

  # source://steep//lib/steep/subtyping/constraints.rb#61
  def sub_type; end

  # source://steep//lib/steep/subtyping/constraints.rb#62
  def super_type; end

  # source://steep//lib/steep/subtyping/constraints.rb#60
  def var; end
end

# source://steep//lib/steep/subtyping/constraints.rb#4
class Steep::Subtyping::Constraints::UnsatisfiedInvariantError < ::StandardError
  # source://steep//lib/steep/subtyping/constraints.rb#8
  def initialize(reason:, constraints:); end

  # source://steep//lib/steep/subtyping/constraints.rb#5
  def constraints; end

  # source://steep//lib/steep/subtyping/constraints.rb#6
  def reason; end
end

# source://steep//lib/steep/subtyping/constraints.rb#42
class Steep::Subtyping::Constraints::UnsatisfiedInvariantError::UnknownsFreeVariableNotDisjoint
  # source://steep//lib/steep/subtyping/constraints.rb#47
  def initialize(var:, lower_bound:, upper_bound:); end

  # source://steep//lib/steep/subtyping/constraints.rb#45
  def lower_bound; end

  # source://steep//lib/steep/subtyping/constraints.rb#53
  def message; end

  # source://steep//lib/steep/subtyping/constraints.rb#44
  def upper_bound; end

  # source://steep//lib/steep/subtyping/constraints.rb#43
  def var; end
end

# source://steep//lib/steep/subtyping/constraints.rb#26
class Steep::Subtyping::Constraints::UnsatisfiedInvariantError::VariablesFreeVariablesNotDisjoint
  # source://steep//lib/steep/subtyping/constraints.rb#31
  def initialize(var: T.unsafe(nil), lower_bound: T.unsafe(nil), upper_bound: T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/constraints.rb#28
  def lower_bound; end

  # source://steep//lib/steep/subtyping/constraints.rb#37
  def message; end

  # source://steep//lib/steep/subtyping/constraints.rb#29
  def upper_bound; end

  # source://steep//lib/steep/subtyping/constraints.rb#27
  def var; end
end

# source://steep//lib/steep/subtyping/constraints.rb#14
class Steep::Subtyping::Constraints::UnsatisfiedInvariantError::VariablesUnknownsNotDisjoint
  # source://steep//lib/steep/subtyping/constraints.rb#17
  def initialize(vars:); end

  # source://steep//lib/steep/subtyping/constraints.rb#21
  def message; end

  # source://steep//lib/steep/subtyping/constraints.rb#15
  def vars; end
end

# source://steep//lib/steep/subtyping/relation.rb#3
class Steep::Subtyping::Relation
  # source://steep//lib/steep/subtyping/relation.rb#7
  def initialize(sub_type:, super_type:); end

  # source://steep//lib/steep/subtyping/relation.rb#16
  def ==(other); end

  # source://steep//lib/steep/subtyping/relation.rb#56
  def assert_type(type); end

  # source://steep//lib/steep/subtyping/relation.rb#82
  def block!; end

  # source://steep//lib/steep/subtyping/relation.rb#51
  def block?; end

  # source://steep//lib/steep/subtyping/relation.rb#16
  def eql?(other); end

  # source://steep//lib/steep/subtyping/relation.rb#93
  def flip; end

  # source://steep//lib/steep/subtyping/relation.rb#74
  def function!; end

  # source://steep//lib/steep/subtyping/relation.rb#43
  def function?; end

  # source://steep//lib/steep/subtyping/relation.rb#12
  def hash; end

  # source://steep//lib/steep/subtyping/relation.rb#66
  def interface!; end

  # source://steep//lib/steep/subtyping/relation.rb#34
  def interface?; end

  # source://steep//lib/steep/subtyping/relation.rb#86
  def map; end

  # source://steep//lib/steep/subtyping/relation.rb#70
  def method!; end

  # source://steep//lib/steep/subtyping/relation.rb#38
  def method?; end

  # source://steep//lib/steep/subtyping/relation.rb#78
  def params!; end

  # source://steep//lib/steep/subtyping/relation.rb#47
  def params?; end

  # source://steep//lib/steep/subtyping/relation.rb#4
  def sub_type; end

  # source://steep//lib/steep/subtyping/relation.rb#5
  def super_type; end

  # source://steep//lib/steep/subtyping/relation.rb#26
  def to_ary; end

  # source://steep//lib/steep/subtyping/relation.rb#22
  def to_s; end

  # source://steep//lib/steep/subtyping/relation.rb#62
  def type!; end

  # source://steep//lib/steep/subtyping/relation.rb#30
  def type?; end
end

# source://steep//lib/steep/subtyping/result.rb#3
module Steep::Subtyping::Result; end

# source://steep//lib/steep/subtyping/result.rb#74
class Steep::Subtyping::Result::All < ::Steep::Subtyping::Result::Base
  # source://steep//lib/steep/subtyping/result.rb#77
  def initialize(relation); end

  # source://steep//lib/steep/subtyping/result.rb#84
  def add(*relations, &block); end

  # source://steep//lib/steep/subtyping/result.rb#101
  def add_result(result); end

  # source://steep//lib/steep/subtyping/result.rb#75
  def branches; end

  # source://steep//lib/steep/subtyping/result.rb#113
  def failure?; end

  # source://steep//lib/steep/subtyping/result.rb#117
  def failure_path(path = T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/result.rb#109
  def success?; end
end

# source://steep//lib/steep/subtyping/result.rb#126
class Steep::Subtyping::Result::Any < ::Steep::Subtyping::Result::Base
  # source://steep//lib/steep/subtyping/result.rb#129
  def initialize(relation); end

  # source://steep//lib/steep/subtyping/result.rb#136
  def add(*relations, &block); end

  # source://steep//lib/steep/subtyping/result.rb#127
  def branches; end

  # source://steep//lib/steep/subtyping/result.rb#155
  def failure_path(path = T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/result.rb#151
  def success?; end
end

# source://steep//lib/steep/subtyping/result.rb#4
class Steep::Subtyping::Result::Base
  # source://steep//lib/steep/subtyping/result.rb#7
  def initialize(relation); end

  # source://steep//lib/steep/subtyping/result.rb#24
  def else; end

  # source://steep//lib/steep/subtyping/result.rb#11
  def failure?; end

  # source://steep//lib/steep/subtyping/result.rb#33
  def failure_path(path = T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/result.rb#5
  def relation; end

  # source://steep//lib/steep/subtyping/result.rb#15
  def then; end
end

# source://steep//lib/steep/subtyping/result.rb#52
class Steep::Subtyping::Result::Expand < ::Steep::Subtyping::Result::Base
  # source://steep//lib/steep/subtyping/result.rb#55
  def initialize(relation, &block); end

  # source://steep//lib/steep/subtyping/result.rb#53
  def child; end

  # source://steep//lib/steep/subtyping/result.rb#66
  def failure_path(path = T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/result.rb#62
  def success?; end
end

# source://steep//lib/steep/subtyping/result.rb#177
class Steep::Subtyping::Result::Failure < ::Steep::Subtyping::Result::Base
  # source://steep//lib/steep/subtyping/result.rb#280
  def initialize(relation, error); end

  # source://steep//lib/steep/subtyping/result.rb#278
  def error; end

  # source://steep//lib/steep/subtyping/result.rb#289
  def failure_path(path = T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/result.rb#285
  def success?; end
end

# source://steep//lib/steep/subtyping/result.rb#190
class Steep::Subtyping::Result::Failure::BlockMismatchError
  # source://steep//lib/steep/subtyping/result.rb#193
  def initialize(name:); end

  # source://steep//lib/steep/subtyping/result.rb#197
  def message; end

  # source://steep//lib/steep/subtyping/result.rb#191
  def name; end
end

# source://steep//lib/steep/subtyping/result.rb#272
class Steep::Subtyping::Result::Failure::LoopAbort
  # source://steep//lib/steep/subtyping/result.rb#273
  def message; end
end

# source://steep//lib/steep/subtyping/result.rb#178
class Steep::Subtyping::Result::Failure::MethodMissingError
  # source://steep//lib/steep/subtyping/result.rb#181
  def initialize(name:); end

  # source://steep//lib/steep/subtyping/result.rb#185
  def message; end

  # source://steep//lib/steep/subtyping/result.rb#179
  def name; end
end

# source://steep//lib/steep/subtyping/result.rb#202
class Steep::Subtyping::Result::Failure::ParameterMismatchError
  # source://steep//lib/steep/subtyping/result.rb#205
  def initialize(name:); end

  # source://steep//lib/steep/subtyping/result.rb#209
  def message; end

  # source://steep//lib/steep/subtyping/result.rb#203
  def name; end
end

# source://steep//lib/steep/subtyping/result.rb#226
class Steep::Subtyping::Result::Failure::PolyMethodSubtyping
  # source://steep//lib/steep/subtyping/result.rb#229
  def initialize(name:); end

  # source://steep//lib/steep/subtyping/result.rb#233
  def message; end

  # source://steep//lib/steep/subtyping/result.rb#227
  def name; end
end

# source://steep//lib/steep/subtyping/result.rb#266
class Steep::Subtyping::Result::Failure::SelfBindingMismatch
  # source://steep//lib/steep/subtyping/result.rb#267
  def message; end
end

# source://steep//lib/steep/subtyping/result.rb#214
class Steep::Subtyping::Result::Failure::UnknownPairError
  # source://steep//lib/steep/subtyping/result.rb#217
  def initialize(relation:); end

  # source://steep//lib/steep/subtyping/result.rb#221
  def message; end

  # source://steep//lib/steep/subtyping/result.rb#215
  def relation; end
end

# source://steep//lib/steep/subtyping/result.rb#238
class Steep::Subtyping::Result::Failure::UnsatisfiedConstraints
  # source://steep//lib/steep/subtyping/result.rb#241
  def initialize(error); end

  # source://steep//lib/steep/subtyping/result.rb#239
  def error; end

  # source://steep//lib/steep/subtyping/result.rb#261
  def message; end

  # source://steep//lib/steep/subtyping/result.rb#257
  def result; end

  # source://steep//lib/steep/subtyping/result.rb#249
  def sub_type; end

  # source://steep//lib/steep/subtyping/result.rb#253
  def super_type; end

  # source://steep//lib/steep/subtyping/result.rb#245
  def var; end
end

# source://steep//lib/steep/subtyping/result.rb#295
module Steep::Subtyping::Result::Helper
  # source://steep//lib/steep/subtyping/result.rb#304
  def All(relation, &block); end

  # source://steep//lib/steep/subtyping/result.rb#308
  def Any(relation, &block); end

  # source://steep//lib/steep/subtyping/result.rb#300
  def Expand(relation, &block); end

  # source://steep//lib/steep/subtyping/result.rb#318
  def Failure(relation, error = T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/result.rb#296
  def Skip(relation); end

  # source://steep//lib/steep/subtyping/result.rb#312
  def Success(relation); end

  # source://steep//lib/steep/subtyping/result.rb#312
  def success(relation); end
end

# source://steep//lib/steep/subtyping/result.rb#38
class Steep::Subtyping::Result::Skip < ::Steep::Subtyping::Result::Base
  # source://steep//lib/steep/subtyping/result.rb#43
  def failure?; end

  # source://steep//lib/steep/subtyping/result.rb#47
  def failure_path(path = T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/result.rb#39
  def success?; end
end

# source://steep//lib/steep/subtyping/result.rb#167
class Steep::Subtyping::Result::Success < ::Steep::Subtyping::Result::Base
  # source://steep//lib/steep/subtyping/result.rb#172
  def failure_path(path = T.unsafe(nil)); end

  # source://steep//lib/steep/subtyping/result.rb#168
  def success?; end
end

# source://steep//lib/steep/subtyping/variable_variance.rb#3
class Steep::Subtyping::VariableVariance
  # source://steep//lib/steep/subtyping/variable_variance.rb#7
  def initialize(covariants:, contravariants:); end

  # source://steep//lib/steep/subtyping/variable_variance.rb#16
  def contravariant?(var); end

  # source://steep//lib/steep/subtyping/variable_variance.rb#5
  def contravariants; end

  # source://steep//lib/steep/subtyping/variable_variance.rb#12
  def covariant?(var); end

  # source://steep//lib/steep/subtyping/variable_variance.rb#4
  def covariants; end

  # source://steep//lib/steep/subtyping/variable_variance.rb#20
  def invariant?(var); end

  class << self
    # source://steep//lib/steep/subtyping/variable_variance.rb#48
    def add_params(params, block:, covariants:, contravariants:); end

    # source://steep//lib/steep/subtyping/variable_variance.rb#54
    def add_type(type, variance:, covariants:, contravariants:); end

    # source://steep//lib/steep/subtyping/variable_variance.rb#33
    def from_method_type(method_type); end

    # source://steep//lib/steep/subtyping/variable_variance.rb#24
    def from_type(type); end
  end
end

# source://steep//lib/steep/thread_waiter.rb#2
class Steep::ThreadWaiter
  # source://steep//lib/steep/thread_waiter.rb#5
  def initialize(objects); end

  # source://steep//lib/steep/thread_waiter.rb#3
  def objects; end

  # source://steep//lib/steep/thread_waiter.rb#3
  def queue; end

  # source://steep//lib/steep/thread_waiter.rb#27
  def wait_one; end

  # source://steep//lib/steep/thread_waiter.rb#3
  def waiter_threads; end
end

# source://steep//lib/steep/type_construction.rb#2
class Steep::TypeConstruction
  include ::Steep::NodeHelper
  include ::Steep::ModuleHelper

  # source://steep//lib/steep/type_construction.rb#83
  def initialize(checker:, source:, annotations:, typing:, context:); end

  # source://steep//lib/steep/type_construction.rb#4491
  def absolute_name(name); end

  # source://steep//lib/steep/type_construction.rb#677
  def add_call(call); end

  # source://steep//lib/steep/type_construction.rb#670
  def add_typing(node, type:, constr: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#46
  def annotations; end

  # source://steep//lib/steep/type_construction.rb#3648
  def apply_solution(errors, node:, method_type:); end

  # source://steep//lib/steep/type_construction.rb#4817
  def arrayish_type?(type, untyped_is: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#63
  def block_context; end

  # source://steep//lib/steep/type_construction.rb#67
  def block_context!; end

  # source://steep//lib/steep/type_construction.rb#71
  def break_context; end

  # source://steep//lib/steep/type_construction.rb#3429
  def builder_config; end

  # source://steep//lib/steep/type_construction.rb#3636
  def bypass_splat(node); end

  # source://steep//lib/steep/type_construction.rb#3438
  def calculate_interface(type, method_name = T.unsafe(nil), private:); end

  # source://steep//lib/steep/type_construction.rb#2625
  def check(node, type, constraints: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#131
  def check_relation(sub_type:, super_type:, constraints: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#44
  def checker; end

  # source://steep//lib/steep/type_construction.rb#49
  def context; end

  # source://steep//lib/steep/type_construction.rb#4677
  def deep_expand_alias(type); end

  # source://steep//lib/steep/type_construction.rb#311
  def default_module_context(implement_module_name, nesting:); end

  # source://steep//lib/steep/type_construction.rb#3669
  def eliminate_vars(type, variables, to: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#4706
  def expand_alias(type, &block); end

  # source://steep//lib/steep/type_construction.rb#3454
  def expand_self(type); end

  # source://steep//lib/steep/type_construction.rb#4630
  def fallback_to_any(node); end

  # source://steep//lib/steep/type_construction.rb#4695
  def flatten_array_elements(type); end

  # source://steep//lib/steep/type_construction.rb#4681
  def flatten_union(type); end

  # source://steep//lib/steep/type_construction.rb#4349
  def for_block(body_node, block_params:, block_param_hint:, block_type_hint:, block_block_hint:, block_annotations:, node_type_hint:, block_self_hint:); end

  # source://steep//lib/steep/type_construction.rb#646
  def for_branch(node, break_context: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#457
  def for_class(node, new_class_name, super_class_name); end

  # source://steep//lib/steep/type_construction.rb#344
  def for_module(node, new_module_name); end

  # source://steep//lib/steep/type_construction.rb#152
  def for_new_method(method_name, node, args:, self_type:, definition:); end

  # source://steep//lib/steep/type_construction.rb#560
  def for_sclass(node, type); end

  # source://steep//lib/steep/type_construction.rb#2762
  def gvasgn(node, rhs_type); end

  # source://steep//lib/steep/type_construction.rb#284
  def implement_module(module_name:, annotations:, super_name: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#35
  def inspect; end

  # source://steep//lib/steep/type_construction.rb#5085
  def instance_type(type); end

  # source://steep//lib/steep/type_construction.rb#2744
  def ivasgn(node, rhs_type); end

  # source://steep//lib/steep/type_construction.rb#2718
  def lvasgn(node, type); end

  # source://steep//lib/steep/type_construction.rb#2707
  def masgn_lhs?(lhs); end

  # source://steep//lib/steep/type_construction.rb#551
  def meta_type(type); end

  # source://steep//lib/steep/type_construction.rb#55
  def method_context; end

  # source://steep//lib/steep/type_construction.rb#59
  def method_context!; end

  # source://steep//lib/steep/type_construction.rb#51
  def module_context; end

  # source://steep//lib/steep/type_construction.rb#4644
  def namespace_module?(node); end

  # source://steep//lib/steep/type_construction.rb#4487
  def nesting; end

  # source://steep//lib/steep/type_construction.rb#145
  def no_subtyping?(sub_type:, super_type:, constraints: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#3006
  def optional_proc?(type); end

  # source://steep//lib/steep/type_construction.rb#4690
  def partition_flatten_types(type, &block); end

  # source://steep//lib/steep/type_construction.rb#5031
  def pick_one_of(types, range:); end

  # source://steep//lib/steep/type_construction.rb#3174
  def pure_send?(call, receiver, arguments); end

  # source://steep//lib/steep/type_construction.rb#5046
  def save_typing; end

  # source://steep//lib/steep/type_construction.rb#4685
  def select_flatten_types(type, &block); end

  # source://steep//lib/steep/type_construction.rb#4640
  def self_class?(node); end

  # source://steep//lib/steep/type_construction.rb#75
  def self_type; end

  # source://steep//lib/steep/type_construction.rb#4836
  def semantically_arrayish_type?(type); end

  # source://steep//lib/steep/type_construction.rb#4331
  def set_up_block_mlhs_params_env(node, type, hash, &block); end

  # source://steep//lib/steep/type_construction.rb#5068
  def singleton_type(type); end

  # source://steep//lib/steep/type_construction.rb#45
  def source; end

  # source://steep//lib/steep/type_construction.rb#693
  def synthesize(node, hint: T.unsafe(nil), condition: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#4474
  def synthesize_block(node:, block_type_hint:, block_body:); end

  # source://steep//lib/steep/type_construction.rb#3154
  def synthesize_children(node, skips: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#2929
  def synthesize_constant(node, parent_node, constant_name); end

  # source://steep//lib/steep/type_construction.rb#2878
  def synthesize_constant_decl(node, parent_node, constant_name, &block); end

  # source://steep//lib/steep/type_construction.rb#2637
  def synthesize_sendish(node, hint:, tapp:); end

  # source://steep//lib/steep/type_construction.rb#4715
  def test_literal_type(literal, hint); end

  # source://steep//lib/steep/type_construction.rb#4729
  def to_instance_type(type, args: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#4869
  def try_array_type(node, hint); end

  # source://steep//lib/steep/type_construction.rb#4791
  def try_convert(type, method); end

  # source://steep//lib/steep/type_construction.rb#4803
  def try_convert_to_array(type); end

  # source://steep//lib/steep/type_construction.rb#3811
  def try_method_type(node, receiver_type:, method_name:, method_type:, arguments:, block_params:, block_body:, tapp:, hint:); end

  # source://steep//lib/steep/type_construction.rb#3476
  def try_special_method(node, receiver_type:, method_name:, method_type:, arguments:, block_params:, block_body:, hint:); end

  # source://steep//lib/steep/type_construction.rb#4757
  def try_tuple_type(array_node, hint); end

  # source://steep//lib/steep/type_construction.rb#4741
  def try_tuple_type!(node, hint: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#4663
  def type_any_rec(node, only_children: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#4276
  def type_block_without_hint(node:, block_annotations:, block_params:, block_body:); end

  # source://steep//lib/steep/type_construction.rb#3696
  def type_check_args(method_name, args, constraints, errors); end

  # source://steep//lib/steep/type_construction.rb#4265
  def type_check_argument(node, type:, constraints:, errors:, report_node: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#3678
  def type_check_untyped_args(arguments); end

  # source://steep//lib/steep/type_construction.rb#4950
  def type_hash(hash_node, hint:); end

  # source://steep//lib/steep/type_construction.rb#4901
  def type_hash_record(hash_node, record_type); end

  # source://steep//lib/steep/type_construction.rb#3018
  def type_lambda(node, params_node:, body_node:, type_hint:); end

  # source://steep//lib/steep/type_construction.rb#2823
  def type_masgn(node); end

  # source://steep//lib/steep/type_construction.rb#2780
  def type_masgn_type(mlhs_node, rhs_type, masgn:, optional:); end

  # source://steep//lib/steep/type_construction.rb#3549
  def type_method_call(node, method_name:, receiver_type:, method:, arguments:, block_params:, block_body:, tapp:, hint:); end

  # source://steep//lib/steep/type_construction.rb#5051
  def type_name(type); end

  # source://steep//lib/steep/type_construction.rb#3327
  def type_send(node, send_node:, block_params:, block_body:, tapp:, hint:, unwrap: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#3186
  def type_send_interface(node, interface:, receiver:, receiver_type:, method_name:, arguments:, block_params:, block_body:, tapp:, hint:); end

  # source://steep//lib/steep/type_construction.rb#47
  def typing; end

  # source://steep//lib/steep/type_construction.rb#4525
  def union_of_tuple_to_tuple_of_union(type); end

  # source://steep//lib/steep/type_construction.rb#4495
  def union_type(*types); end

  # source://steep//lib/steep/type_construction.rb#4500
  def union_type_unify(*types); end

  # source://steep//lib/steep/type_construction.rb#4673
  def unwrap(type); end

  # source://steep//lib/steep/type_construction.rb#123
  def update_context; end

  # source://steep//lib/steep/type_construction.rb#127
  def update_type_env; end

  # source://steep//lib/steep/type_construction.rb#4549
  def validate_method_definitions(node, module_name); end

  # source://steep//lib/steep/type_construction.rb#79
  def variable_context; end

  # source://steep//lib/steep/type_construction.rb#109
  def with(annotations: T.unsafe(nil), context: T.unsafe(nil), typing: T.unsafe(nil)); end

  # source://steep//lib/steep/type_construction.rb#3625
  def with_child_typing(range:); end

  # source://steep//lib/steep/type_construction.rb#533
  def with_class_constr(node, new_class_name, super_class_name); end

  # source://steep//lib/steep/type_construction.rb#277
  def with_method_constr(method_name, node, args:, self_type:, definition:); end

  # source://steep//lib/steep/type_construction.rb#450
  def with_module_constr(node, module_name); end

  # source://steep//lib/steep/type_construction.rb#91
  def with_new_typing(typing); end

  # source://steep//lib/steep/type_construction.rb#541
  def with_sclass_constr(node, type); end

  # source://steep//lib/steep/type_construction.rb#101
  def with_updated_context(type_env: T.unsafe(nil)); end
end

# source://steep//lib/steep/type_construction.rb#3169
Steep::TypeConstruction::KNOWN_PURE_METHODS = T.let(T.unsafe(nil), Set)

# source://steep//lib/steep/type_construction.rb#3
class Steep::TypeConstruction::Pair
  # source://steep//lib/steep/type_construction.rb#7
  def initialize(type:, constr:); end

  # source://steep//lib/steep/type_construction.rb#16
  def +(other); end

  # source://steep//lib/steep/type_construction.rb#5
  def constr; end

  # source://steep//lib/steep/type_construction.rb#24
  def context; end

  # source://steep//lib/steep/type_construction.rb#28
  def to_ary; end

  # source://steep//lib/steep/type_construction.rb#4
  def type; end

  # source://steep//lib/steep/type_construction.rb#12
  def with(type: T.unsafe(nil), constr: T.unsafe(nil)); end
end

# source://steep//lib/steep/type_construction.rb#40
Steep::TypeConstruction::SPECIAL_LVAR_NAMES = T.let(T.unsafe(nil), Set)

# source://steep//lib/steep/type_construction.rb#3462
Steep::TypeConstruction::SPECIAL_METHOD_NAMES = T.let(T.unsafe(nil), Hash)

# source://steep//lib/steep/type_inference/context.rb#2
module Steep::TypeInference; end

# source://steep//lib/steep/type_inference/block_params.rb#3
class Steep::TypeInference::BlockParams
  # source://steep//lib/steep/type_inference/block_params.rb#95
  def initialize(leading_params:, optional_params:, rest_param:, trailing_params:, block_param:); end

  # source://steep//lib/steep/type_inference/block_params.rb#93
  def block_param; end

  # source://steep//lib/steep/type_inference/block_params.rb#359
  def each(&block); end

  # source://steep//lib/steep/type_inference/block_params.rb#367
  def each_single_param; end

  # source://steep//lib/steep/type_inference/block_params.rb#346
  def expandable?; end

  # source://steep//lib/steep/type_inference/block_params.rb#330
  def expandable_params?(params_type, factory); end

  # source://steep//lib/steep/type_inference/block_params.rb#89
  def leading_params; end

  # source://steep//lib/steep/type_inference/block_params.rb#90
  def optional_params; end

  # source://steep//lib/steep/type_inference/block_params.rb#103
  def params; end

  # source://steep//lib/steep/type_inference/block_params.rb#162
  def params_type(hint: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/block_params.rb#166
  def params_type0(hint:); end

  # source://steep//lib/steep/type_inference/block_params.rb#91
  def rest_param; end

  # source://steep//lib/steep/type_inference/block_params.rb#92
  def trailing_params; end

  # source://steep//lib/steep/type_inference/block_params.rb#400
  def untyped_args?(params); end

  # source://steep//lib/steep/type_inference/block_params.rb#235
  def zip(params_type, block, factory:); end

  class << self
    # source://steep//lib/steep/type_inference/block_params.rb#380
    def from_multiple(node, annotations); end

    # source://steep//lib/steep/type_inference/block_params.rb#113
    def from_node(node, annotations:); end
  end
end

# source://steep//lib/steep/type_inference/block_params.rb#36
class Steep::TypeInference::BlockParams::MultipleParam
  # source://steep//lib/steep/type_inference/block_params.rb#41
  def initialize(node:, params:); end

  # source://steep//lib/steep/type_inference/block_params.rb#46
  def ==(other); end

  # source://steep//lib/steep/type_inference/block_params.rb#65
  def each_param(&block); end

  # source://steep//lib/steep/type_inference/block_params.rb#46
  def eql?(other); end

  # source://steep//lib/steep/type_inference/block_params.rb#54
  def hash; end

  # source://steep//lib/steep/type_inference/block_params.rb#37
  def node; end

  # source://steep//lib/steep/type_inference/block_params.rb#39
  def params; end

  # source://steep//lib/steep/type_inference/block_params.rb#80
  def type; end

  # source://steep//lib/steep/type_inference/block_params.rb#58
  def variable_types; end
end

# source://steep//lib/steep/type_inference/block_params.rb#4
class Steep::TypeInference::BlockParams::Param
  # source://steep//lib/steep/type_inference/block_params.rb#10
  def initialize(var:, type:, value:, node:); end

  # source://steep//lib/steep/type_inference/block_params.rb#17
  def ==(other); end

  # source://steep//lib/steep/type_inference/block_params.rb#27
  def each_param(&block); end

  # source://steep//lib/steep/type_inference/block_params.rb#17
  def eql?(other); end

  # source://steep//lib/steep/type_inference/block_params.rb#23
  def hash; end

  # source://steep//lib/steep/type_inference/block_params.rb#8
  def node; end

  # source://steep//lib/steep/type_inference/block_params.rb#6
  def type; end

  # source://steep//lib/steep/type_inference/block_params.rb#7
  def value; end

  # source://steep//lib/steep/type_inference/block_params.rb#5
  def var; end
end

# source://steep//lib/steep/type_inference/case_when.rb#3
class Steep::TypeInference::CaseWhen
  include ::Steep::NodeHelper
  extend ::Steep::NodeHelper

  # source://steep//lib/steep/type_inference/case_when.rb#119
  def initialize(node, logic); end

  # source://steep//lib/steep/type_inference/case_when.rb#117
  def assignment_node; end

  # source://steep//lib/steep/type_inference/case_when.rb#116
  def clause_results; end

  # source://steep//lib/steep/type_inference/case_when.rb#115
  def condition_node; end

  # source://steep//lib/steep/type_inference/case_when.rb#178
  def else_clause; end

  # source://steep//lib/steep/type_inference/case_when.rb#115
  def else_node; end

  # source://steep//lib/steep/type_inference/case_when.rb#116
  def else_result; end

  # source://steep//lib/steep/type_inference/case_when.rb#255
  def has_else_clause?; end

  # source://steep//lib/steep/type_inference/case_when.rb#116
  def initial_constr; end

  # source://steep//lib/steep/type_inference/case_when.rb#211
  def latest_result; end

  # source://steep//lib/steep/type_inference/case_when.rb#115
  def location; end

  # source://steep//lib/steep/type_inference/case_when.rb#116
  def logic; end

  # source://steep//lib/steep/type_inference/case_when.rb#115
  def node; end

  # source://steep//lib/steep/type_inference/case_when.rb#290
  def propagate_value_node_type(env); end

  # source://steep//lib/steep/type_inference/case_when.rb#222
  def result; end

  # source://steep//lib/steep/type_inference/case_when.rb#263
  def rewrite_condition_node(var_name, node); end

  # source://steep//lib/steep/type_inference/case_when.rb#259
  def typing; end

  # source://steep//lib/steep/type_inference/case_when.rb#117
  def value_node; end

  # source://steep//lib/steep/type_inference/case_when.rb#117
  def var_name; end

  # source://steep//lib/steep/type_inference/case_when.rb#142
  def when_clauses; end

  # source://steep//lib/steep/type_inference/case_when.rb#115
  def when_nodes; end

  class << self
    # source://steep//lib/steep/type_inference/case_when.rb#71
    def type_check(constr, node, logic, hint:, condition:); end
  end
end

# source://steep//lib/steep/type_inference/case_when.rb#4
class Steep::TypeInference::CaseWhen::WhenPatterns
  include ::Steep::NodeHelper

  # source://steep//lib/steep/type_inference/case_when.rb#9
  def initialize(logic, initial_constr, unreachable_clause, assignment_node); end

  # source://steep//lib/steep/type_inference/case_when.rb#18
  def add_pattern(pat); end

  # source://steep//lib/steep/type_inference/case_when.rb#63
  def assignment_node; end

  # source://steep//lib/steep/type_inference/case_when.rb#40
  def body_result; end

  # source://steep//lib/steep/type_inference/case_when.rb#54
  def falsy_result; end

  # source://steep//lib/steep/type_inference/case_when.rb#7
  def initial_constr; end

  # source://steep//lib/steep/type_inference/case_when.rb#29
  def latest_result; end

  # source://steep//lib/steep/type_inference/case_when.rb#7
  def logic; end

  # source://steep//lib/steep/type_inference/case_when.rb#7
  def pattern_results; end

  # source://steep//lib/steep/type_inference/case_when.rb#7
  def unreachable_clause; end
end

# source://steep//lib/steep/type_inference/constant_env.rb#3
class Steep::TypeInference::ConstantEnv
  # source://steep//lib/steep/type_inference/constant_env.rb#8
  def initialize(factory:, context:, resolver:); end

  # source://steep//lib/steep/type_inference/constant_env.rb#37
  def children(module_name); end

  # source://steep//lib/steep/type_inference/constant_env.rb#26
  def constants; end

  # source://steep//lib/steep/type_inference/constant_env.rb#4
  def context; end

  # source://steep//lib/steep/type_inference/constant_env.rb#45
  def decompose_constant(constant); end

  # source://steep//lib/steep/type_inference/constant_env.rb#41
  def decompose_constant!(constant); end

  # source://steep//lib/steep/type_inference/constant_env.rb#5
  def factory; end

  # source://steep//lib/steep/type_inference/constant_env.rb#14
  def resolve(name); end

  # source://steep//lib/steep/type_inference/constant_env.rb#31
  def resolve_child(module_name, constant_name); end

  # source://steep//lib/steep/type_inference/constant_env.rb#6
  def resolver; end

  # source://steep//lib/steep/type_inference/constant_env.rb#20
  def toplevel(name); end
end

# source://steep//lib/steep/type_inference/context.rb#3
class Steep::TypeInference::Context
  # source://steep//lib/steep/type_inference/context.rb#149
  def initialize(method_context:, block_context:, break_context:, module_context:, self_type:, type_env:, call_context:, variable_context:); end

  # source://steep//lib/steep/type_inference/context.rb#142
  def block_context; end

  # source://steep//lib/steep/type_inference/context.rb#143
  def break_context; end

  # source://steep//lib/steep/type_inference/context.rb#140
  def call_context; end

  # source://steep//lib/steep/type_inference/context.rb#190
  def env; end

  # source://steep//lib/steep/type_inference/context.rb#186
  def factory; end

  # source://steep//lib/steep/type_inference/context.rb#180
  def inspect; end

  # source://steep//lib/steep/type_inference/context.rb#141
  def method_context; end

  # source://steep//lib/steep/type_inference/context.rb#144
  def module_context; end

  # source://steep//lib/steep/type_inference/context.rb#145
  def self_type; end

  # source://steep//lib/steep/type_inference/context.rb#146
  def type_env; end

  # source://steep//lib/steep/type_inference/context.rb#147
  def variable_context; end

  # source://steep//lib/steep/type_inference/context.rb#160
  def with(method_context: T.unsafe(nil), block_context: T.unsafe(nil), break_context: T.unsafe(nil), module_context: T.unsafe(nil), self_type: T.unsafe(nil), type_env: T.unsafe(nil), call_context: T.unsafe(nil), variable_context: T.unsafe(nil)); end
end

# source://steep//lib/steep/type_inference/context.rb#30
class Steep::TypeInference::Context::BlockContext
  # source://steep//lib/steep/type_inference/context.rb#33
  def initialize(body_type:); end

  # source://steep//lib/steep/type_inference/context.rb#31
  def body_type; end

  # source://steep//lib/steep/type_inference/context.rb#37
  def subst(s); end
end

# source://steep//lib/steep/type_inference/context.rb#42
class Steep::TypeInference::Context::BreakContext
  # source://steep//lib/steep/type_inference/context.rb#46
  def initialize(break_type:, next_type:); end

  # source://steep//lib/steep/type_inference/context.rb#43
  def break_type; end

  # source://steep//lib/steep/type_inference/context.rb#44
  def next_type; end

  # source://steep//lib/steep/type_inference/context.rb#51
  def subst(s); end
end

# source://steep//lib/steep/type_inference/context.rb#4
class Steep::TypeInference::Context::MethodContext
  # source://steep//lib/steep/type_inference/context.rb#12
  def initialize(name:, method:, method_type:, return_type:, super_method:, forward_arg_type:); end

  # source://steep//lib/steep/type_inference/context.rb#25
  def attribute_setter?; end

  # source://steep//lib/steep/type_inference/context.rb#21
  def block_type; end

  # source://steep//lib/steep/type_inference/context.rb#10
  def forward_arg_type; end

  # source://steep//lib/steep/type_inference/context.rb#6
  def method; end

  # source://steep//lib/steep/type_inference/context.rb#7
  def method_type; end

  # source://steep//lib/steep/type_inference/context.rb#5
  def name; end

  # source://steep//lib/steep/type_inference/context.rb#8
  def return_type; end

  # source://steep//lib/steep/type_inference/context.rb#9
  def super_method; end
end

# source://steep//lib/steep/type_inference/context.rb#56
class Steep::TypeInference::Context::ModuleContext
  # source://steep//lib/steep/type_inference/context.rb#67
  def initialize(instance_type:, module_type:, implement_name:, class_name:, nesting:, instance_definition: T.unsafe(nil), module_definition: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/context.rb#63
  def class_name; end

  # source://steep//lib/steep/type_inference/context.rb#79
  def class_variables; end

  # source://steep//lib/steep/type_inference/context.rb#59
  def defined_instance_methods; end

  # source://steep//lib/steep/type_inference/context.rb#60
  def defined_module_methods; end

  # source://steep//lib/steep/type_inference/context.rb#62
  def implement_name; end

  # source://steep//lib/steep/type_inference/context.rb#64
  def instance_definition; end

  # source://steep//lib/steep/type_inference/context.rb#57
  def instance_type; end

  # source://steep//lib/steep/type_inference/context.rb#65
  def module_definition; end

  # source://steep//lib/steep/type_inference/context.rb#58
  def module_type; end

  # source://steep//lib/steep/type_inference/context.rb#61
  def nesting; end

  # source://steep//lib/steep/type_inference/context.rb#87
  def update(instance_type: T.unsafe(nil), module_type: T.unsafe(nil), implement_name: T.unsafe(nil), class_name: T.unsafe(nil), instance_definition: T.unsafe(nil), module_definition: T.unsafe(nil), nesting: T.unsafe(nil)); end
end

# source://steep//lib/steep/type_inference/context.rb#108
class Steep::TypeInference::Context::TypeVariableContext
  # source://steep//lib/steep/type_inference/context.rb#112
  def initialize(type_params, parent_context: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/context.rb#123
  def [](name); end

  # source://steep//lib/steep/type_inference/context.rb#109
  def table; end

  # source://steep//lib/steep/type_inference/context.rb#110
  def type_params; end

  # source://steep//lib/steep/type_inference/context.rb#127
  def upper_bounds; end

  class << self
    # source://steep//lib/steep/type_inference/context.rb#135
    def empty; end
  end
end

# source://steep//lib/steep/type_inference/context_array.rb#3
class Steep::TypeInference::ContextArray
  # source://steep//lib/steep/type_inference/context_array.rb#17
  def initialize(buffer:, context:, range: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/context_array.rb#94
  def [](index); end

  # source://steep//lib/steep/type_inference/context_array.rb#98
  def at(line:, column:); end

  # source://steep//lib/steep/type_inference/context_array.rb#14
  def buffer; end

  # source://steep//lib/steep/type_inference/context_array.rb#80
  def context_at(index, entry: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/context_array.rb#66
  def each_entry(&block); end

  # source://steep//lib/steep/type_inference/context_array.rb#37
  def insert_context(range, context:, entry: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/context_array.rb#103
  def merge(subtree); end

  # source://steep//lib/steep/type_inference/context_array.rb#22
  def range; end

  # source://steep//lib/steep/type_inference/context_array.rb#15
  def root; end

  class << self
    # source://steep//lib/steep/type_inference/context_array.rb#26
    def from_source(source:, context:, range: T.unsafe(nil)); end
  end
end

# source://steep//lib/steep/type_inference/context_array.rb#4
class Steep::TypeInference::ContextArray::Entry
  # source://steep//lib/steep/type_inference/context_array.rb#7
  def initialize(range:, context:); end

  # source://steep//lib/steep/type_inference/context_array.rb#5
  def context; end

  # source://steep//lib/steep/type_inference/context_array.rb#5
  def range; end

  # source://steep//lib/steep/type_inference/context_array.rb#5
  def sub_entries; end
end

# source://steep//lib/steep/type_inference/logic_type_interpreter.rb#3
class Steep::TypeInference::LogicTypeInterpreter
  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#24
  def initialize(subtyping:, typing:, config:); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#22
  def config; end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#407
  def decompose_value(node); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#56
  def eval(env:, node:); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#197
  def evaluate_assignment(assignment_node, env, rhs_type); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#278
  def evaluate_method_call(env:, type:, receiver:, arguments:); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#60
  def evaluate_node(env:, node:, type: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#30
  def factory; end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#34
  def guess_type_from_method(node); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#430
  def literal_var_type_case_select(value_node, arg_type); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#582
  def no_subtyping?(sub_type:, super_type:); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#233
  def refine_node_type(env:, node:, truthy_type:, falsy_type:); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#20
  def subtyping; end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#591
  def subtyping?(sub_type:, super_type:); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#595
  def try_convert(type, method); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#493
  def type_case_select(type, klass); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#502
  def type_case_select0(type, klass); end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#21
  def typing; end
end

# source://steep//lib/steep/type_inference/logic_type_interpreter.rb#52
Steep::TypeInference::LogicTypeInterpreter::BOOL = T.let(T.unsafe(nil), Steep::AST::Types::Boolean)

# source://steep//lib/steep/type_inference/logic_type_interpreter.rb#53
Steep::TypeInference::LogicTypeInterpreter::BOT = T.let(T.unsafe(nil), Steep::AST::Types::Bot)

# source://steep//lib/steep/type_inference/logic_type_interpreter.rb#51
Steep::TypeInference::LogicTypeInterpreter::FALSE = T.let(T.unsafe(nil), Steep::AST::Types::Literal)

# source://steep//lib/steep/type_inference/logic_type_interpreter.rb#4
class Steep::TypeInference::LogicTypeInterpreter::Result < ::Struct
  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#14
  def unreachable!; end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#5
  def update_env; end

  # source://steep//lib/steep/type_inference/logic_type_interpreter.rb#10
  def update_type; end
end

# source://steep//lib/steep/type_inference/logic_type_interpreter.rb#50
Steep::TypeInference::LogicTypeInterpreter::TRUE = T.let(T.unsafe(nil), Steep::AST::Types::Literal)

# source://steep//lib/steep/type_inference/logic_type_interpreter.rb#54
Steep::TypeInference::LogicTypeInterpreter::UNTYPED = T.let(T.unsafe(nil), Steep::AST::Types::Any)

# source://steep//lib/steep/type_inference/method_call.rb#3
module Steep::TypeInference::MethodCall; end

# source://steep//lib/steep/type_inference/method_call.rb#76
class Steep::TypeInference::MethodCall::Base
  # source://steep//lib/steep/type_inference/method_call.rb#83
  def initialize(node:, context:, method_name:, receiver_type:, return_type:); end

  # source://steep//lib/steep/type_inference/method_call.rb#99
  def ==(other); end

  # source://steep//lib/steep/type_inference/method_call.rb#78
  def context; end

  # source://steep//lib/steep/type_inference/method_call.rb#99
  def eql?(other); end

  # source://steep//lib/steep/type_inference/method_call.rb#110
  def hash; end

  # source://steep//lib/steep/type_inference/method_call.rb#79
  def method_name; end

  # source://steep//lib/steep/type_inference/method_call.rb#77
  def node; end

  # source://steep//lib/steep/type_inference/method_call.rb#81
  def receiver_type; end

  # source://steep//lib/steep/type_inference/method_call.rb#80
  def return_type; end

  # source://steep//lib/steep/type_inference/method_call.rb#91
  def with_return_type(new_type); end
end

# source://steep//lib/steep/type_inference/method_call.rb#181
class Steep::TypeInference::MethodCall::Error < ::Steep::TypeInference::MethodCall::Base
  # source://steep//lib/steep/type_inference/method_call.rb#185
  def initialize(node:, context:, method_name:, receiver_type:, errors:, method_decls: T.unsafe(nil), return_type: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/method_call.rb#182
  def errors; end

  # source://steep//lib/steep/type_inference/method_call.rb#183
  def method_decls; end
end

# source://steep//lib/steep/type_inference/method_call.rb#28
class Steep::TypeInference::MethodCall::MethodContext < ::Struct
  def method_name; end
  def method_name=(_); end

  # source://steep//lib/steep/type_inference/method_call.rb#31
  def to_s; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/type_inference/method_call.rb#4
class Steep::TypeInference::MethodCall::MethodDecl
  # source://steep//lib/steep/type_inference/method_call.rb#8
  def initialize(method_name:, method_def:); end

  # source://steep//lib/steep/type_inference/method_call.rb#17
  def ==(other); end

  # source://steep//lib/steep/type_inference/method_call.rb#17
  def eql?(other); end

  # source://steep//lib/steep/type_inference/method_call.rb#13
  def hash; end

  # source://steep//lib/steep/type_inference/method_call.rb#6
  def method_def; end

  # source://steep//lib/steep/type_inference/method_call.rb#5
  def method_name; end

  # source://steep//lib/steep/type_inference/method_call.rb#23
  def method_type; end
end

# source://steep//lib/steep/type_inference/method_call.rb#36
class Steep::TypeInference::MethodCall::ModuleContext < ::Struct
  # source://steep//lib/steep/type_inference/method_call.rb#39
  def to_s; end

  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/type_inference/method_call.rb#172
class Steep::TypeInference::MethodCall::NoMethodError < ::Steep::TypeInference::MethodCall::Base
  # source://steep//lib/steep/type_inference/method_call.rb#175
  def initialize(node:, context:, method_name:, receiver_type:, error:); end

  # source://steep//lib/steep/type_inference/method_call.rb#173
  def error; end
end

# source://steep//lib/steep/type_inference/method_call.rb#163
class Steep::TypeInference::MethodCall::Special < ::Steep::TypeInference::MethodCall::Typed; end

# source://steep//lib/steep/type_inference/method_call.rb#44
class Steep::TypeInference::MethodCall::TopLevelContext
  # source://steep//lib/steep/type_inference/method_call.rb#49
  def ==(other); end

  # source://steep//lib/steep/type_inference/method_call.rb#49
  def eql?(other); end

  # source://steep//lib/steep/type_inference/method_call.rb#55
  def hash; end

  # source://steep//lib/steep/type_inference/method_call.rb#45
  def to_s; end
end

# source://steep//lib/steep/type_inference/method_call.rb#115
class Steep::TypeInference::MethodCall::Typed < ::Steep::TypeInference::MethodCall::Base
  # source://steep//lib/steep/type_inference/method_call.rb#119
  def initialize(node:, context:, method_name:, receiver_type:, actual_method_type:, method_decls:, return_type:); end

  # source://steep//lib/steep/type_inference/method_call.rb#149
  def ==(other); end

  # source://steep//lib/steep/type_inference/method_call.rb#116
  def actual_method_type; end

  # source://steep//lib/steep/type_inference/method_call.rb#149
  def eql?(other); end

  # source://steep//lib/steep/type_inference/method_call.rb#158
  def hash; end

  # source://steep//lib/steep/type_inference/method_call.rb#117
  def method_decls; end

  # source://steep//lib/steep/type_inference/method_call.rb#125
  def pure?; end

  # source://steep//lib/steep/type_inference/method_call.rb#137
  def update(node: T.unsafe(nil), return_type: T.unsafe(nil)); end
end

# source://steep//lib/steep/type_inference/method_call.rb#60
class Steep::TypeInference::MethodCall::UnknownContext
  # source://steep//lib/steep/type_inference/method_call.rb#65
  def ==(other); end

  # source://steep//lib/steep/type_inference/method_call.rb#65
  def eql?(other); end

  # source://steep//lib/steep/type_inference/method_call.rb#71
  def hash; end

  # source://steep//lib/steep/type_inference/method_call.rb#61
  def to_s; end
end

# source://steep//lib/steep/type_inference/method_call.rb#166
class Steep::TypeInference::MethodCall::Untyped < ::Steep::TypeInference::MethodCall::Base
  # source://steep//lib/steep/type_inference/method_call.rb#167
  def initialize(node:, context:, method_name:); end
end

# source://steep//lib/steep/type_inference/method_params.rb#3
class Steep::TypeInference::MethodParams
  # source://steep//lib/steep/type_inference/method_params.rb#148
  def initialize(args:, method_type:, forward_arg_type:); end

  # source://steep//lib/steep/type_inference/method_params.rb#156
  def [](name); end

  # source://steep//lib/steep/type_inference/method_params.rb#142
  def args; end

  # source://steep//lib/steep/type_inference/method_params.rb#176
  def each; end

  # source://steep//lib/steep/type_inference/method_params.rb#168
  def each_param(&block); end

  # source://steep//lib/steep/type_inference/method_params.rb#145
  def errors; end

  # source://steep//lib/steep/type_inference/method_params.rb#146
  def forward_arg_type; end

  # source://steep//lib/steep/type_inference/method_params.rb#143
  def method_type; end

  # source://steep//lib/steep/type_inference/method_params.rb#160
  def param?(name); end

  # source://steep//lib/steep/type_inference/method_params.rb#144
  def params; end

  # source://steep//lib/steep/type_inference/method_params.rb#164
  def size; end

  # source://steep//lib/steep/type_inference/method_params.rb#186
  def update(forward_arg_type: T.unsafe(nil)); end

  class << self
    # source://steep//lib/steep/type_inference/method_params.rb#228
    def build(node:, method_type:); end

    # source://steep//lib/steep/type_inference/method_params.rb#190
    def empty(node:); end
  end
end

# source://steep//lib/steep/type_inference/method_params.rb#4
class Steep::TypeInference::MethodParams::BaseParameter
  # source://steep//lib/steep/type_inference/method_params.rb#9
  def initialize(name:, type:, node:); end

  # source://steep//lib/steep/type_inference/method_params.rb#39
  def ==(other); end

  # source://steep//lib/steep/type_inference/method_params.rb#39
  def eql?(other); end

  # source://steep//lib/steep/type_inference/method_params.rb#49
  def hash; end

  # source://steep//lib/steep/type_inference/method_params.rb#5
  def name; end

  # source://steep//lib/steep/type_inference/method_params.rb#7
  def node; end

  # source://steep//lib/steep/type_inference/method_params.rb#15
  def optional?; end

  # source://steep//lib/steep/type_inference/method_params.rb#6
  def type; end

  # source://steep//lib/steep/type_inference/method_params.rb#35
  def untyped?; end

  # source://steep//lib/steep/type_inference/method_params.rb#24
  def value; end

  # source://steep//lib/steep/type_inference/method_params.rb#31
  def var_type; end
end

# source://steep//lib/steep/type_inference/method_params.rb#57
class Steep::TypeInference::MethodParams::BaseRestParameter
  # source://steep//lib/steep/type_inference/method_params.rb#62
  def initialize(name:, type:, node:); end

  # source://steep//lib/steep/type_inference/method_params.rb#68
  def ==(other); end

  # source://steep//lib/steep/type_inference/method_params.rb#68
  def eql?(other); end

  # source://steep//lib/steep/type_inference/method_params.rb#77
  def hash; end

  # source://steep//lib/steep/type_inference/method_params.rb#58
  def name; end

  # source://steep//lib/steep/type_inference/method_params.rb#60
  def node; end

  # source://steep//lib/steep/type_inference/method_params.rb#59
  def type; end
end

# source://steep//lib/steep/type_inference/method_params.rb#94
class Steep::TypeInference::MethodParams::BlockParameter
  # source://steep//lib/steep/type_inference/method_params.rb#100
  def initialize(name:, type:, node:, optional:, self_type:); end

  # source://steep//lib/steep/type_inference/method_params.rb#126
  def ==(other); end

  # source://steep//lib/steep/type_inference/method_params.rb#126
  def eql?(other); end

  # source://steep//lib/steep/type_inference/method_params.rb#137
  def hash; end

  # source://steep//lib/steep/type_inference/method_params.rb#95
  def name; end

  # source://steep//lib/steep/type_inference/method_params.rb#97
  def node; end

  # source://steep//lib/steep/type_inference/method_params.rb#108
  def optional?; end

  # source://steep//lib/steep/type_inference/method_params.rb#98
  def self_type; end

  # source://steep//lib/steep/type_inference/method_params.rb#96
  def type; end

  # source://steep//lib/steep/type_inference/method_params.rb#112
  def var_type; end
end

# source://steep//lib/steep/type_inference/method_params.rb#55
class Steep::TypeInference::MethodParams::KeywordParameter < ::Steep::TypeInference::MethodParams::BaseParameter; end

# source://steep//lib/steep/type_inference/method_params.rb#88
class Steep::TypeInference::MethodParams::KeywordRestParameter < ::Steep::TypeInference::MethodParams::BaseRestParameter
  # source://steep//lib/steep/type_inference/method_params.rb#89
  def var_type; end
end

# source://steep//lib/steep/type_inference/method_params.rb#54
class Steep::TypeInference::MethodParams::PositionalParameter < ::Steep::TypeInference::MethodParams::BaseParameter; end

# source://steep//lib/steep/type_inference/method_params.rb#82
class Steep::TypeInference::MethodParams::PositionalRestParameter < ::Steep::TypeInference::MethodParams::BaseRestParameter
  # source://steep//lib/steep/type_inference/method_params.rb#83
  def var_type; end
end

# source://steep//lib/steep/type_inference/multiple_assignment.rb#3
class Steep::TypeInference::MultipleAssignment
  # source://steep//lib/steep/type_inference/multiple_assignment.rb#20
  def expand(mlhs, rhs_type, optional); end

  # source://steep//lib/steep/type_inference/multiple_assignment.rb#142
  def expand_any(nodes, rhs_type, element_type, optional); end

  # source://steep//lib/steep/type_inference/multiple_assignment.rb#87
  def expand_array(lhss, rhs_type, optional); end

  # source://steep//lib/steep/type_inference/multiple_assignment.rb#35
  def expand_tuple(lhss, rhs_type, tuples, optional); end

  # source://steep//lib/steep/type_inference/multiple_assignment.rb#171
  def hint_for_mlhs(mlhs, env); end
end

# source://steep//lib/steep/type_inference/multiple_assignment.rb#4
class Steep::TypeInference::MultipleAssignment::Assignments < ::Struct
  # source://steep//lib/steep/type_inference/multiple_assignment.rb#7
  def each(&block); end

  def leading_assignments; end
  def leading_assignments=(_); end
  def optional; end
  def optional=(_); end
  def rhs_type; end
  def rhs_type=(_); end
  def splat_assignment; end
  def splat_assignment=(_); end
  def trailing_assignments; end
  def trailing_assignments=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://steep//lib/steep/type_inference/send_args.rb#3
class Steep::TypeInference::SendArgs
  # source://steep//lib/steep/type_inference/send_args.rb#502
  def initialize(node:, arguments:, type:); end

  # source://steep//lib/steep/type_inference/send_args.rb#499
  def arguments; end

  # source://steep//lib/steep/type_inference/send_args.rb#519
  def block; end

  # source://steep//lib/steep/type_inference/send_args.rb#564
  def block_pass_arg; end

  # source://steep//lib/steep/type_inference/send_args.rb#570
  def each; end

  # source://steep//lib/steep/type_inference/send_args.rb#553
  def forwarded_args_node; end

  # source://steep//lib/steep/type_inference/send_args.rb#557
  def keyword_args; end

  # source://steep//lib/steep/type_inference/send_args.rb#532
  def keyword_params; end

  # source://steep//lib/steep/type_inference/send_args.rb#536
  def kwargs_node; end

  # source://steep//lib/steep/type_inference/send_args.rb#498
  def node; end

  # source://steep//lib/steep/type_inference/send_args.rb#508
  def params; end

  # source://steep//lib/steep/type_inference/send_args.rb#542
  def positional_arg; end

  # source://steep//lib/steep/type_inference/send_args.rb#528
  def positional_params; end

  # source://steep//lib/steep/type_inference/send_args.rb#500
  def type; end
end

# source://steep//lib/steep/type_inference/send_args.rb#434
class Steep::TypeInference::SendArgs::BlockPassArg
  include ::Steep::Equatable

  # source://steep//lib/steep/type_inference/send_args.rb#438
  def initialize(node:, block:); end

  # source://steep//lib/steep/type_inference/send_args.rb#436
  def block; end

  # source://steep//lib/steep/type_inference/send_args.rb#457
  def block_missing?; end

  # source://steep//lib/steep/type_inference/send_args.rb#449
  def compatible?; end

  # source://steep//lib/steep/type_inference/send_args.rb#445
  def no_block?; end

  # source://steep//lib/steep/type_inference/send_args.rb#435
  def node; end

  # source://steep//lib/steep/type_inference/send_args.rb#476
  def node_type; end

  # source://steep//lib/steep/type_inference/send_args.rb#465
  def pair; end

  # source://steep//lib/steep/type_inference/send_args.rb#461
  def unexpected_block?; end
end

# source://steep//lib/steep/type_inference/send_args.rb#489
class Steep::TypeInference::SendArgs::ForwardedArgs
  # source://steep//lib/steep/type_inference/send_args.rb#492
  def initialize(node:, params:); end

  # source://steep//lib/steep/type_inference/send_args.rb#490
  def node; end

  # source://steep//lib/steep/type_inference/send_args.rb#490
  def params; end
end

# source://steep//lib/steep/type_inference/send_args.rb#188
class Steep::TypeInference::SendArgs::KeywordArgs
  # source://steep//lib/steep/type_inference/send_args.rb#258
  def initialize(kwarg_nodes:, keyword_params:, index: T.unsafe(nil), consumed_keywords: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/send_args.rb#294
  def all_keys; end

  # source://steep//lib/steep/type_inference/send_args.rb#301
  def all_values; end

  # source://steep//lib/steep/type_inference/send_args.rb#402
  def consume_keys(keys, node:); end

  # source://steep//lib/steep/type_inference/send_args.rb#256
  def consumed_keywords; end

  # source://steep//lib/steep/type_inference/send_args.rb#255
  def index; end

  # source://steep//lib/steep/type_inference/send_args.rb#274
  def keyword_pair; end

  # source://steep//lib/steep/type_inference/send_args.rb#254
  def keyword_params; end

  # source://steep//lib/steep/type_inference/send_args.rb#290
  def keyword_type(key); end

  # source://steep//lib/steep/type_inference/send_args.rb#253
  def kwarg_nodes; end

  # source://steep//lib/steep/type_inference/send_args.rb#323
  def next; end

  # source://steep//lib/steep/type_inference/send_args.rb#282
  def optional_keywords; end

  # source://steep//lib/steep/type_inference/send_args.rb#308
  def possible_key_type; end

  # source://steep//lib/steep/type_inference/send_args.rb#316
  def possible_value_type; end

  # source://steep//lib/steep/type_inference/send_args.rb#278
  def required_keywords; end

  # source://steep//lib/steep/type_inference/send_args.rb#286
  def rest_type; end

  # source://steep//lib/steep/type_inference/send_args.rb#265
  def update(index: T.unsafe(nil), consumed_keywords: T.unsafe(nil)); end
end

# source://steep//lib/steep/type_inference/send_args.rb#189
class Steep::TypeInference::SendArgs::KeywordArgs::ArgTypePairs
  include ::Steep::Equatable

  # source://steep//lib/steep/type_inference/send_args.rb#192
  def initialize(pairs:); end

  # source://steep//lib/steep/type_inference/send_args.rb#198
  def [](index); end

  # source://steep//lib/steep/type_inference/send_args.rb#190
  def pairs; end

  # source://steep//lib/steep/type_inference/send_args.rb#202
  def size; end
end

# source://steep//lib/steep/type_inference/send_args.rb#243
class Steep::TypeInference::SendArgs::KeywordArgs::MissingKeyword
  include ::Steep::Equatable

  # source://steep//lib/steep/type_inference/send_args.rb#248
  def initialize(keywords:); end

  # source://steep//lib/steep/type_inference/send_args.rb#244
  def keywords; end
end

# source://steep//lib/steep/type_inference/send_args.rb#207
class Steep::TypeInference::SendArgs::KeywordArgs::SplatArg
  include ::Steep::Equatable

  # source://steep//lib/steep/type_inference/send_args.rb#211
  def initialize(node:); end

  # source://steep//lib/steep/type_inference/send_args.rb#208
  def node; end

  # source://steep//lib/steep/type_inference/send_args.rb#209
  def type; end

  # source://steep//lib/steep/type_inference/send_args.rb#209
  def type=(_arg0); end
end

# source://steep//lib/steep/type_inference/send_args.rb#219
class Steep::TypeInference::SendArgs::KeywordArgs::UnexpectedKeyword
  include ::Steep::Equatable

  # source://steep//lib/steep/type_inference/send_args.rb#225
  def initialize(keyword:, node:); end

  # source://steep//lib/steep/type_inference/send_args.rb#230
  def key_node; end

  # source://steep//lib/steep/type_inference/send_args.rb#220
  def keyword; end

  # source://steep//lib/steep/type_inference/send_args.rb#221
  def node; end

  # source://steep//lib/steep/type_inference/send_args.rb#236
  def value_node; end
end

# source://steep//lib/steep/type_inference/send_args.rb#4
class Steep::TypeInference::SendArgs::PositionalArgs
  # source://steep//lib/steep/type_inference/send_args.rb#79
  def initialize(args:, index:, positional_params:, uniform: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/send_args.rb#74
  def args; end

  # source://steep//lib/steep/type_inference/send_args.rb#153
  def consume(n, node:); end

  # source://steep//lib/steep/type_inference/send_args.rb#168
  def consume0(n, node:, params:, ps:); end

  # source://steep//lib/steep/type_inference/send_args.rb#90
  def following_args; end

  # source://steep//lib/steep/type_inference/send_args.rb#75
  def index; end

  # source://steep//lib/steep/type_inference/send_args.rb#102
  def next; end

  # source://steep//lib/steep/type_inference/send_args.rb#86
  def node; end

  # source://steep//lib/steep/type_inference/send_args.rb#94
  def param; end

  # source://steep//lib/steep/type_inference/send_args.rb#76
  def positional_params; end

  # source://steep//lib/steep/type_inference/send_args.rb#77
  def uniform; end

  # source://steep//lib/steep/type_inference/send_args.rb#146
  def uniform_type; end

  # source://steep//lib/steep/type_inference/send_args.rb#98
  def update(index: T.unsafe(nil), positional_params: T.unsafe(nil), uniform: T.unsafe(nil)); end
end

# source://steep//lib/steep/type_inference/send_args.rb#64
class Steep::TypeInference::SendArgs::PositionalArgs::MissingArg
  include ::Steep::Equatable

  # source://steep//lib/steep/type_inference/send_args.rb#67
  def initialize(params:); end

  # source://steep//lib/steep/type_inference/send_args.rb#65
  def params; end
end

# source://steep//lib/steep/type_inference/send_args.rb#5
class Steep::TypeInference::SendArgs::PositionalArgs::NodeParamPair
  include ::Steep::Equatable

  # source://steep//lib/steep/type_inference/send_args.rb#9
  def initialize(node:, param:); end

  # source://steep//lib/steep/type_inference/send_args.rb#6
  def node; end

  # source://steep//lib/steep/type_inference/send_args.rb#7
  def param; end

  # source://steep//lib/steep/type_inference/send_args.rb#16
  def to_ary; end
end

# source://steep//lib/steep/type_inference/send_args.rb#21
class Steep::TypeInference::SendArgs::PositionalArgs::NodeTypePair
  include ::Steep::Equatable

  # source://steep//lib/steep/type_inference/send_args.rb#25
  def initialize(node:, type:); end

  # source://steep//lib/steep/type_inference/send_args.rb#22
  def node; end

  # source://steep//lib/steep/type_inference/send_args.rb#32
  def node_type; end

  # source://steep//lib/steep/type_inference/send_args.rb#23
  def type; end
end

# source://steep//lib/steep/type_inference/send_args.rb#42
class Steep::TypeInference::SendArgs::PositionalArgs::SplatArg
  include ::Steep::Equatable

  # source://steep//lib/steep/type_inference/send_args.rb#46
  def initialize(node:); end

  # source://steep//lib/steep/type_inference/send_args.rb#43
  def node; end

  # source://steep//lib/steep/type_inference/send_args.rb#44
  def type; end

  # source://steep//lib/steep/type_inference/send_args.rb#44
  def type=(_arg0); end
end

# source://steep//lib/steep/type_inference/send_args.rb#54
class Steep::TypeInference::SendArgs::PositionalArgs::UnexpectedArg
  include ::Steep::Equatable

  # source://steep//lib/steep/type_inference/send_args.rb#57
  def initialize(node:); end

  # source://steep//lib/steep/type_inference/send_args.rb#55
  def node; end
end

# source://steep//lib/steep/type_inference/type_env.rb#3
class Steep::TypeInference::TypeEnv
  include ::Steep::NodeHelper

  # source://steep//lib/steep/type_inference/type_env.rb#42
  def initialize(constant_env, local_variable_types: T.unsafe(nil), instance_variable_types: T.unsafe(nil), global_types: T.unsafe(nil), constant_types: T.unsafe(nil), pure_method_calls: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/type_env.rb#81
  def [](name); end

  # source://steep//lib/steep/type_inference/type_env.rb#260
  def add_pure_call(node, call, type); end

  # source://steep//lib/steep/type_inference/type_env.rb#172
  def annotated_constant(name); end

  # source://steep//lib/steep/type_inference/type_env.rb#129
  def assign_local_variable(name, var_type, enforced_type); end

  # source://steep//lib/steep/type_inference/type_env.rb#110
  def assign_local_variables(assignments); end

  # source://steep//lib/steep/type_inference/type_env.rb#160
  def constant(arg1, arg2); end

  # source://steep//lib/steep/type_inference/type_env.rb#8
  def constant_env; end

  # source://steep//lib/steep/type_inference/type_env.rb#7
  def constant_types; end

  # source://steep//lib/steep/type_inference/type_env.rb#106
  def enforced_type(name); end

  # source://steep//lib/steep/type_inference/type_env.rb#330
  def global_name?(name); end

  # source://steep//lib/steep/type_inference/type_env.rb#7
  def global_types; end

  # source://steep//lib/steep/type_inference/type_env.rb#334
  def inspect; end

  # source://steep//lib/steep/type_inference/type_env.rb#326
  def instance_variable_name?(name); end

  # source://steep//lib/steep/type_inference/type_env.rb#7
  def instance_variable_types; end

  # source://steep//lib/steep/type_inference/type_env.rb#282
  def invalidate_pure_node(node); end

  # source://steep//lib/steep/type_inference/type_env.rb#299
  def invalidated_pure_nodes(invalidated_node); end

  # source://steep//lib/steep/type_inference/type_env.rb#224
  def join(*envs); end

  # source://steep//lib/steep/type_inference/type_env.rb#322
  def local_variable_name!(name); end

  # source://steep//lib/steep/type_inference/type_env.rb#312
  def local_variable_name?(name); end

  # source://steep//lib/steep/type_inference/type_env.rb#6
  def local_variable_types; end

  # source://steep//lib/steep/type_inference/type_env.rb#64
  def merge(local_variable_types: T.unsafe(nil), instance_variable_types: T.unsafe(nil), global_types: T.unsafe(nil), constant_types: T.unsafe(nil), pure_method_calls: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/type_env.rb#176
  def pin_local_variables(names); end

  # source://steep//lib/steep/type_inference/type_env.rb#9
  def pure_method_calls; end

  # source://steep//lib/steep/type_inference/type_env.rb#286
  def pure_node_invalidation(invalidated_nodes); end

  # source://steep//lib/steep/type_inference/type_env.rb#137
  def refine_types(local_variable_types: T.unsafe(nil), pure_call_types: T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/type_env.rb#272
  def replace_pure_call_type(node, type); end

  # source://steep//lib/steep/type_inference/type_env.rb#210
  def subst(s); end

  # source://steep//lib/steep/type_inference/type_env.rb#11
  def to_s; end

  # source://steep//lib/steep/type_inference/type_env.rb#193
  def unpin_local_variables(names); end

  # source://steep//lib/steep/type_inference/type_env.rb#53
  def update(local_variable_types: T.unsafe(nil), instance_variable_types: T.unsafe(nil), global_types: T.unsafe(nil), constant_types: T.unsafe(nil), pure_method_calls: T.unsafe(nil)); end
end

# source://steep//lib/steep/type_inference/type_env_builder.rb#3
class Steep::TypeInference::TypeEnvBuilder
  # source://steep//lib/steep/type_inference/type_env_builder.rb#127
  def initialize(*commands); end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#131
  def build(type_env); end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#125
  def commands; end
end

# source://steep//lib/steep/type_inference/type_env_builder.rb#4
module Steep::TypeInference::TypeEnvBuilder::Command; end

# source://steep//lib/steep/type_inference/type_env_builder.rb#5
class Steep::TypeInference::TypeEnvBuilder::Command::AnnotationsBase
  # source://steep//lib/steep/type_inference/type_env_builder.rb#8
  def initialize(annotations); end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#6
  def annotations; end
end

# source://steep//lib/steep/type_inference/type_env_builder.rb#114
class Steep::TypeInference::TypeEnvBuilder::Command::ImportConstantAnnotations < ::Steep::TypeInference::TypeEnvBuilder::Command::AnnotationsBase
  # source://steep//lib/steep/type_inference/type_env_builder.rb#115
  def call(env); end
end

# source://steep//lib/steep/type_inference/type_env_builder.rb#83
class Steep::TypeInference::TypeEnvBuilder::Command::ImportGlobalDeclarations < ::Steep::TypeInference::TypeEnvBuilder::Command::RBSBase
  # source://steep//lib/steep/type_inference/type_env_builder.rb#84
  def call(env); end
end

# source://steep//lib/steep/type_inference/type_env_builder.rb#64
class Steep::TypeInference::TypeEnvBuilder::Command::ImportInstanceVariableAnnotations < ::Steep::TypeInference::TypeEnvBuilder::Command::AnnotationsBase
  # source://steep//lib/steep/type_inference/type_env_builder.rb#65
  def call(env); end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#77
  def merge!(merge = T.unsafe(nil)); end
end

# source://steep//lib/steep/type_inference/type_env_builder.rb#93
class Steep::TypeInference::TypeEnvBuilder::Command::ImportInstanceVariableDefinition
  # source://steep//lib/steep/type_inference/type_env_builder.rb#98
  def initialize(definition, factory); end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#103
  def call(env); end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#94
  def definition; end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#96
  def factory; end
end

# source://steep//lib/steep/type_inference/type_env_builder.rb#24
class Steep::TypeInference::TypeEnvBuilder::Command::ImportLocalVariableAnnotations < ::Steep::TypeInference::TypeEnvBuilder::Command::AnnotationsBase
  # source://steep//lib/steep/type_inference/type_env_builder.rb#27
  def initialize(annotations); end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#43
  def call(env); end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#33
  def merge!(merge = T.unsafe(nil)); end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#25
  def on_duplicate; end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#38
  def on_duplicate!(&block); end
end

# source://steep//lib/steep/type_inference/type_env_builder.rb#13
class Steep::TypeInference::TypeEnvBuilder::Command::RBSBase
  # source://steep//lib/steep/type_inference/type_env_builder.rb#18
  def initialize(factory); end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#16
  def environment; end

  # source://steep//lib/steep/type_inference/type_env_builder.rb#14
  def factory; end
end

# source://steep//lib/steep/typing.rb#2
class Steep::Typing
  # source://steep//lib/steep/typing.rb#26
  def initialize(source:, root_context:, parent: T.unsafe(nil), parent_last_update: T.unsafe(nil), contexts: T.unsafe(nil), source_index: T.unsafe(nil)); end

  # source://steep//lib/steep/typing.rb#54
  def add_call(node, call); end

  # source://steep//lib/steep/typing.rb#60
  def add_context(range, context:); end

  # source://steep//lib/steep/typing.rb#125
  def add_context_for_body(node, context:); end

  # source://steep//lib/steep/typing.rb#99
  def add_context_for_node(node, context:); end

  # source://steep//lib/steep/typing.rb#43
  def add_error(error); end

  # source://steep//lib/steep/typing.rb#47
  def add_typing(node, type, _context); end

  # source://steep//lib/steep/typing.rb#106
  def block_range(node); end

  # source://steep//lib/steep/typing.rb#85
  def call_of(node:); end

  # source://steep//lib/steep/typing.rb#199
  def context_at(line:, column:); end

  # source://steep//lib/steep/typing.rb#21
  def contexts; end

  # source://steep//lib/steep/typing.rb#204
  def dump(io); end

  # source://steep//lib/steep/typing.rb#240
  def each_typing(&block); end

  # source://steep//lib/steep/typing.rb#15
  def errors; end

  # source://steep//lib/steep/typing.rb#65
  def has_type?(node); end

  # source://steep//lib/steep/typing.rb#19
  def last_update; end

  # source://steep//lib/steep/typing.rb#23
  def method_calls; end

  # source://steep//lib/steep/typing.rb#224
  def new_child(range); end

  # source://steep//lib/steep/typing.rb#17
  def parent; end

  # source://steep//lib/steep/typing.rb#18
  def parent_last_update; end

  # source://steep//lib/steep/typing.rb#22
  def root_context; end

  # source://steep//lib/steep/typing.rb#244
  def save!; end

  # source://steep//lib/steep/typing.rb#20
  def should_update; end

  # source://steep//lib/steep/typing.rb#14
  def source; end

  # source://steep//lib/steep/typing.rb#24
  def source_index; end

  # source://steep//lib/steep/typing.rb#69
  def type_of(node:); end

  # source://steep//lib/steep/typing.rb#16
  def typing; end

  class << self
    # source://steep//lib/steep/typing.rb#216
    def summary(node); end
  end
end

# source://steep//lib/steep/typing.rb#3
class Steep::Typing::UnknownNodeError < ::StandardError
  # source://steep//lib/steep/typing.rb#7
  def initialize(op, node:); end

  # source://steep//lib/steep/typing.rb#5
  def node; end

  # source://steep//lib/steep/typing.rb#4
  def op; end
end

# source://steep//lib/steep/version.rb#2
Steep::VERSION = T.let(T.unsafe(nil), String)
