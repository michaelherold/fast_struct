module FastStruct
  VERSION: String

  def self.dry_types_enabled?: -> bool
  def self.sorbet_sigs_enabled?: -> bool

  interface _Property
    def default: () -> String?
    def definition: () -> String
  end

  class Error < StandardError
  end

  class FailedToExtractDefaultError < Error
  end

  class RequiresSubclassError < Error
  end

  class Config
    @sorbet_sigs_enabled: bool

    attr_accessor sorbet_sigs_enabled: bool

    def initialize: (?sorbet_sigs_enabled: bool) -> void
  end

  class Const < Property
    include _Property
  end

  class DryTypesCompiler
    class Map
      public

      def key: () -> untyped
      def value: () -> untyped

      private

      def initialize: (untyped key, untyped value) -> void
    end

    class Schema
      include Enumerable[Hash[Symbol, untyped]]

      public

      def each: () { (Hash[Symbol, untyped]) -> void } -> void
      def empty?: () -> bool

      private

      def initialize: (Array[untyped] attribute_info) -> void
    end

    class Sum
      include Enumerable[Class]

      public

      def <<: (Class | NilClass | Sum arg) -> void
      def each: () { (Class) -> void } -> void
      def nilable?: () -> bool
      def size: () -> Integer
      def types: () -> Array[Class]

      private

      def initialize: () -> void
    end

    class Untyped
    end

    def self.call: (untyped type) -> String

    def compile: (untyped node) -> String

    private

    def sum_to_sorbet_type: (Sum sum) -> untyped
    def to_sorbet_type: (untyped klass) -> untyped
    def visit: (untyped node) -> untyped
    def visit_and: (untyped node) -> untyped
    def visit_any: (untyped node) -> untyped
    def visit_array: (untyped node) -> untyped
    def visit_constrained: (untyped node) -> untyped
    def visit_constructor: (untyped node) -> untyped
    def visit_enum: (untyped node) -> untyped
    def visit_hash: (untyped node) -> untyped
    def visit_key: (untyped node) -> untyped
    def visit_map: (untyped node) -> untyped
    def visit_nominal: (untyped node) -> untyped
    def visit_predicate: (untyped node) -> untyped
    def visit_schema: (untyped node) -> untyped
    def visit_struct: (untyped node) -> untyped
    def visit_sum: (untyped node) -> untyped
  end

  class ExtractDefault
    def self.call: (name: Symbol name, within: Thread::Backtrace::Location) -> String?

    private

    class DefaultExtractor < Prism::Visitor
      @default: String?

      def self.extract: (Prism::CallNode property_node) -> String?

      def initialize: () -> void
      def extract: (Prism::CallNode property_node) -> String?
      def visit_assoc_node: (Prism::AssocNode node) -> void

      private

      def body_from_block: (Prism::CallNode node) -> String?
      def proc_new?: (Prism::CallNode node) -> bool
    end

    class DefineExtractor < Prism::Visitor
      @define_node: Prism::CallNode?

      class CacheEntry
        def ==: (untyped other) -> bool
        alias eql? ==
        def cover?: (Integer line) -> bool
        def hash: () -> int
        def node: () -> Prism::CallNode

        private

        def initialize: (Prism::CallNode node) -> void
      end

      def self.cache: () -> Hash[String, Set[CacheEntry]]
      def self.extract: (within: Thread::Backtrace::Location) -> Prism::CallNode?

      def initialize: (String file, Integer line) -> void
      def extract: (Prism::ProgramNode tree) -> Prism::CallNode?
      def visit_call_node: (Prism::CallNode node) -> void
    end

    class PropertyExtractor < Prism::Visitor
      @name: Symbol
      @property_node: Prism::CallNode?

      def self.extract: (define_node: Prism::CallNode, name: Symbol) -> Prism::CallNode?

      def initialize: (Symbol name) -> void
      def extract: (Prism::CallNode define_node) -> Prism::CallNode?
      def visit_call_node: (Prism::CallNode node) -> void
    end
  end

  class Prop < Property
    include _Property
  end

  class Property
    def initialize: (Symbol name, Module type, default: String?) -> void
    def default: () -> String?
    def name: () -> Symbol
    def type: () -> Module
  end

  class Props
    def initialize: () -> void
    def call: (singleton(Struct) struct_class, Thread::Backtrace::Location? caller_location) { (*untyped) [self: Props] -> void } -> void
    def const: (Symbol name, Module type, ?default: ^() -> untyped) -> void
    def each_value: () { (Property arg0) -> void } -> void
    def empty?: () -> bool
    def prop: (Symbol name, Module type, ?default: ^() -> untyped) -> void

    private

    def add_sorbet_sig: (singleton(Struct) struct) -> void
    def define_attributes: (singleton(Struct) struct) -> void
    def define_initializer: (singleton(Struct) struct) -> void
    def extract_default: (Symbol name, (^() -> untyped)? default) -> String?
  end

  class Struct
    LINE_RANGE: Range[Integer]

    def self.define: () { (*untyped) [self: Props] -> void } -> void
    def self.inherited: (Class child) -> void
    def self.props: () -> FastStruct::Props
  end
end
